using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using System.Xml.Linq;
using MudSharp.Construction;
using MudSharp.Construction.Boundary;
using MudSharp.Events;
using MudSharp.Framework;
using MudSharp.Framework.Revision;
using MudSharp.GameItems.Interfaces;
using MudSharp.GameItems.Prototypes;
using MudSharp.PerceptionEngine;
using MudSharp.PerceptionEngine.Outputs;
using MudSharp.PerceptionEngine.Parsers;

namespace MudSharp.GameItems.Components;

public class DwellingGameItemComponent : GameItemComponent
{
	protected DwellingGameItemComponentProto _prototype;
	public override IGameItemComponentProto Prototype => _prototype;

	private long _entranceCellId;
	private ICell _entranceCell;

	public ICell EntranceCell
	{
		get
		{
			if (_entranceCellId != 0)
			{
				_entranceCell = Gameworld.Cells.Get(_entranceCellId);
				_entranceCellId = 0;
			}

			return _entranceCell;
		}
		set => _entranceCell = value;
	}

	protected override void UpdateComponentNewPrototype(IGameItemComponentProto newProto)
	{
		_prototype = (DwellingGameItemComponentProto)newProto;
	}

	private ICell GenerateCells()
	{
		var cellMap = new Dictionary<ICell, ICell>();
		var package = new CellOverlayPackage(Gameworld, null, $"Autogenerated Dwelling Package {DateTime.UtcNow:R}");
		Gameworld.Add(package);
		var baseRoom = new Room(Parent.Location.Room.Zone, package, _prototype.TemplateEntryCell, true);
		var baseCell = baseRoom.Cells.First();
		cellMap[_prototype.TemplateEntryCell] = baseCell;
		var baseCells = _prototype.GetTemplateCells.ToList();
		foreach (var cell in baseCells.Except(baseCell))
		{
			var newRoom = new Room(Parent.Location.Room.Zone, package, cell, true);
			cellMap[cell] = newRoom.Cells.First();
		}

		var exitsAlreadyBuilt = new List<IExit>();
		foreach (var cell in baseCells)
		foreach (var exit in cell.ExitsFor(null))
		{
			if (exitsAlreadyBuilt.Contains(exit.Exit))
			{
				continue;
			}

			var newExit = new Exit(Gameworld, cellMap[cell], cellMap[exit.Destination], (Exit)exit.Exit);
			cellMap[cell].GetOrCreateOverlay(package).AddExit(newExit);
			cellMap[exit.Destination].GetOrCreateOverlay(package).AddExit(newExit);
			exitsAlreadyBuilt.Add(exit.Exit);
		}

		foreach (var cell in cellMap)
		{
			Gameworld.ExitManager.UpdateCellOverlayExits(cell.Value, cell.Value.CurrentOverlay);
		}

		var frontExit = new Exit(Gameworld, Parent.Location, baseCell, 1.0,
			Gameworld.NonCardinalExitTemplates.Get(
				Gameworld.GetStaticLong("DefaultNonCardinalExitForDwellings")),
			_prototype.EntranceKeyword, _prototype.EntranceKeyword,
			_prototype.EntranceDescription, "the outside")
		{
			AcceptsDoor = true,
			DoorSize = _prototype.DoorSize,
			MaximumSizeToEnter = _prototype.DoorSize,
			MaximumSizeToEnterUpright = _prototype.DoorSize
		};
		var overlay = Parent.Location.GetOrCreateOverlay(Parent.Location.CurrentOverlay.Package);
		var otherOverlay = baseCell.GetOrCreateOverlay(baseCell.CurrentOverlay.Package);
		overlay.AddExit(frontExit);
		otherOverlay.AddExit(frontExit);
		Gameworld.ExitManager.UpdateCellOverlayExits(Parent.Location, overlay);
		Gameworld.ExitManager.UpdateCellOverlayExits(baseCell, otherOverlay);
		if (_prototype.DoorProto != null)
		{
			var newItem = _prototype.DoorProto.CreateNew(null);
			frontExit.Door = newItem.GetItemType<IDoor>();
			Gameworld.Add(newItem);
			frontExit.Door.InstalledExit = frontExit;
			newItem.HandleEvent(EventType.ItemFinishedLoading, newItem);
		}

		package.ChangeStatus(RevisionStatus.Current, "Autogenerated", null);
		return baseRoom.Cells.First();
	}

	private void Parent_OnLocationChanged(Form.Shape.ILocateable locatable, ICellExit exit)
	{
		if (Parent.Location != null)
		{
			EntranceCell = GenerateCells();
			Changed = true;
			Parent.OnLocationChanged -= Parent_OnLocationChanged;
		}
	}

	private void DestroyCells()
	{
		if (EntranceCell == null)
		{
			return;
		}

		var fallbackCell = Gameworld.ExitManager.GetAllExits(EntranceCell)
		                            .First(x => !x.Destination.Temporary &&
		                                        x.OutboundDirection == CardinalDirection.Unknown).Destination;
		foreach (var cell in EntranceCell.CellsInVicinity(10U, exit => true, cell => cell.Temporary))
		{
			cell.Room.DestroyRoom(fallbackCell);
		}
	}

	#region Overrides of GameItemComponent

	/// <summary>
	///     Handles any finalisation that this component needs to perform before being deleted.
	/// </summary>
	public override void Delete()
	{
		base.Delete();
		DestroyCells();
	}

	#endregion

	#region Constructors

	public DwellingGameItemComponent(DwellingGameItemComponentProto proto, IGameItem parent, bool temporary = false) :
		base(parent, proto, temporary)
	{
		_prototype = proto;
		Parent.OnLocationChanged += Parent_OnLocationChanged;
		Changed = true;
	}

	public DwellingGameItemComponent(MudSharp.Models.GameItemComponent component, DwellingGameItemComponentProto proto,
		IGameItem parent) : base(component, parent)
	{
		_prototype = proto;
		_noSave = true;
		LoadFromXml(XElement.Parse(component.Definition));
		_noSave = false;
	}

	public DwellingGameItemComponent(DwellingGameItemComponent rhs, IGameItem newParent, bool temporary = false) : base(
		rhs, newParent, temporary)
	{
		_prototype = rhs._prototype;
		if (!temporary)
		{
			Gameworld.SaveManager.AddInitialisation(this);
		}
		else
		{
			_noSave = true;
		}

		EntranceCell = GenerateCells();
		Changed = true;
	}

	protected void LoadFromXml(XElement root)
	{
		_entranceCellId = long.Parse(root.Element("EntranceCell")?.Value ?? "0");
	}

	public override IGameItemComponent Copy(IGameItem newParent, bool temporary = false)
	{
		return new DwellingGameItemComponent(this, newParent, temporary);
	}

	#endregion

	#region Saving

	protected override string SaveToXml()
	{
		return new XElement("Definition",
			new XElement("EntranceCell", EntranceCell?.Id ?? 0)
		).ToString();
	}

	#endregion
}