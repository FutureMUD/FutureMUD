// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MudSharp.Database;

namespace MudSharp.Migrations
{
    [DbContext(typeof(FuturemudDatabaseContext))]
    [Migration("20201108122141_EconomicZoneUpdate")]
    partial class EconomicZoneUpdate
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.6")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("MudSharp.Models.Accent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("ChargenAvailabilityProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int(11)");

                    b.Property<string>("Group")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Suffix")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("VagueSuffix")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId")
                        .HasName("FK_Accents_Languages");

                    b.ToTable("Accents");
                });

            modelBuilder.Entity("MudSharp.Models.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<int>("AccessStatus")
                        .HasColumnType("int(11)");

                    b.Property<int>("ActiveCharactersAllowed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'1'");

                    b.Property<ulong>("AppendNewlinesBetweenMultipleEchoesPerPrompt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<long?>("AuthorityGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("CharacterNameOverlaySetting")
                        .HasColumnType("int(11)");

                    b.Property<ulong>("CodedRoomDescriptionAdditionsOnNewLine")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CultureName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("FormatLength")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'110'");

                    b.Property<int>("InnerFormatLength")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'80'");

                    b.Property<ulong>("IsRegistered")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<string>("LastLoginIp")
                        .HasColumnName("LastLoginIP")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<DateTime?>("LastLoginTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("PageLength")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'22'");

                    b.Property<string>("Password")
                        .HasColumnType("varchar(1000)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<int>("PromptType")
                        .HasColumnType("int(11)");

                    b.Property<string>("RecoveryCode")
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("RegistrationCode")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("Salt")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("TabRoomDescriptions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<string>("TimeZoneId")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("UnitPreference")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<ulong>("UseMccp")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UseMCCP")
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<ulong>("UseMsp")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UseMSP")
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<ulong>("UseMxp")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("UseMXP")
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<ulong>("UseUnicode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.HasKey("Id");

                    b.HasIndex("AuthorityGroupId")
                        .HasName("FK_Accounts_AuthorityGroups");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("MudSharp.Models.AccountNote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("AuthorId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .HasName("FK_AccountNotes_Accounts");

                    b.HasIndex("AuthorId")
                        .HasName("FK_AccountNotes_Author");

                    b.ToTable("AccountNotes");
                });

            modelBuilder.Entity("MudSharp.Models.AccountsChargenResources", b =>
                {
                    b.Property<long>("AccountId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ChargenResourceId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Amount")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("LastAwardDate")
                        .HasColumnType("datetime");

                    b.HasKey("AccountId", "ChargenResourceId")
                        .HasName("PRIMARY");

                    b.HasIndex("ChargenResourceId")
                        .HasName("FK_Accounts_ChargenResources_ChargenResources");

                    b.ToTable("Accounts_ChargenResources");
                });

            modelBuilder.Entity("MudSharp.Models.ActiveProject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CellId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CurrentPhaseId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("ProjectRevisionNumber")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("CellId")
                        .HasName("FK_ActiveProjects_Cells_idx");

                    b.HasIndex("CharacterId")
                        .HasName("FK_ActiveProjects_Characters_idx");

                    b.HasIndex("CurrentPhaseId")
                        .HasName("FK_ActiveProjects_ProjectPhases_idx");

                    b.HasIndex("ProjectId", "ProjectRevisionNumber")
                        .HasName("FK_ActiveProjects_Projects_idx");

                    b.ToTable("ActiveProjects");
                });

            modelBuilder.Entity("MudSharp.Models.ActiveProjectLabour", b =>
                {
                    b.Property<long>("ActiveProjectId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ProjectLabourRequirementsId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("Progress")
                        .HasColumnType("double");

                    b.HasKey("ActiveProjectId", "ProjectLabourRequirementsId")
                        .HasName("PRIMARY");

                    b.HasIndex("ProjectLabourRequirementsId")
                        .HasName("FK_ActiveProjectLabours_ProjectLabourRequirements_idx");

                    b.ToTable("ActiveProjectLabours");
                });

            modelBuilder.Entity("MudSharp.Models.ActiveProjectMaterial", b =>
                {
                    b.Property<long>("ActiveProjectId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ProjectMaterialRequirementsId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("Progress")
                        .HasColumnType("double");

                    b.HasKey("ActiveProjectId", "ProjectMaterialRequirementsId")
                        .HasName("PRIMARY");

                    b.HasIndex("ProjectMaterialRequirementsId")
                        .HasName("FK_ActiveProjectMaterials_ProjectMaterialRequirements_idx");

                    b.ToTable("ActiveProjectMaterials");
                });

            modelBuilder.Entity("MudSharp.Models.Ally", b =>
                {
                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("AllyId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("Trusted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.HasKey("CharacterId", "AllyId")
                        .HasName("PRIMARY");

                    b.HasIndex("AllyId")
                        .HasName("FK_Allies_Characters_Target_idx");

                    b.ToTable("Allies");
                });

            modelBuilder.Entity("MudSharp.Models.AmmunitionTypes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<double>("BaseAccuracy")
                        .HasColumnType("double");

                    b.Property<int>("BaseBlockDifficulty")
                        .HasColumnType("int(11)");

                    b.Property<int>("BaseDodgeDifficulty")
                        .HasColumnType("int(11)");

                    b.Property<double>("BreakChanceOnHit")
                        .HasColumnType("double");

                    b.Property<double>("BreakChanceOnMiss")
                        .HasColumnType("double");

                    b.Property<string>("DamageExpression")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<int>("DamageType")
                        .HasColumnType("int(11)");

                    b.Property<int>("Loudness")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<string>("PainExpression")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<string>("RangedWeaponTypes")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<string>("SpecificType")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<string>("StunExpression")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.HasKey("Id");

                    b.ToTable("AmmunitionTypes");
                });

            modelBuilder.Entity("MudSharp.Models.Appointment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CanNominateProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ClanId")
                        .HasColumnType("bigint(20)");

                    b.Property<double?>("ElectionLeadTimeMinutes")
                        .HasColumnType("double");

                    b.Property<double?>("ElectionTermMinutes")
                        .HasColumnType("double");

                    b.Property<long?>("InsigniaGameItemId")
                        .HasColumnType("bigint(20)");

                    b.Property<int?>("InsigniaGameItemRevnum")
                        .HasColumnType("int(11)");

                    b.Property<ulong>("IsAppointedByElection")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValue(0ul);

                    b.Property<ulong?>("IsSecretBallot")
                        .HasColumnType("bit(1)");

                    b.Property<int?>("MaximumConsecutiveTerms")
                        .HasColumnType("int(11)");

                    b.Property<int>("MaximumSimultaneousHolders")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'1'");

                    b.Property<int?>("MaximumTotalTerms")
                        .HasColumnType("int(11)");

                    b.Property<long?>("MinimumRankId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("MinimumRankToAppointId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<double?>("NominationPeriodMinutes")
                        .HasColumnType("double");

                    b.Property<long?>("NumberOfVotesProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("ParentAppointmentId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("PaygradeId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("Privileges")
                        .HasColumnType("bigint(20)");

                    b.Property<double?>("VotingPeriodMinutes")
                        .HasColumnType("double");

                    b.Property<long?>("WhyCantNominateProgId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("CanNominateProgId")
                        .HasName("FK_Appointments_CanNominateProg_idx");

                    b.HasIndex("ClanId")
                        .HasName("FK_Appointments_Clans");

                    b.HasIndex("MinimumRankId")
                        .HasName("FK_Appointments_Ranks");

                    b.HasIndex("MinimumRankToAppointId")
                        .HasName("FK_Appointments_Ranks_2");

                    b.HasIndex("NumberOfVotesProgId")
                        .HasName("FK_Appointments_NumberOfVotesProg_idx");

                    b.HasIndex("ParentAppointmentId")
                        .HasName("FK_Appointments_ParentAppointment");

                    b.HasIndex("PaygradeId")
                        .HasName("FK_Appointments_Paygrades");

                    b.HasIndex("WhyCantNominateProgId")
                        .HasName("FK_Appointments_WhyCantNominateProg_idx");

                    b.HasIndex("InsigniaGameItemId", "InsigniaGameItemRevnum")
                        .HasName("FK_Appointments_GameItemProtos");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("MudSharp.Models.AppointmentsAbbreviations", b =>
                {
                    b.Property<string>("Abbreviation")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("AppointmentId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("FutureProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Order")
                        .HasColumnType("int(11)");

                    b.HasKey("Abbreviation", "AppointmentId")
                        .HasName("PRIMARY");

                    b.HasIndex("AppointmentId")
                        .HasName("FK_Appointments_Abbreviations_Appointments");

                    b.HasIndex("FutureProgId")
                        .HasName("FK_Appointments_Abbreviations_FutureProgs");

                    b.ToTable("Appointments_Abbreviations");
                });

            modelBuilder.Entity("MudSharp.Models.AppointmentsTitles", b =>
                {
                    b.Property<string>("Title")
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("AppointmentId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("FutureProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<int?>("Order")
                        .HasColumnType("int(11)");

                    b.HasKey("Title", "AppointmentId")
                        .HasName("PRIMARY");

                    b.HasIndex("AppointmentId")
                        .HasName("FK_Appointments_Titles_Appointments");

                    b.HasIndex("FutureProgId")
                        .HasName("FK_Appointments_Titles_FutureProgs");

                    b.ToTable("Appointments_Titles");
                });

            modelBuilder.Entity("MudSharp.Models.Areas", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long?>("WeatherControllerId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("WeatherControllerId")
                        .HasName("FK_Areas_WeatherControllers_idx");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("MudSharp.Models.AreasRooms", b =>
                {
                    b.Property<long>("AreaId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("RoomId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("AreaId", "RoomId")
                        .HasName("PRIMARY");

                    b.HasIndex("RoomId")
                        .HasName("FK_Areas_Rooms_Rooms_idx");

                    b.ToTable("Areas_Rooms");
                });

            modelBuilder.Entity("MudSharp.Models.ArmourType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<int>("BaseDifficultyDegrees")
                        .HasColumnType("int(11)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<int>("MinimumPenetrationDegree")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<int>("StackedDifficultyDegrees")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.ToTable("ArmourTypes");
                });

            modelBuilder.Entity("MudSharp.Models.ArtificialIntelligence", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("ArtificialIntelligences");
                });

            modelBuilder.Entity("MudSharp.Models.AuthorityGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<int>("AccountsLevel")
                        .HasColumnType("int(11)");

                    b.Property<int>("AuthorityLevel")
                        .HasColumnType("int(11)");

                    b.Property<int>("CharacterApprovalLevel")
                        .HasColumnType("int(11)");

                    b.Property<int>("CharacterApprovalRisk")
                        .HasColumnType("int(11)");

                    b.Property<int>("CharactersLevel")
                        .HasColumnType("int(11)");

                    b.Property<int>("InformationLevel")
                        .HasColumnType("int(11)");

                    b.Property<int>("ItemsLevel")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("PlanesLevel")
                        .HasColumnType("int(11)");

                    b.Property<int>("RoomsLevel")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.ToTable("AuthorityGroups");
                });

            modelBuilder.Entity("MudSharp.Models.AutobuilderAreaTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("TemplateType")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("AutobuilderAreaTemplates");
                });

            modelBuilder.Entity("MudSharp.Models.AutobuilderRoomTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ID")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("TemplateType")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("AutobuilderRoomTemplates");
                });

            modelBuilder.Entity("MudSharp.Models.Ban", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("BannerAccountId")
                        .HasColumnType("bigint(20)");

                    b.Property<DateTime?>("Expiry")
                        .HasColumnType("datetime");

                    b.Property<string>("IpMask")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("BannerAccountId")
                        .HasName("FK_Bans_Accounts");

                    b.ToTable("Bans");
                });

            modelBuilder.Entity("MudSharp.Models.BloodModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("BloodModels");
                });

            modelBuilder.Entity("MudSharp.Models.BloodModelsBloodtypes", b =>
                {
                    b.Property<long>("BloodModelId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("BloodtypeId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("BloodModelId", "BloodtypeId")
                        .HasName("PRIMARY");

                    b.HasIndex("BloodtypeId")
                        .HasName("FK_BloodModels_Bloodtypes_Bloodtypes_idx");

                    b.ToTable("BloodModels_Bloodtypes");
                });

            modelBuilder.Entity("MudSharp.Models.Bloodtype", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("Bloodtypes");
                });

            modelBuilder.Entity("MudSharp.Models.BloodtypeAntigen", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("BloodtypeAntigens");
                });

            modelBuilder.Entity("MudSharp.Models.BloodtypesBloodtypeAntigens", b =>
                {
                    b.Property<long>("BloodtypeId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("BloodtypeAntigenId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("BloodtypeId", "BloodtypeAntigenId")
                        .HasName("PRIMARY");

                    b.HasIndex("BloodtypeAntigenId")
                        .HasName("FK_Bloodtypes_BloodtypeAntigens_BloodtypeAntigens_idx");

                    b.ToTable("Bloodtypes_BloodtypeAntigens");
                });

            modelBuilder.Entity("MudSharp.Models.Board", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<ulong>("ShowOnLogin")
                        .HasColumnType("bit(1)");

                    b.HasKey("Id");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("MudSharp.Models.BoardPost", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("AuthorId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("BoardId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<DateTime>("PostTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId")
                        .HasName("FK_BoardsPosts_Accounts_idx");

                    b.HasIndex("BoardId")
                        .HasName("FK_BoardPosts_Boards_idx");

                    b.ToTable("BoardPosts");
                });

            modelBuilder.Entity("MudSharp.Models.BodiesGameItems", b =>
                {
                    b.Property<long>("BodyId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("GameItemId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("EquippedOrder")
                        .HasColumnType("int(11)");

                    b.Property<long?>("WearProfile")
                        .HasColumnType("bigint(20)");

                    b.Property<int?>("Wielded")
                        .HasColumnType("int(11)");

                    b.HasKey("BodyId", "GameItemId")
                        .HasName("PRIMARY");

                    b.HasIndex("GameItemId")
                        .HasName("FK_Bodies_GameItems_GameItems");

                    b.ToTable("Bodies_GameItems");
                });

            modelBuilder.Entity("MudSharp.Models.BodiesImplants", b =>
                {
                    b.Property<long>("BodyId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ImplantId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("BodyId", "ImplantId")
                        .HasName("PRIMARY");

                    b.HasIndex("ImplantId")
                        .HasName("FK_Bodies_Implants_GameItems_idx");

                    b.ToTable("Bodies_Implants");
                });

            modelBuilder.Entity("MudSharp.Models.BodiesProsthetics", b =>
                {
                    b.Property<long>("BodyId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ProstheticId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("BodyId", "ProstheticId")
                        .HasName("PRIMARY");

                    b.HasIndex("ProstheticId")
                        .HasName("FK_Bodies_Prosthetics_GameItems_idx");

                    b.ToTable("Bodies_Prosthetics");
                });

            modelBuilder.Entity("MudSharp.Models.BodiesSeveredParts", b =>
                {
                    b.Property<long>("BodiesId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("BodypartProtoId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("BodiesId", "BodypartProtoId")
                        .HasName("PRIMARY");

                    b.HasIndex("BodypartProtoId")
                        .HasName("FK_Bodies_SeveredParts_BodypartProtos_idx");

                    b.ToTable("Bodies_SeveredParts");
                });

            modelBuilder.Entity("MudSharp.Models.Body", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("BloodtypeId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("BodyPrototypeId")
                        .HasColumnName("BodyPrototypeID")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("CurrentBloodVolume")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'-1'");

                    b.Property<long?>("CurrentSpeed")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("CurrentStamina")
                        .HasColumnType("double");

                    b.Property<string>("EffectData")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("EthnicityId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("FullDescription")
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long?>("FullDescriptionPatternId")
                        .HasColumnType("bigint(20)");

                    b.Property<short>("Gender")
                        .HasColumnType("smallint(6)");

                    b.Property<double>("Height")
                        .HasColumnType("double");

                    b.Property<int>("HeldBreathLength")
                        .HasColumnType("int(11)");

                    b.Property<long>("Position")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("RaceId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Scars")
                        .HasColumnType("mediumtext")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("varchar(1000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long?>("ShortDescriptionPatternId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Tattoos")
                        .HasColumnType("mediumtext")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<double>("Weight")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("BloodtypeId")
                        .HasName("FK_Bodies_Bloodtypes_idx");

                    b.HasIndex("EthnicityId")
                        .HasName("FK_Bodies_Ethnicities_idx");

                    b.HasIndex("FullDescriptionPatternId")
                        .HasName("FK_Bodies_EntityDescriptionPatterns_Full_idx");

                    b.HasIndex("RaceId")
                        .HasName("FK_Bodies_Races");

                    b.HasIndex("ShortDescriptionPatternId")
                        .HasName("FK_Bodies_EntityDescriptionPatterns_Short_idx");

                    b.ToTable("Bodies");
                });

            modelBuilder.Entity("MudSharp.Models.BodyDrugDose", b =>
                {
                    b.Property<long>("BodyId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("DrugId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("Active")
                        .HasColumnType("bit(1)");

                    b.Property<double>("Grams")
                        .HasColumnType("double");

                    b.Property<int>("OriginalVector")
                        .HasColumnType("int(11)");

                    b.HasKey("BodyId", "DrugId", "Active")
                        .HasName("PRIMARY");

                    b.HasIndex("DrugId")
                        .HasName("FK_Bodies_DrugDoses_Drugs_idx");

                    b.ToTable("Bodies_DrugDoses");
                });

            modelBuilder.Entity("MudSharp.Models.BodyProto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("ConsiderString")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long?>("CountsAsId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("DefaultSmashingBodypartId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("LegDescriptionPlural")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1000)")
                        .HasDefaultValueSql("'legs'")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("LegDescriptionSingular")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1000)")
                        .HasDefaultValueSql("'leg'")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("MinimumLegsToStand")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'2'");

                    b.Property<int>("MinimumWingsToFly")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'2'");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long?>("StaminaRecoveryProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("WearSizeParameterId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("WielderDescriptionPlural")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(4000)")
                        .HasDefaultValueSql("'hands'")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("WielderDescriptionSingle")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(4000)")
                        .HasDefaultValueSql("'hand'")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("CountsAsId")
                        .HasName("FK_BodyPrototype_BodyPrototype_idx");

                    b.HasIndex("DefaultSmashingBodypartId")
                        .HasName("FK_BodyPrototype_Bodyparts_idx");

                    b.HasIndex("WearSizeParameterId")
                        .HasName("FK_BodyPrototype_WearableSizeParameterRule");

                    b.ToTable("BodyProtos");
                });

            modelBuilder.Entity("MudSharp.Models.BodyProtosAdditionalBodyparts", b =>
                {
                    b.Property<long>("BodyProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("BodypartId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Usage")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("BodyProtoId", "BodypartId", "Usage")
                        .HasName("PRIMARY");

                    b.HasIndex("BodypartId")
                        .HasName("FK_BodyProtos_AdditionalBodyparts_BodypartProto");

                    b.ToTable("BodyProtos_AdditionalBodyparts");
                });

            modelBuilder.Entity("MudSharp.Models.BodypartGroupDescriber", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Comment")
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("DescribedAs")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("BodypartGroupDescribers");
                });

            modelBuilder.Entity("MudSharp.Models.BodypartGroupDescribersBodyProtos", b =>
                {
                    b.Property<long>("BodypartGroupDescriberId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("BodyProtoId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("BodypartGroupDescriberId", "BodyProtoId")
                        .HasName("PRIMARY");

                    b.HasIndex("BodyProtoId")
                        .HasName("FK_BGD_BodyProtos_BodyProtos");

                    b.ToTable("BodypartGroupDescribers_BodyProtos");
                });

            modelBuilder.Entity("MudSharp.Models.BodypartGroupDescribersBodypartProtos", b =>
                {
                    b.Property<long>("BodypartGroupDescriberId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("BodypartProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("Mandatory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.HasKey("BodypartGroupDescriberId", "BodypartProtoId")
                        .HasName("PRIMARY");

                    b.HasIndex("BodypartProtoId")
                        .HasName("FK_BGD_BodypartProtos_BodypartProto");

                    b.ToTable("BodypartGroupDescribers_BodypartProtos");
                });

            modelBuilder.Entity("MudSharp.Models.BodypartGroupDescribersShapeCount", b =>
                {
                    b.Property<long>("BodypartGroupDescriptionRuleId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("MaxCount")
                        .HasColumnType("int(11)");

                    b.Property<int>("MinCount")
                        .HasColumnType("int(11)");

                    b.HasKey("BodypartGroupDescriptionRuleId", "TargetId")
                        .HasName("PRIMARY");

                    b.HasIndex("TargetId")
                        .HasName("FK_BGD_ShapeCount_BodypartShape");

                    b.ToTable("BodypartGroupDescribers_ShapeCount");
                });

            modelBuilder.Entity("MudSharp.Models.BodypartInternalInfos", b =>
                {
                    b.Property<long>("BodypartProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("InternalPartId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("HitChance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'5'");

                    b.Property<ulong>("IsPrimaryOrganLocation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<string>("ProximityGroup")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("BodypartProtoId", "InternalPartId")
                        .HasName("PRIMARY");

                    b.HasIndex("InternalPartId")
                        .HasName("FK_BodypartInternalInfos_BodypartProtos_Internal_idx");

                    b.ToTable("BodypartInternalInfos");
                });

            modelBuilder.Entity("MudSharp.Models.BodypartProto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Alignment")
                        .HasColumnType("int(11)");

                    b.Property<long?>("ArmourTypeId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("BleedModifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'0.1'");

                    b.Property<long>("BodyId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("BodypartShapeId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("BodypartType")
                        .HasColumnType("int(11)");

                    b.Property<long?>("CountAsId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("DamageModifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.Property<long>("DefaultMaterialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<double>("HypoxiaDamagePerTick")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'0.2'");

                    b.Property<double>("ImplantSpace")
                        .HasColumnType("double");

                    b.Property<double>("ImplantSpaceOccupied")
                        .HasColumnType("double");

                    b.Property<ulong>("IsCore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<int>("IsOrgan")
                        .HasColumnType("int(11)");

                    b.Property<ulong>("IsVital")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<int>("Location")
                        .HasColumnType("int(11)");

                    b.Property<int>("MaxLife")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'100'");

                    b.Property<int?>("MaxSingleSize")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<double>("PainModifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("RelativeHitChance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'100'");

                    b.Property<double>("RelativeInfectability")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("SeveredThreshold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'100'");

                    b.Property<ulong>("Significant")
                        .HasColumnType("bit(1)");

                    b.Property<int>("Size")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'5'");

                    b.Property<double>("StunModifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.Property<ulong?>("Unary")
                        .HasColumnType("bit(1)");

                    b.Property<double>("WeightLimit")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("ArmourTypeId")
                        .HasName("FK_BodypartProto_ArmourTypes_idx");

                    b.HasIndex("BodyId")
                        .HasName("FK_BodypartProto_BodyPrototype");

                    b.HasIndex("BodypartShapeId")
                        .HasName("FK_BodypartProto_BodypartShape");

                    b.HasIndex("CountAsId")
                        .HasName("FK_BodypartProto_BodypartProto_idx");

                    b.HasIndex("DefaultMaterialId")
                        .HasName("FK_BodypartProto_Materials_idx");

                    b.ToTable("BodypartProto");
                });

            modelBuilder.Entity("MudSharp.Models.BodypartProtoAlignmentHits", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Alignment")
                        .HasColumnType("int(11)");

                    b.Property<long>("BodypartProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<int?>("HitChance")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("BodypartProtoId")
                        .HasName("FK_BodypartProto_AlignmentHits_BodypartProto");

                    b.ToTable("BodypartProto_AlignmentHits");
                });

            modelBuilder.Entity("MudSharp.Models.BodypartProtoBodypartProtoUpstream", b =>
                {
                    b.Property<long>("Child")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("Parent")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Child", "Parent")
                        .HasName("PRIMARY");

                    b.HasIndex("Parent")
                        .HasName("FKParent");

                    b.ToTable("BodypartProto_BodypartProto_Upstream");
                });

            modelBuilder.Entity("MudSharp.Models.BodypartProtoOrientationHits", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long>("BodypartProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<int?>("HitChance")
                        .HasColumnType("int(11)");

                    b.Property<int>("Orientation")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("BodypartProtoId")
                        .HasName("FK_BodypartProto_OrientationHits_BodypartProto");

                    b.ToTable("BodypartProto_OrientationHits");
                });

            modelBuilder.Entity("MudSharp.Models.BodypartShape", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("BodypartShape");
                });

            modelBuilder.Entity("MudSharp.Models.Bodypartshapecountview", b =>
                {
                    b.Property<sbyte>("BodypartGroupDescriptionRuleId")
                        .HasColumnType("tinyint(4)");

                    b.Property<sbyte>("DescribedAs")
                        .HasColumnType("tinyint(4)");

                    b.Property<sbyte>("MaxCount")
                        .HasColumnType("tinyint(4)");

                    b.Property<sbyte>("MinCount")
                        .HasColumnType("tinyint(4)");

                    b.Property<sbyte>("Name")
                        .HasColumnType("tinyint(4)");

                    b.Property<sbyte>("TargetId")
                        .HasColumnType("tinyint(4)");

                    b.ToTable("bodypartshapecountview");
                });

            modelBuilder.Entity("MudSharp.Models.BoneOrganCoverage", b =>
                {
                    b.Property<long>("BoneId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("OrganId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("CoverageChance")
                        .HasColumnType("double");

                    b.HasKey("BoneId", "OrganId")
                        .HasName("PRIMARY");

                    b.HasIndex("OrganId")
                        .HasName("FK_BoneOrganCoverages_BodypartProto_Organ_idx");

                    b.ToTable("BoneOrganCoverages");
                });

            modelBuilder.Entity("MudSharp.Models.ButcheryProductItems", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ButcheryProductId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("ButcheryProductItemscol")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<double>("DamageThreshold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'10'");

                    b.Property<long?>("DamagedProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("DamagedQuantity")
                        .HasColumnType("int(11)");

                    b.Property<long>("NormalProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("NormalQuantity")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("ButcheryProductId")
                        .HasName("FK_ButcheryProductItems_ButcheryProducts_idx");

                    b.ToTable("ButcheryProductItems");
                });

            modelBuilder.Entity("MudSharp.Models.ButcheryProducts", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CanProduceProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("IsPelt")
                        .HasColumnType("bit(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Subcategory")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("TargetBodyId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("CanProduceProgId")
                        .HasName("FK_ButcheryProducts_FutureProgs_idx");

                    b.HasIndex("TargetBodyId")
                        .HasName("FK_ButcheryProducts_BodyProtos_idx");

                    b.ToTable("ButcheryProducts");
                });

            modelBuilder.Entity("MudSharp.Models.ButcheryProductsBodypartProtos", b =>
                {
                    b.Property<long>("ButcheryProductId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("BodypartProtoId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ButcheryProductId", "BodypartProtoId")
                        .HasName("PRIMARY");

                    b.HasIndex("BodypartProtoId")
                        .HasName("FK_ButcheryProducts_BodypartProtos_BodypartProtos_idx");

                    b.ToTable("ButcheryProducts_BodypartProtos");
                });

            modelBuilder.Entity("MudSharp.Models.Calendar", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("FeedClockId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.ToTable("Calendars");
                });

            modelBuilder.Entity("MudSharp.Models.Celestial", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<int>("CelestialYear")
                        .HasColumnType("int(11)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("FeedClockId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("LastYearBump")
                        .HasColumnType("int(11)");

                    b.Property<int>("Minutes")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.ToTable("Celestials");
                });

            modelBuilder.Entity("MudSharp.Models.Cell", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CurrentOverlayId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("EffectData")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long?>("ForagableProfileId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("RoomId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("Temporary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.HasKey("Id");

                    b.HasIndex("CurrentOverlayId")
                        .HasName("FK_Cells_CellOverlays");

                    b.HasIndex("RoomId")
                        .HasName("FK_Cells_Rooms");

                    b.ToTable("Cells");
                });

            modelBuilder.Entity("MudSharp.Models.CellMagicResource", b =>
                {
                    b.Property<long>("CellId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("MagicResourceId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.HasKey("CellId", "MagicResourceId")
                        .HasName("PRIMARY");

                    b.HasIndex("MagicResourceId")
                        .HasName("FK_Cells_MagicResources_MagicResources_idx");

                    b.ToTable("Cells_MagicResources");
                });

            modelBuilder.Entity("MudSharp.Models.CellOverlay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<double>("AddedLight")
                        .HasColumnType("double");

                    b.Property<double>("AmbientLightFactor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.Property<long?>("AtmosphereId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("AtmosphereType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'gas'")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("CellDescription")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("CellId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("CellName")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("CellOverlayPackageId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("CellOverlayPackageRevisionNumber")
                        .HasColumnType("int(11)");

                    b.Property<long?>("HearingProfileId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("OutdoorsType")
                        .HasColumnType("int(11)");

                    b.Property<long>("TerrainId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("CellId")
                        .HasName("FK_CellOverlays_Cells");

                    b.HasIndex("HearingProfileId")
                        .HasName("FK_CellOverlays_HearingProfiles");

                    b.HasIndex("TerrainId")
                        .HasName("FK_CellOverlays_Terrains");

                    b.HasIndex("CellOverlayPackageId", "CellOverlayPackageRevisionNumber")
                        .HasName("FK_CellOverlays_CellOverlayPackages");

                    b.ToTable("CellOverlays");
                });

            modelBuilder.Entity("MudSharp.Models.CellOverlayExit", b =>
                {
                    b.Property<long>("CellOverlayId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ExitId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("CellOverlayId", "ExitId")
                        .HasName("PRIMARY");

                    b.HasIndex("ExitId")
                        .HasName("FK_CellOverlays_Exits_Exits");

                    b.ToTable("CellOverlays_Exits");
                });

            modelBuilder.Entity("MudSharp.Models.CellOverlayPackage", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("RevisionNumber")
                        .HasColumnType("int(11)");

                    b.Property<long>("EditableItemId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id", "RevisionNumber")
                        .HasName("PRIMARY");

                    b.HasIndex("EditableItemId")
                        .HasName("FK_CellOverlayPackages_EditableItems");

                    b.ToTable("CellOverlayPackages");
                });

            modelBuilder.Entity("MudSharp.Models.CellsForagableYield", b =>
                {
                    b.Property<long>("CellId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("ForagableType")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<double>("Yield")
                        .HasColumnType("double");

                    b.HasKey("CellId", "ForagableType")
                        .HasName("PRIMARY");

                    b.ToTable("Cells_ForagableYields");
                });

            modelBuilder.Entity("MudSharp.Models.CellsGameItems", b =>
                {
                    b.Property<long>("CellId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("GameItemId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("CellId", "GameItemId")
                        .HasName("PRIMARY");

                    b.HasIndex("GameItemId")
                        .HasName("FK_Cells_GameItems_GameItems");

                    b.ToTable("Cells_GameItems");
                });

            modelBuilder.Entity("MudSharp.Models.CellsRangedCovers", b =>
                {
                    b.Property<long>("CellId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("RangedCoverId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("CellId", "RangedCoverId")
                        .HasName("PRIMARY");

                    b.HasIndex("RangedCoverId")
                        .HasName("FK_Cells_RangedCovers_RangedCovers_idx");

                    b.ToTable("Cells_RangedCovers");
                });

            modelBuilder.Entity("MudSharp.Models.CellsTags", b =>
                {
                    b.Property<long>("CellId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("CellId", "TagId")
                        .HasName("PRIMARY");

                    b.HasIndex("TagId")
                        .HasName("FK_Cells_Tags_Tags_idx");

                    b.ToTable("Cells_Tags");
                });

            modelBuilder.Entity("MudSharp.Models.Channel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("AddToGuideCommandTree")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<ulong>("AddToPlayerCommandTree")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<ulong>("AnnounceChannelJoiners")
                        .HasColumnType("bit(1)");

                    b.Property<ulong>("AnnounceMissedListeners")
                        .HasColumnType("bit(1)");

                    b.Property<string>("ChannelColour")
                        .IsRequired()
                        .HasColumnType("char(10)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("ChannelListenerProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("ChannelName")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("ChannelSpeakerProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Mode")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("ChannelListenerProgId")
                        .HasName("FK_Channels_FutureProgs_Listener");

                    b.HasIndex("ChannelSpeakerProgId")
                        .HasName("FK_Channels_FutureProgs_Speaker");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("MudSharp.Models.ChannelCommandWord", b =>
                {
                    b.Property<string>("Word")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Word")
                        .HasName("PRIMARY");

                    b.HasIndex("ChannelId")
                        .HasName("FK_ChannelCommandWords_Channels");

                    b.ToTable("ChannelCommandWords");
                });

            modelBuilder.Entity("MudSharp.Models.ChannelIgnorer", b =>
                {
                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ChannelId", "AccountId")
                        .HasName("PRIMARY");

                    b.HasIndex("AccountId")
                        .HasName("FK_ChannelIgnorers_Accounts");

                    b.ToTable("ChannelIgnorers");
                });

            modelBuilder.Entity("MudSharp.Models.Character", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("AlcoholLitres")
                        .HasColumnType("double");

                    b.Property<long>("BirthdayCalendarId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("BirthdayDate")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("BodyId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("Calories")
                        .HasColumnType("double");

                    b.Property<long?>("ChargenId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("CombatBrief")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime");

                    b.Property<long>("CultureId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CurrentAccentId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CurrentCombatSettingId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CurrentLanguageId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("CurrentProjectHours")
                        .HasColumnType("double");

                    b.Property<long?>("CurrentProjectId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CurrentProjectLabourId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CurrentScriptId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CurrentWritingLanguageId")
                        .HasColumnType("bigint(20)");

                    b.Property<DateTime?>("DeathTime")
                        .HasColumnType("datetime");

                    b.Property<int>("DominantHandAlignment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'3'");

                    b.Property<double>("DrinkSatiatedHours")
                        .HasColumnType("double");

                    b.Property<string>("EffectData")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<double>("FoodSatiatedHours")
                        .HasColumnType("double");

                    b.Property<short>("Gender")
                        .HasColumnType("smallint(6)");

                    b.Property<string>("IntroductionMessage")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<ulong>("IsAdminAvatar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<DateTime?>("LastLoginTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastLogoutTime")
                        .HasColumnType("datetime");

                    b.Property<long>("Location")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("LongTermPlan")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("NameInfo")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("NeedsModel")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("'NoNeeds'")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<ulong>("NoMercy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<string>("Outfits")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("PositionEmote")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("PositionModifier")
                        .HasColumnType("int(11)");

                    b.Property<long?>("PositionTargetId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("PositionTargetType")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("PreferredDefenseType")
                        .HasColumnType("int(11)");

                    b.Property<ulong>("RoomBrief")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<int>("RoomLayer")
                        .HasColumnType("int(11)");

                    b.Property<string>("ShortTermPlan")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<ulong>("ShownIntroductionMessage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<int>("State")
                        .HasColumnType("int(11)");

                    b.Property<int>("Status")
                        .HasColumnType("int(11)");

                    b.Property<int>("TotalMinutesPlayed")
                        .HasColumnType("int(11)");

                    b.Property<double>("WaterLitres")
                        .HasColumnType("double");

                    b.Property<int>("WritingStyle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'8256'");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .HasName("FK_Characters_Accounts");

                    b.HasIndex("BodyId")
                        .HasName("FK_Characters_Bodies");

                    b.HasIndex("ChargenId")
                        .HasName("FK_Characters_Chargens_idx");

                    b.HasIndex("CultureId")
                        .HasName("FK_Characters_Cultures");

                    b.HasIndex("CurrencyId")
                        .HasName("FK_Characters_Currencies");

                    b.HasIndex("CurrentAccentId")
                        .HasName("FK_Characters_Accents_idx");

                    b.HasIndex("CurrentLanguageId")
                        .HasName("FK_Characters_Languages_idx");

                    b.HasIndex("CurrentProjectId")
                        .HasName("FK_Characters_ActiveProjects_idx");

                    b.HasIndex("CurrentProjectLabourId")
                        .HasName("FK_Characters_ProjectLabourRequirements_idx");

                    b.HasIndex("CurrentScriptId")
                        .HasName("FK_Characters_Scripts_idx");

                    b.HasIndex("CurrentWritingLanguageId")
                        .HasName("FK_Characters_Languages_Written_idx");

                    b.HasIndex("Location")
                        .HasName("FK_Characters_Cells");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("MudSharp.Models.CharacterAccent", b =>
                {
                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("AccentId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Familiarity")
                        .HasColumnType("int(11)");

                    b.Property<ulong>("IsPreferred")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.HasKey("CharacterId", "AccentId")
                        .HasName("PRIMARY");

                    b.HasIndex("AccentId")
                        .HasName("FK_Characters_Accents_Accents_idx");

                    b.ToTable("Characters_Accents");
                });

            modelBuilder.Entity("MudSharp.Models.CharacterCombatSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("AttackCriticallyInjured")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<ulong>("AttackUnarmedOrHelpless")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<ulong>("AutomaticallyMoveTowardsTarget")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<double>("AuxillaryPercentage")
                        .HasColumnType("double");

                    b.Property<long?>("AvailabilityProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CharacterOwnerId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("ClassificationsAllowed")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<int>("DefaultPreferredDefenseType")
                        .HasColumnType("int(11)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<ulong>("FallbackToUnarmedIfNoWeapon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<long>("ForbiddenIntentions")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("GlobalTemplate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<int>("GrappleResponse")
                        .HasColumnType("int(11)");

                    b.Property<int>("InventoryManagement")
                        .HasColumnType("int(11)");

                    b.Property<double>("MagicUsePercentage")
                        .HasColumnType("double");

                    b.Property<ulong>("ManualPositionManagement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<string>("MeleeAttackOrderPreference")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("'0 1 2 3 4'")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<double>("MinimumStaminaToAttack")
                        .HasColumnType("double");

                    b.Property<ulong>("MoveToMeleeIfCannotEngageInRangedCombat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<int>("MovementManagement")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<double>("NaturalWeaponPercentage")
                        .HasColumnType("double");

                    b.Property<ulong>("PreferFavouriteWeapon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<ulong>("PreferNonContactClinchBreaking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<ulong>("PreferShieldUse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<ulong>("PreferToFightArmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<long>("PreferredIntentions")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("PreferredMeleeMode")
                        .HasColumnType("int(11)");

                    b.Property<int>("PreferredRangedMode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("PreferredWeaponSetup")
                        .HasColumnType("int(11)");

                    b.Property<double>("PsychicUsePercentage")
                        .HasColumnType("double");

                    b.Property<int>("PursuitMode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("RangedManagement")
                        .HasColumnType("int(11)");

                    b.Property<long>("RequiredIntentions")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("RequiredMinimumAim")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'0.5'");

                    b.Property<ulong>("SkirmishToOtherLocations")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<double>("WeaponUsePercentage")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilityProgId")
                        .HasName("FK_CharacterCombatSettings_FutureProgs_idx");

                    b.HasIndex("CharacterOwnerId")
                        .HasName("FK_CharacterCombatSettings_Characters_idx");

                    b.ToTable("CharacterCombatSettings");
                });

            modelBuilder.Entity("MudSharp.Models.CharacterIntroTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long>("AppliesToCharacterProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("Order")
                        .HasColumnType("int(11)");

                    b.Property<int>("ResolutionPriority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("Id");

                    b.HasIndex("AppliesToCharacterProgId")
                        .HasName("FK_CharacterIntroTemplates_FutureProgs_idx");

                    b.ToTable("CharacterIntroTemplates");
                });

            modelBuilder.Entity("MudSharp.Models.CharacterKnowledge", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("HowAcquired")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("KnowledgeId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("TimesTaught")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("WhenAcquired")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .HasName("FK_CHARACTERKNOWLEDGES_CHARACTERS");

                    b.HasIndex("KnowledgeId")
                        .HasName("FK_CHARACTERKNOWLEDGES_KNOWLEDGES_idx");

                    b.ToTable("CharacterKnowledges");
                });

            modelBuilder.Entity("MudSharp.Models.CharacterLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CellId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Command")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<ulong>("IsPlayerCharacter")
                        .HasColumnType("bit(1)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .HasName("FK_CharacterLog_Accounts_idx");

                    b.HasIndex("CellId")
                        .HasName("FK_CharacterLog_Cells_idx");

                    b.HasIndex("CharacterId")
                        .HasName("FK_CharacterLog_Characters_idx");

                    b.ToTable("CharacterLog");
                });

            modelBuilder.Entity("MudSharp.Models.Characteristic", b =>
                {
                    b.Property<long>("BodyId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Type")
                        .HasColumnType("int(11)");

                    b.Property<long>("CharacteristicId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("BodyId", "Type")
                        .HasName("PRIMARY");

                    b.HasIndex("CharacteristicId")
                        .HasName("FK_Characteristics_CharacteristicValues");

                    b.ToTable("Characteristics");
                });

            modelBuilder.Entity("MudSharp.Models.CharacteristicDefinition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<int?>("ChargenDisplayType")
                        .HasColumnType("int(11)");

                    b.Property<string>("Definition")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Model")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'standard'")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Pattern")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("Type")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId")
                        .HasName("FK_CharacteristicDefinitions_Parent");

                    b.ToTable("CharacteristicDefinitions");
                });

            modelBuilder.Entity("MudSharp.Models.CharacteristicProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("TargetDefinitionId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("TargetDefinitionId")
                        .HasName("FK_CharacteristicProfiles_CharacteristicDefinitions");

                    b.ToTable("CharacteristicProfiles");
                });

            modelBuilder.Entity("MudSharp.Models.CharacteristicValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("AdditionalValue")
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<ulong>("Default")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<long>("DefinitionId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("FutureProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("Pluralisation")
                        .HasColumnType("int(11)");

                    b.Property<string>("Value")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("DefinitionId")
                        .HasName("FK_CharacteristicValues_CharacteristicDefinitions");

                    b.HasIndex("FutureProgId")
                        .HasName("FK_CharacteristicValues_FutureProgs");

                    b.ToTable("CharacteristicValues");
                });

            modelBuilder.Entity("MudSharp.Models.CharactersChargenRoles", b =>
                {
                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ChargenRoleId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("CharacterId", "ChargenRoleId")
                        .HasName("PRIMARY");

                    b.HasIndex("ChargenRoleId")
                        .HasName("FK_Characters_ChargenRoles_ChargenRoles");

                    b.ToTable("Characters_ChargenRoles");
                });

            modelBuilder.Entity("MudSharp.Models.CharactersLanguages", b =>
                {
                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("CharacterId", "LanguageId")
                        .HasName("PRIMARY");

                    b.HasIndex("LanguageId")
                        .HasName("FK_Characters_Languages_Languages_idx");

                    b.ToTable("Characters_Languages");
                });

            modelBuilder.Entity("MudSharp.Models.CharactersMagicResources", b =>
                {
                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("MagicResourceId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.HasKey("CharacterId", "MagicResourceId")
                        .HasName("PRIMARY");

                    b.HasIndex("MagicResourceId")
                        .HasName("FK_Characters_MagicResources_MagicResources_idx");

                    b.ToTable("Characters_MagicResources");
                });

            modelBuilder.Entity("MudSharp.Models.CharactersScripts", b =>
                {
                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ScriptId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("CharacterId", "ScriptId")
                        .HasName("PRIMARY");

                    b.HasIndex("ScriptId")
                        .HasName("FK_Characters_Scripts_Scripts_idx");

                    b.ToTable("Characters_Scripts");
                });

            modelBuilder.Entity("MudSharp.Models.Chargen", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint(20)");

                    b.Property<DateTime?>("ApprovalTime")
                        .HasColumnType("datetime");

                    b.Property<long?>("ApprovedById")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int?>("MinimumApprovalAuthority")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(12000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("Status")
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("SubmitTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .HasName("FK_Chargens_Accounts");

                    b.ToTable("Chargens");
                });

            modelBuilder.Entity("MudSharp.Models.ChargenAdvice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("AdviceText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("AdviceTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("ChargenStage")
                        .HasColumnType("int(11)");

                    b.Property<long?>("ShouldShowAdviceProgId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("ShouldShowAdviceProgId")
                        .HasName("FK_ChargenAdvices_FutureProgs_idx");

                    b.ToTable("ChargenAdvices");
                });

            modelBuilder.Entity("MudSharp.Models.ChargenAdvicesChargenRoles", b =>
                {
                    b.Property<long>("ChargenAdviceId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ChargenRoleId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ChargenAdviceId", "ChargenRoleId")
                        .HasName("PRIMARY");

                    b.HasIndex("ChargenRoleId")
                        .HasName("FK_ChargenAdvices_ChargenRoles_ChargenRoles_idx");

                    b.ToTable("ChargenAdvices_ChargenRoles");
                });

            modelBuilder.Entity("MudSharp.Models.ChargenAdvicesCultures", b =>
                {
                    b.Property<long>("ChargenAdviceId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CultureId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ChargenAdviceId", "CultureId")
                        .HasName("PRIMARY");

                    b.HasIndex("CultureId")
                        .HasName("FK_ChargenAdvices_Cultures_Cultures_idx");

                    b.ToTable("ChargenAdvices_Cultures");
                });

            modelBuilder.Entity("MudSharp.Models.ChargenAdvicesEthnicities", b =>
                {
                    b.Property<long>("ChargenAdviceId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("EthnicityId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ChargenAdviceId", "EthnicityId")
                        .HasName("PRIMARY");

                    b.HasIndex("EthnicityId")
                        .HasName("FK_ChargenAdvices_Ethnicities_Ethnicities_idx");

                    b.ToTable("ChargenAdvices_Ethnicities");
                });

            modelBuilder.Entity("MudSharp.Models.ChargenAdvicesRaces", b =>
                {
                    b.Property<long>("ChargenAdviceId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("RaceId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ChargenAdviceId", "RaceId")
                        .HasName("PRIMARY");

                    b.HasIndex("RaceId")
                        .HasName("FK_ChargenAdvices_Races_Races_idx");

                    b.ToTable("ChargenAdvices_Races");
                });

            modelBuilder.Entity("MudSharp.Models.ChargenResource", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("MaximumNumberAwardedPerAward")
                        .HasColumnType("int(11)");

                    b.Property<string>("MaximumResourceFormula")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long?>("MaximumResourceId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("MinimumTimeBetweenAwards")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("PermissionLevelRequiredToAward")
                        .HasColumnType("int(11)");

                    b.Property<int>("PermissionLevelRequiredToCircumventMinimumTime")
                        .HasColumnType("int(11)");

                    b.Property<string>("PluralName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<ulong>("ShowToPlayerInScore")
                        .HasColumnType("bit(1)");

                    b.Property<string>("TextDisplayedToPlayerOnAward")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("TextDisplayedToPlayerOnDeduct")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("ChargenResources");
                });

            modelBuilder.Entity("MudSharp.Models.ChargenRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("AvailabilityProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("ChargenBlurb")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<ulong>("Expired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<int>("MaximumNumberAlive")
                        .HasColumnType("int(11)");

                    b.Property<int>("MaximumNumberTotal")
                        .HasColumnType("int(11)");

                    b.Property<int>("MinimumAuthorityToApprove")
                        .HasColumnType("int(11)");

                    b.Property<int>("MinimumAuthorityToView")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("PosterId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Type")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilityProgId")
                        .HasName("FK_ChargenRoles_FutureProgs");

                    b.HasIndex("PosterId")
                        .HasName("FK_ChargenRoles_Accounts");

                    b.ToTable("ChargenRoles");
                });

            modelBuilder.Entity("MudSharp.Models.ChargenRolesApprovers", b =>
                {
                    b.Property<long>("ChargenRoleId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ApproverId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ChargenRoleId", "ApproverId")
                        .HasName("PRIMARY");

                    b.HasIndex("ApproverId")
                        .HasName("FK_ChargenRoles_Approvers_Accounts");

                    b.ToTable("ChargenRoles_Approvers");
                });

            modelBuilder.Entity("MudSharp.Models.ChargenRolesClanMemberships", b =>
                {
                    b.Property<long>("ChargenRoleId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ClanId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("PaygradeId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("RankId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ChargenRoleId", "ClanId")
                        .HasName("PRIMARY");

                    b.HasIndex("ClanId")
                        .HasName("FK_ChargenRoles_ClanMemberships_Clans");

                    b.HasIndex("PaygradeId");

                    b.HasIndex("RankId");

                    b.ToTable("ChargenRoles_ClanMemberships");
                });

            modelBuilder.Entity("MudSharp.Models.ChargenRolesClanMembershipsAppointments", b =>
                {
                    b.Property<long>("ChargenRoleId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ClanId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("AppointmentId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ChargenRoleId", "ClanId", "AppointmentId")
                        .HasName("PRIMARY");

                    b.ToTable("ChargenRoles_ClanMemberships_Appointments");
                });

            modelBuilder.Entity("MudSharp.Models.ChargenRolesCost", b =>
                {
                    b.Property<long>("ChargenRoleId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ChargenResourceId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("RequirementOnly")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<int>("Amount")
                        .HasColumnType("int(11)");

                    b.HasKey("ChargenRoleId", "ChargenResourceId", "RequirementOnly")
                        .HasName("PRIMARY");

                    b.HasIndex("ChargenResourceId")
                        .HasName("FK_ChargenRoles_Costs_ChargenResources");

                    b.ToTable("ChargenRoles_Costs");
                });

            modelBuilder.Entity("MudSharp.Models.ChargenRolesCurrency", b =>
                {
                    b.Property<long>("ChargenRoleId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint(20)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,0)");

                    b.HasKey("ChargenRoleId", "CurrencyId")
                        .HasName("PRIMARY");

                    b.HasIndex("CurrencyId")
                        .HasName("FK_ChargenRoles_Currencies_Currencies");

                    b.ToTable("ChargenRoles_Currencies");
                });

            modelBuilder.Entity("MudSharp.Models.ChargenRolesMerit", b =>
                {
                    b.Property<long>("ChargenRoleId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("MeritId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ChargenRoleId", "MeritId")
                        .HasName("PRIMARY");

                    b.HasIndex("MeritId")
                        .HasName("FK_ChargenRoles_Merits_Merits_idx");

                    b.ToTable("ChargenRoles_Merits");
                });

            modelBuilder.Entity("MudSharp.Models.ChargenRolesTrait", b =>
                {
                    b.Property<long>("ChargenRoleId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("TraitId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<ulong>("GiveIfDoesntHave")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.HasKey("ChargenRoleId", "TraitId")
                        .HasName("PRIMARY");

                    b.HasIndex("TraitId")
                        .HasName("FK_ChargenRoles_Traits_Currencies");

                    b.ToTable("ChargenRoles_Traits");
                });

            modelBuilder.Entity("MudSharp.Models.ChargenScreenStoryboard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<int>("ChargenStage")
                        .HasColumnType("int(11)");

                    b.Property<string>("ChargenType")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("NextStage")
                        .HasColumnType("int(11)");

                    b.Property<int>("Order")
                        .HasColumnType("int(11)");

                    b.Property<string>("StageDefinition")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("ChargenScreenStoryboards");
                });

            modelBuilder.Entity("MudSharp.Models.ChargenScreenStoryboardDependentStage", b =>
                {
                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Dependency")
                        .HasColumnType("int(11)");

                    b.HasKey("OwnerId", "Dependency")
                        .HasName("PRIMARY");

                    b.HasIndex("OwnerId")
                        .HasName("FK_ChargenScreenStoryboardDependentStages_Owner");

                    b.ToTable("ChargenScreenStoryboardDependentStages");
                });

            modelBuilder.Entity("MudSharp.Models.Check", b =>
                {
                    b.Property<int>("Type")
                        .HasColumnType("int(11)");

                    b.Property<long>("CheckTemplateId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("MaximumDifficultyForImprovement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'10'");

                    b.Property<long>("TraitExpressionId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Type")
                        .HasName("PRIMARY");

                    b.HasIndex("CheckTemplateId")
                        .HasName("FK_Checks_CheckTemplates");

                    b.HasIndex("TraitExpressionId")
                        .HasName("FK_Checks_TraitExpression");

                    b.ToTable("Checks");
                });

            modelBuilder.Entity("MudSharp.Models.CheckTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("CanBranchIfTraitMissing")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<string>("CheckMethod")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(25)")
                        .HasDefaultValueSql("'Standard'")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Definition")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<short>("FailIfTraitMissingMode")
                        .HasColumnType("smallint(6)");

                    b.Property<ulong>("ImproveTraits")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("CheckTemplates");
                });

            modelBuilder.Entity("MudSharp.Models.CheckTemplateDifficulty", b =>
                {
                    b.Property<int>("Difficulty")
                        .HasColumnType("int(11)");

                    b.Property<long>("CheckTemplateId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("Modifier")
                        .HasColumnType("double");

                    b.HasKey("Difficulty", "CheckTemplateId")
                        .HasName("PRIMARY");

                    b.HasIndex("CheckTemplateId")
                        .HasName("FK_CheckTemplateDifficulties_CheckTemplates");

                    b.ToTable("CheckTemplateDifficulties");
                });

            modelBuilder.Entity("MudSharp.Models.Clan", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("CalendarId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("FullName")
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<ulong>("IsTemplate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<int?>("MaximumPeriodsOfUncollectedBackPay")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long?>("OnPayProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("ParentClanId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("PayIntervalModifier")
                        .HasColumnType("int(11)");

                    b.Property<int>("PayIntervalOther")
                        .HasColumnType("int(11)");

                    b.Property<string>("PayIntervalReferenceDate")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("PayIntervalReferenceTime")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("PayIntervalType")
                        .HasColumnType("int(11)");

                    b.Property<long?>("PaymasterId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("PaymasterItemProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("ShowClanMembersInWho")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId")
                        .HasName("FK_Clans_Calendars");

                    b.HasIndex("OnPayProgId")
                        .HasName("FK_Clans_FutureProgs_idx");

                    b.HasIndex("ParentClanId")
                        .HasName("FK_Clans_Parent");

                    b.HasIndex("PaymasterId")
                        .HasName("FK_Clans_Characters_idx");

                    b.ToTable("Clans");
                });

            modelBuilder.Entity("MudSharp.Models.ClanAdministrationCell", b =>
                {
                    b.Property<long>("ClanId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CellId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ClanId", "CellId")
                        .HasName("PRIMARY");

                    b.HasIndex("CellId")
                        .HasName("FK_Clans_AdministrationCells_Cells_idx");

                    b.ToTable("Clans_AdministrationCells");
                });

            modelBuilder.Entity("MudSharp.Models.ClanMembership", b =>
                {
                    b.Property<long>("ClanId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("ArchivedMembership")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValue(0ul);

                    b.Property<string>("JoinDate")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long?>("ManagerId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("PaygradeId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("PersonalName")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("RankId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ClanId", "CharacterId")
                        .HasName("PRIMARY");

                    b.HasIndex("CharacterId")
                        .HasName("FK_ClanMemberships_Characters");

                    b.HasIndex("ManagerId")
                        .HasName("FK_ClanMemberships_Manager");

                    b.ToTable("ClanMemberships");
                });

            modelBuilder.Entity("MudSharp.Models.ClanMembershipBackpay", b =>
                {
                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ClanId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("CurrencyId", "ClanId", "CharacterId")
                        .HasName("PRIMARY");

                    b.HasIndex("ClanId", "CharacterId")
                        .HasName("FK_ClanMemberships_Backpay_ClanMemberships");

                    b.ToTable("ClanMemberships_Backpay");
                });

            modelBuilder.Entity("MudSharp.Models.ClanMembershipsAppointments", b =>
                {
                    b.Property<long>("ClanId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("AppointmentId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ClanId", "CharacterId", "AppointmentId")
                        .HasName("PRIMARY");

                    b.HasIndex("AppointmentId")
                        .HasName("FK_ClanMemberships_Appointments_Appointments");

                    b.ToTable("ClanMemberships_Appointments");
                });

            modelBuilder.Entity("MudSharp.Models.ClanTreasuryCell", b =>
                {
                    b.Property<long>("ClanId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CellId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ClanId", "CellId")
                        .HasName("PRIMARY");

                    b.HasIndex("CellId")
                        .HasName("FK_Clans_TreasuryCells_Cells_idx");

                    b.ToTable("Clans_TreasuryCells");
                });

            modelBuilder.Entity("MudSharp.Models.ClimateModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("MinimumMinutesBetweenFlavourEchoes")
                        .HasColumnType("int(11)");

                    b.Property<double>("MinuteFlavourEchoChance")
                        .HasColumnType("double");

                    b.Property<int>("MinuteProcessingInterval")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("ClimateModels");
                });

            modelBuilder.Entity("MudSharp.Models.Clock", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("Hours")
                        .HasColumnType("int(11)");

                    b.Property<int>("Minutes")
                        .HasColumnType("int(11)");

                    b.Property<long>("PrimaryTimezoneId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Seconds")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.ToTable("Clocks");
                });

            modelBuilder.Entity("MudSharp.Models.Coin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("FullDescription")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("GeneralForm")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("PluralWord")
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,0)");

                    b.Property<double>("Weight")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId")
                        .HasName("FK_Coins_Currencies");

                    b.ToTable("Coins");
                });

            modelBuilder.Entity("MudSharp.Models.Colour", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Basic")
                        .HasColumnType("int(11)");

                    b.Property<int>("Blue")
                        .HasColumnType("int(11)");

                    b.Property<string>("Fancy")
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("Green")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("Red")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.ToTable("Colours");
                });

            modelBuilder.Entity("MudSharp.Models.CombatMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<double>("Chance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("FailureMessage")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<int?>("Outcome")
                        .HasColumnType("int(11)");

                    b.Property<int>("Priority")
                        .HasColumnType("int(11)");

                    b.Property<long?>("ProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Type")
                        .HasColumnType("int(11)");

                    b.Property<int?>("Verb")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("ProgId")
                        .HasName("FK_CombatMessages_FutureProgs_idx");

                    b.ToTable("CombatMessages");
                });

            modelBuilder.Entity("MudSharp.Models.CombatMessagesWeaponAttacks", b =>
                {
                    b.Property<long>("CombatMessageId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("WeaponAttackId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("CombatMessageId", "WeaponAttackId")
                        .HasName("PRIMARY");

                    b.HasIndex("WeaponAttackId")
                        .HasName("FK_CombatMessages_WeaponAttacks_WeaponAttacks_idx");

                    b.ToTable("CombatMessages_WeaponAttacks");
                });

            modelBuilder.Entity("MudSharp.Models.CorpseModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Definition")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.HasKey("Id");

                    b.ToTable("CorpseModels");
                });

            modelBuilder.Entity("MudSharp.Models.Craft", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("RevisionNumber")
                        .HasColumnType("int(11)");

                    b.Property<string>("ActionDescription")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("ActiveCraftItemSdesc")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnName("ActiveCraftItemSDesc")
                        .HasColumnType("varchar(200)")
                        .HasDefaultValueSql("'a craft in progress'")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long?>("AppearInCraftsListProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Blurb")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long?>("CanUseProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("CheckDifficulty")
                        .HasColumnType("int(11)");

                    b.Property<double>("CheckQualityWeighting")
                        .HasColumnType("double");

                    b.Property<long?>("CheckTraitId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("EditableItemId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("FailPhase")
                        .HasColumnType("int(11)");

                    b.Property<int>("FailThreshold")
                        .HasColumnType("int(11)");

                    b.Property<int>("FreeSkillChecks")
                        .HasColumnType("int(11)");

                    b.Property<double>("InputQualityWeighting")
                        .HasColumnType("double");

                    b.Property<ulong>("Interruptable")
                        .HasColumnType("bit(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long?>("OnUseProgCancelId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("OnUseProgCompleteId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("OnUseProgStartId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("QualityFormula")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<double>("ToolQualityWeighting")
                        .HasColumnType("double");

                    b.Property<long?>("WhyCannotUseProgId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id", "RevisionNumber")
                        .HasName("PRIMARY");

                    b.HasIndex("AppearInCraftsListProgId")
                        .HasName("FK_Crafts_FutureProgs_AppearInCraftsListProg_idx");

                    b.HasIndex("CanUseProgId")
                        .HasName("FK_Crafts_FutureProgs_CanUseProg_idx");

                    b.HasIndex("CheckTraitId")
                        .HasName("FK_Crafts_TraitDefinitions_idx");

                    b.HasIndex("EditableItemId")
                        .HasName("FK_Crafts_EditableItems_idx");

                    b.HasIndex("OnUseProgCancelId")
                        .HasName("FK_Crafts_FutureProgs_OnUseProgCancel_idx");

                    b.HasIndex("OnUseProgCompleteId")
                        .HasName("FK_Crafts_FutureProgs_OnUseProgComplete_idx");

                    b.HasIndex("OnUseProgStartId")
                        .HasName("FK_Crafts_FutureProgs_OnUseProgStart_idx");

                    b.HasIndex("WhyCannotUseProgId")
                        .HasName("FK_Crafts_FutureProgs_WhyCannotUseProg_idx");

                    b.ToTable("Crafts");
                });

            modelBuilder.Entity("MudSharp.Models.CraftInput", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CraftId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("CraftRevisionNumber")
                        .HasColumnType("int(11)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<double>("InputQualityWeight")
                        .HasColumnType("double");

                    b.Property<string>("InputType")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<DateTime>("OriginalAdditionTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CraftId", "CraftRevisionNumber")
                        .HasName("FK_CraftInputs_Crafts_idx");

                    b.ToTable("CraftInputs");
                });

            modelBuilder.Entity("MudSharp.Models.CraftPhase", b =>
                {
                    b.Property<long>("CraftPhaseId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("CraftPhaseRevisionNumber")
                        .HasColumnType("int(11)");

                    b.Property<int>("PhaseNumber")
                        .HasColumnType("int(11)");

                    b.Property<string>("Echo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("FailEcho")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<double>("PhaseLengthInSeconds")
                        .HasColumnType("double");

                    b.HasKey("CraftPhaseId", "CraftPhaseRevisionNumber", "PhaseNumber")
                        .HasName("PRIMARY");

                    b.ToTable("CraftPhases");
                });

            modelBuilder.Entity("MudSharp.Models.CraftProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CraftId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("CraftRevisionNumber")
                        .HasColumnType("int(11)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<ulong>("IsFailProduct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<int?>("MaterialDefiningInputIndex")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("OriginalAdditionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("CraftId", "CraftRevisionNumber")
                        .HasName("FK_CraftProducts_Crafts_idx");

                    b.ToTable("CraftProducts");
                });

            modelBuilder.Entity("MudSharp.Models.CraftTool", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CraftId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("CraftRevisionNumber")
                        .HasColumnType("int(11)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("DesiredState")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("OriginalAdditionTime")
                        .HasColumnType("datetime");

                    b.Property<double>("ToolQualityWeight")
                        .HasColumnType("double");

                    b.Property<string>("ToolType")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("CraftId", "CraftRevisionNumber")
                        .HasName("FK_CraftTools_Crafts_idx");

                    b.ToTable("CraftTools");
                });

            modelBuilder.Entity("MudSharp.Models.Crime", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("AccuserId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("BailHasBeenPosted")
                        .HasColumnType("bit(1)");

                    b.Property<ulong>("ConvictionRecorded")
                        .HasColumnType("bit(1)");

                    b.Property<string>("CriminalCharacteristics")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("CriminalFullDescription")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("CriminalId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("CriminalShortDescription")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<ulong>("IsCriminalIdentityKnown")
                        .HasColumnType("bit(1)");

                    b.Property<ulong>("IsFinalised")
                        .HasColumnType("bit(1)");

                    b.Property<ulong>("IsKnownCrime")
                        .HasColumnType("bit(1)");

                    b.Property<ulong>("IsStaleCrime")
                        .HasColumnType("bit(1)");

                    b.Property<long>("LawId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint(20)");

                    b.Property<DateTime>("RealTimeOfCrime")
                        .HasColumnType("datetime");

                    b.Property<string>("ThirdPartyIItemType")
                        .HasColumnType("varchar(100)");

                    b.Property<long?>("ThirdPartyId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("TimeOfCrime")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("TimeOfReport")
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long?>("VictimId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("AccuserId")
                        .HasName("FK_Crimes_Accuser_idx");

                    b.HasIndex("CriminalId")
                        .HasName("FK_Crimes_Criminal_idx");

                    b.HasIndex("LawId")
                        .HasName("FK_Crimes_Laws_idx");

                    b.HasIndex("LocationId")
                        .HasName("FK_Crimes_Location_idx");

                    b.HasIndex("VictimId")
                        .HasName("FK_Crimes_Victim_idx");

                    b.ToTable("Crimes");
                });

            modelBuilder.Entity("MudSharp.Models.Culture", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("AvailabilityProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("NameCultureId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("PersonWordFemale")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("PersonWordIndeterminate")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("PersonWordMale")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("PersonWordNeuter")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("PrimaryCalendarId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("SkillStartingValueProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("TolerableTemperatureCeilingEffect")
                        .HasColumnType("double");

                    b.Property<double>("TolerableTemperatureFloorEffect")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilityProgId")
                        .HasName("FK_Cultures_AvailabilityProg");

                    b.HasIndex("NameCultureId")
                        .HasName("FK_Cultures_NameCulture");

                    b.HasIndex("SkillStartingValueProgId")
                        .HasName("FK_Cultures_SkillStartingProg");

                    b.ToTable("Cultures");
                });

            modelBuilder.Entity("MudSharp.Models.CultureInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("Order")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.ToTable("CultureInfos");
                });

            modelBuilder.Entity("MudSharp.Models.CulturesChargenResources", b =>
                {
                    b.Property<long>("CultureId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ChargenResourceId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("RequirementOnly")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<int>("Amount")
                        .HasColumnType("int(11)");

                    b.HasKey("CultureId", "ChargenResourceId", "RequirementOnly")
                        .HasName("PRIMARY");

                    b.HasIndex("ChargenResourceId")
                        .HasName("FK_Cultures_ChargenResources_ChargenResources");

                    b.ToTable("Cultures_ChargenResources");
                });

            modelBuilder.Entity("MudSharp.Models.Currency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("MudSharp.Models.CurrencyDescriptionPattern", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("FutureProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("NegativePrefix")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("Order")
                        .HasColumnType("int(11)");

                    b.Property<int>("Type")
                        .HasColumnType("int(11)");

                    b.Property<ulong>("UseNaturalAggregationStyle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValue(0ul);

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId")
                        .HasName("FK_CurrencyDescriptionPatterns_Currencies");

                    b.HasIndex("FutureProgId")
                        .HasName("FK_CurrencyDescriptionPatterns_FutureProgs");

                    b.ToTable("CurrencyDescriptionPatterns");
                });

            modelBuilder.Entity("MudSharp.Models.CurrencyDescriptionPatternElement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("AlternatePattern")
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("CurrencyDescriptionPatternId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CurrencyDivisionId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Order")
                        .HasColumnType("int(11)");

                    b.Property<string>("Pattern")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("PluraliseWord")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("RoundingMode")
                        .HasColumnType("int(11)");

                    b.Property<ulong>("ShowIfZero")
                        .HasColumnType("bit(1)");

                    b.Property<ulong>("SpecialValuesOverrideFormat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyDescriptionPatternId")
                        .HasName("FK_CDPE_CurrencyDescriptionPatterns");

                    b.HasIndex("CurrencyDivisionId")
                        .HasName("FK_CDPE_CurrencyDivisions");

                    b.ToTable("CurrencyDescriptionPatternElements");
                });

            modelBuilder.Entity("MudSharp.Models.CurrencyDescriptionPatternElementSpecialValues", b =>
                {
                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(18,0)");

                    b.Property<long>("CurrencyDescriptionPatternElementId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Value", "CurrencyDescriptionPatternElementId")
                        .HasName("PRIMARY");

                    b.HasIndex("CurrencyDescriptionPatternElementId")
                        .HasName("FK_CDPESV_CDPE");

                    b.ToTable("CurrencyDescriptionPatternElementSpecialValues");
                });

            modelBuilder.Entity("MudSharp.Models.CurrencyDivision", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<decimal>("BaseUnitConversionRate")
                        .HasColumnType("decimal(18,4)");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId")
                        .HasName("FK_CurrencyDivisions_Currencies");

                    b.ToTable("CurrencyDivisions");
                });

            modelBuilder.Entity("MudSharp.Models.CurrencyDivisionAbbreviation", b =>
                {
                    b.Property<string>("Pattern")
                        .HasColumnType("varchar(150)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("CurrencyDivisionId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Pattern", "CurrencyDivisionId")
                        .HasName("PRIMARY");

                    b.HasIndex("CurrencyDivisionId")
                        .HasName("FK_CurrencyDivisionAbbreviations_CurrencyDivisions");

                    b.ToTable("CurrencyDivisionAbbreviations");
                });

            modelBuilder.Entity("MudSharp.Models.DamagePatterns", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Bonus")
                        .HasColumnType("int(11)");

                    b.Property<int>("DamageType")
                        .HasColumnType("int(11)");

                    b.Property<int>("Dice")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("Sides")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.ToTable("DamagePatterns");
                });

            modelBuilder.Entity("MudSharp.Models.DefaultHook", b =>
                {
                    b.Property<long>("HookId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("PerceivableType")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<long>("FutureProgId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("HookId", "PerceivableType", "FutureProgId")
                        .HasName("PRIMARY");

                    b.HasIndex("FutureProgId")
                        .HasName("FK_DefaultHooks_Futureprogs_idx");

                    b.ToTable("DefaultHooks");
                });

            modelBuilder.Entity("MudSharp.Models.DisfigurementTemplate", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("RevisionNumber")
                        .HasColumnType("int(11)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("EditableItemId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("FullDescription")
                        .IsRequired()
                        .HasColumnType("varchar(5000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id", "RevisionNumber")
                        .HasName("PRIMARY");

                    b.HasIndex("EditableItemId")
                        .HasName("FK_DisfigurementTemplates_EditableItems_idx");

                    b.ToTable("DisfigurementTemplates");
                });

            modelBuilder.Entity("MudSharp.Models.Door", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("IsOpen")
                        .HasColumnType("bit(1)");

                    b.Property<long?>("LockedWith")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("Style")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("LockedWith")
                        .HasName("FK_Doors_Locks");

                    b.ToTable("Doors");
                });

            modelBuilder.Entity("MudSharp.Models.Drawing", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("DrawingSize")
                        .HasColumnType("int(11)");

                    b.Property<double>("DrawingSkill")
                        .HasColumnType("double");

                    b.Property<string>("FullDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("ImplementType")
                        .HasColumnType("int(11)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId")
                        .HasName("FK_Drawings_Characters_idx");

                    b.ToTable("Drawings");
                });

            modelBuilder.Entity("MudSharp.Models.Dream", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CanDreamProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<long?>("OnDreamProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("OnWakeDuringDreamingProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("OnlyOnce")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'100'");

                    b.HasKey("Id");

                    b.HasIndex("CanDreamProgId")
                        .HasName("FK_Dreams_FutureProgs_CanDream_idx");

                    b.HasIndex("OnDreamProgId")
                        .HasName("FK_Dreams_FutureProgs_OnDream_idx");

                    b.HasIndex("OnWakeDuringDreamingProgId")
                        .HasName("FK_Dreams_FutureProgs_OnWake_idx");

                    b.ToTable("Dreams");
                });

            modelBuilder.Entity("MudSharp.Models.DreamPhase", b =>
                {
                    b.Property<long>("DreamId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("PhaseId")
                        .HasColumnType("int(11)");

                    b.Property<string>("DreamerCommand")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<string>("DreamerText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<int>("WaitSeconds")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'30'");

                    b.HasKey("DreamId", "PhaseId")
                        .HasName("PRIMARY");

                    b.ToTable("Dream_Phases");
                });

            modelBuilder.Entity("MudSharp.Models.DreamsAlreadyDreamt", b =>
                {
                    b.Property<long>("DreamId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("DreamId", "CharacterId")
                        .HasName("PRIMARY");

                    b.HasIndex("CharacterId")
                        .HasName("FK_Dreams_Dreamt_Characters_idx");

                    b.ToTable("Dreams_Already_Dreamt");
                });

            modelBuilder.Entity("MudSharp.Models.DreamsCharacters", b =>
                {
                    b.Property<long>("DreamId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("DreamId", "CharacterId")
                        .HasName("PRIMARY");

                    b.HasIndex("CharacterId")
                        .HasName("FK_Dreams_Characters_Characters_idx");

                    b.ToTable("Dreams_Characters");
                });

            modelBuilder.Entity("MudSharp.Models.Drug", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<int>("DrugTypes")
                        .HasColumnType("int(11)");

                    b.Property<int>("DrugVectors")
                        .HasColumnType("int(11)");

                    b.Property<double>("IntensityPerGram")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<double>("RelativeMetabolisationRate")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("Drugs");
                });

            modelBuilder.Entity("MudSharp.Models.DrugIntensity", b =>
                {
                    b.Property<long>("DrugId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<int>("DrugType")
                        .HasColumnType("int(11)");

                    b.Property<string>("AdditionalEffects")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<double>("RelativeIntensity")
                        .HasColumnType("double");

                    b.HasKey("DrugId", "DrugType")
                        .HasName("PRIMARY");

                    b.ToTable("DrugsIntensities");
                });

            modelBuilder.Entity("MudSharp.Models.Dub", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("IntroducedName")
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Keywords")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("LastDescription")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("TargetType")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .HasName("FK_Dubs_Characters");

                    b.ToTable("Dubs");
                });

            modelBuilder.Entity("MudSharp.Models.EconomicZone", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CurrentFinancialPeriodId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("IntervalAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("IntervalModifier")
                        .HasColumnType("int(11)");

                    b.Property<int>("IntervalType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'2'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<decimal>("OutstandingTaxesOwed")
                        .HasColumnType("decimal(10,0)");

                    b.Property<ulong>("PermitTaxableLosses")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<int>("PreviousFinancialPeriodsToKeep")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'50'");

                    b.Property<long?>("ReferenceCalendarId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ReferenceClockId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("ReferenceTime")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<decimal>("TotalRevenueHeld")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(10,0)")
                        .HasDefaultValueSql("0");

                    b.Property<long>("ZoneForTimePurposesId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId")
                        .HasName("FK_EconomicZones_Currencies_idx");

                    b.HasIndex("CurrentFinancialPeriodId")
                        .HasName("FK_EconomicZones_FinancialPeriods_idx");

                    b.HasIndex("ReferenceCalendarId")
                        .HasName("FK_EconomicZones_Calendars_idx");

                    b.HasIndex("ReferenceClockId")
                        .HasName("FK_EconomicZones_Timezones_idx");

                    b.ToTable("EconomicZones");
                });

            modelBuilder.Entity("MudSharp.Models.EconomicZoneRevenue", b =>
                {
                    b.Property<long>("EconomicZoneId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("FinancialPeriodId")
                        .HasColumnType("bigint(20)");

                    b.Property<decimal>("TotalTaxRevenue")
                        .HasColumnType("decimal(10,0)");

                    b.HasKey("EconomicZoneId", "FinancialPeriodId")
                        .HasName("PRIMARY");

                    b.HasIndex("FinancialPeriodId")
                        .HasName("FK_EconomicZoneRevenues_FinancialPeriods_idx");

                    b.ToTable("EconomicZoneRevenues");
                });

            modelBuilder.Entity("MudSharp.Models.EconomicZoneShopTax", b =>
                {
                    b.Property<long>("EconomicZoneId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ShopId")
                        .HasColumnType("bigint(20)");

                    b.Property<decimal>("OutstandingProfitTaxes")
                        .HasColumnType("decimal(10,0)");

                    b.Property<decimal>("OutstandingSalesTaxes")
                        .HasColumnType("decimal(10,0)");

                    b.Property<decimal>("TaxesInCredits")
                        .HasColumnType("decimal(10,0)");

                    b.HasKey("EconomicZoneId", "ShopId")
                        .HasName("PRIMARY");

                    b.HasIndex("ShopId")
                        .HasName("FK_EconomicZoneShopTaxes_Shops_idx");

                    b.ToTable("EconomicZoneShopTaxes");
                });

            modelBuilder.Entity("MudSharp.Models.EconomicZoneTax", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Definition")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("EconomicZoneId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("MerchandiseFilterProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("MerchantDescription")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("TaxType")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("EconomicZoneId")
                        .HasName("FK_EconomicZoneTaxes_EconomicZones_idx");

                    b.HasIndex("MerchandiseFilterProgId")
                        .HasName("FK_EconomicZoneTaxes_FutureProgs_idx");

                    b.ToTable("EconomicZoneTaxes");
                });

            modelBuilder.Entity("MudSharp.Models.EditableItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long>("BuilderAccountId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("BuilderComment")
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<DateTime>("BuilderDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ObsoleteDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("ReviewerAccountId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("ReviewerComment")
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<DateTime?>("ReviewerDate")
                        .HasColumnType("datetime");

                    b.Property<int>("RevisionNumber")
                        .HasColumnType("int(11)");

                    b.Property<int>("RevisionStatus")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.ToTable("EditableItems");
                });

            modelBuilder.Entity("MudSharp.Models.Election", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long>("AppointmentId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("ElectionStage")
                        .HasColumnType("int(11)");

                    b.Property<ulong>("IsByElection")
                        .HasColumnType("bit(1)");

                    b.Property<ulong>("IsFinalised")
                        .HasColumnType("bit(1)");

                    b.Property<string>("NominationStartDate")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("NumberOfAppointments")
                        .HasColumnType("int(11)");

                    b.Property<string>("ResultsInEffectDate")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("VotingEndDate")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("VotingStartDate")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .HasName("FK_Elections_Appointments_idx");

                    b.ToTable("Elections");
                });

            modelBuilder.Entity("MudSharp.Models.ElectionNominee", b =>
                {
                    b.Property<long>("ElectionId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("NomineeId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("NomineeClanId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ElectionId", "NomineeId")
                        .HasName("PRIMARY");

                    b.HasIndex("ElectionId")
                        .HasName("FK_ElectionsNominees_Elections_idx");

                    b.HasIndex("NomineeClanId", "NomineeId")
                        .HasName("FK_ElectionsNominees_ClanMemberships_idx");

                    b.ToTable("ElectionsNominees");
                });

            modelBuilder.Entity("MudSharp.Models.ElectionVote", b =>
                {
                    b.Property<long>("ElectionId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("NomineeId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("VoterId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("NomineeClanId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("NumberOfVotes")
                        .HasColumnType("int(11)");

                    b.Property<long>("VoterClanId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ElectionId", "NomineeId", "VoterId")
                        .HasName("PRIMARY");

                    b.HasIndex("ElectionId")
                        .HasName("FK_ElectionsVotes_Elections_idx");

                    b.HasIndex("NomineeClanId", "NomineeId")
                        .HasName("FK_ElectionsVotes_Nominees_idx");

                    b.HasIndex("VoterClanId", "VoterId")
                        .HasName("FK_ElectionsVotes_Voters_idx");

                    b.ToTable("ElectionsVotes");
                });

            modelBuilder.Entity("MudSharp.Models.EmailTemplate", b =>
                {
                    b.Property<int>("TemplateType")
                        .HasColumnType("int(11)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("ReturnAddress")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("TemplateType")
                        .HasName("PRIMARY");

                    b.ToTable("EmailTemplates");
                });

            modelBuilder.Entity("MudSharp.Models.EnforcementAuthoritiesAccusableClasses", b =>
                {
                    b.Property<long>("EnforcementAuthorityId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("LegalClassId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("EnforcementAuthorityId", "LegalClassId")
                        .HasName("PRIMARY");

                    b.HasIndex("LegalClassId")
                        .HasName("FK_EnforcementAuthorities_AccusableClasses_LegalClasses_idx");

                    b.ToTable("EnforcementAuthorities_AccusableClasses");
                });

            modelBuilder.Entity("MudSharp.Models.EnforcementAuthoritiesArrestableClasses", b =>
                {
                    b.Property<long>("EnforcementAuthorityId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("LegalClassId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("EnforcementAuthorityId")
                        .HasName("PRIMARY");

                    b.HasIndex("LegalClassId")
                        .HasName("FK_EnforcementAuthorities_ArrestableClasses_LegalClasses_idx");

                    b.ToTable("EnforcementAuthorities_ArrestableClasses");
                });

            modelBuilder.Entity("MudSharp.Models.EnforcementAuthority", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("CanAccuse")
                        .HasColumnType("bit(1)");

                    b.Property<ulong>("CanConvict")
                        .HasColumnType("bit(1)");

                    b.Property<ulong>("CanForgive")
                        .HasColumnType("bit(1)");

                    b.Property<long?>("FilterProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("LegalAuthorityId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("Priority")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("FilterProgId")
                        .HasName("FK_EnforcementAuthorities_FutureProgs_idx");

                    b.HasIndex("LegalAuthorityId")
                        .HasName("FK_EnforcementAuthorities_LegalAuthorities_idx");

                    b.ToTable("EnforcementAuthorities");
                });

            modelBuilder.Entity("MudSharp.Models.EnforcementAuthorityParentAuthority", b =>
                {
                    b.Property<long>("ParentId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ChildId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ParentId", "ChildId")
                        .HasName("PRIMARY");

                    b.HasIndex("ChildId")
                        .HasName("FK_EnforcementAuthorities_ParentAuthorities_Child_idx");

                    b.ToTable("EnforcementAuthorities_ParentAuthorities");
                });

            modelBuilder.Entity("MudSharp.Models.EntityDescriptionPattern", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("ApplicabilityProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Pattern")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("RelativeWeight")
                        .HasColumnType("int(11)");

                    b.Property<int>("Type")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicabilityProgId")
                        .HasName("FK_EntityDescriptionPatterns_FutureProgs");

                    b.ToTable("EntityDescriptionPatterns");
                });

            modelBuilder.Entity("MudSharp.Models.EntityDescriptionPatternsEntityDescriptions", b =>
                {
                    b.Property<long>("PatternId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("EntityDescriptionId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("PatternId", "EntityDescriptionId")
                        .HasName("PRIMARY");

                    b.HasIndex("EntityDescriptionId")
                        .HasName("FK_EDP_EntityDescriptions_EntityDescriptions");

                    b.ToTable("EntityDescriptionPatterns_EntityDescriptions");
                });

            modelBuilder.Entity("MudSharp.Models.EntityDescriptions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<short>("DisplaySex")
                        .HasColumnType("smallint(6)");

                    b.Property<string>("FullDescription")
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("EntityDescriptions");
                });

            modelBuilder.Entity("MudSharp.Models.EthnicitiesCharacteristics", b =>
                {
                    b.Property<long>("EthnicityId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CharacteristicDefinitionId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CharacteristicProfileId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("EthnicityId", "CharacteristicDefinitionId", "CharacteristicProfileId")
                        .HasName("PRIMARY");

                    b.HasIndex("CharacteristicDefinitionId")
                        .HasName("FK_Ethnicities_Characteristics_CharacteristicDefinitions");

                    b.HasIndex("CharacteristicProfileId")
                        .HasName("FK_Ethnicities_Characteristics_CharacteristicProfiles");

                    b.ToTable("Ethnicities_Characteristics");
                });

            modelBuilder.Entity("MudSharp.Models.EthnicitiesChargenResources", b =>
                {
                    b.Property<long>("EthnicityId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ChargenResourceId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("RequirementOnly")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<int>("Amount")
                        .HasColumnType("int(11)");

                    b.HasKey("EthnicityId", "ChargenResourceId", "RequirementOnly")
                        .HasName("PRIMARY");

                    b.HasIndex("ChargenResourceId")
                        .HasName("FK_Ethnicities_ChargenResources_ChargenResources");

                    b.ToTable("Ethnicities_ChargenResources");
                });

            modelBuilder.Entity("MudSharp.Models.Ethnicity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("AvailabilityProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("ChargenBlurb")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("EthnicGroup")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("EthnicSubgroup")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long?>("ParentRaceId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("PopulationBloodModelId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("TolerableTemperatureCeilingEffect")
                        .HasColumnType("double");

                    b.Property<double>("TolerableTemperatureFloorEffect")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilityProgId")
                        .HasName("FK_Ethnicities_AvailabilityProg");

                    b.HasIndex("ParentRaceId")
                        .HasName("FK_Ethnicities_Races_idx");

                    b.HasIndex("PopulationBloodModelId")
                        .HasName("FK_Ethnicities_PopulationBloodModels_idx");

                    b.ToTable("Ethnicities");
                });

            modelBuilder.Entity("MudSharp.Models.Exit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("AcceptsDoor")
                        .HasColumnType("bit(1)");

                    b.Property<string>("BlockedLayers")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("''")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("CellId1")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CellId2")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("ClimbDifficulty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'5'");

                    b.Property<int>("Direction1")
                        .HasColumnType("int(11)");

                    b.Property<int>("Direction2")
                        .HasColumnType("int(11)");

                    b.Property<long?>("DoorId")
                        .HasColumnType("bigint(20)");

                    b.Property<int?>("DoorSize")
                        .HasColumnType("int(11)");

                    b.Property<long?>("FallCell")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("InboundDescription1")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("InboundDescription2")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("InboundTarget1")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("InboundTarget2")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<ulong>("IsClimbExit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<string>("Keywords1")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Keywords2")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("MaximumSizeToEnter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'12'");

                    b.Property<int>("MaximumSizeToEnterUpright")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'12'");

                    b.Property<string>("OutboundDescription1")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("OutboundDescription2")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("OutboundTarget1")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("OutboundTarget2")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("PrimaryKeyword1")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("PrimaryKeyword2")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<double>("TimeMultiplier")
                        .HasColumnType("double");

                    b.Property<string>("Verb1")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Verb2")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("Exits");
                });

            modelBuilder.Entity("MudSharp.Models.ExternalClanControl", b =>
                {
                    b.Property<long>("VassalClanId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("LiegeClanId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ControlledAppointmentId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("ControllingAppointmentId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("NumberOfAppointments")
                        .HasColumnType("int(11)");

                    b.HasKey("VassalClanId", "LiegeClanId", "ControlledAppointmentId")
                        .HasName("PRIMARY");

                    b.HasIndex("ControlledAppointmentId")
                        .HasName("FK_ECC_Appointments_Controlled");

                    b.HasIndex("ControllingAppointmentId")
                        .HasName("FK_ECC_Appointments_Controlling");

                    b.HasIndex("LiegeClanId")
                        .HasName("FK_ECC_Clans_Liege");

                    b.ToTable("ExternalClanControls");
                });

            modelBuilder.Entity("MudSharp.Models.ExternalClanControlsAppointment", b =>
                {
                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("VassalClanId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("LiegeClanId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ControlledAppointmentId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("CharacterId", "VassalClanId", "LiegeClanId", "ControlledAppointmentId")
                        .HasName("PRIMARY");

                    b.HasIndex("VassalClanId", "CharacterId")
                        .HasName("FK_ECC_Appointments_ClanMemberships");

                    b.HasIndex("VassalClanId", "LiegeClanId", "ControlledAppointmentId")
                        .HasName("FK_ECC_Appointments_ExternalClanControls");

                    b.ToTable("ExternalClanControls_Appointments");
                });

            modelBuilder.Entity("MudSharp.Models.FinancialPeriod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long>("EconomicZoneId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("MudPeriodEnd")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("MudPeriodStart")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<DateTime>("PeriodEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("PeriodStart")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("EconomicZoneId")
                        .HasName("FK_FinancialPeriods_EconomicZones_idx");

                    b.ToTable("FinancialPeriods");
                });

            modelBuilder.Entity("MudSharp.Models.Foragable", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("RevisionNumber")
                        .HasColumnType("int(11)");

                    b.Property<long?>("CanForageProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("EditableItemId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("ForagableTypes")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<int>("ForageDifficulty")
                        .HasColumnType("int(11)");

                    b.Property<long>("ItemProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("MaximumOutcome")
                        .HasColumnType("int(11)");

                    b.Property<int>("MinimumOutcome")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<long?>("OnForageProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("QuantityDiceExpression")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<int>("RelativeChance")
                        .HasColumnType("int(11)");

                    b.HasKey("Id", "RevisionNumber")
                        .HasName("PRIMARY");

                    b.HasIndex("EditableItemId")
                        .HasName("FK_Foragables_EditableItems");

                    b.ToTable("Foragables");
                });

            modelBuilder.Entity("MudSharp.Models.ForagableProfile", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("RevisionNumber")
                        .HasColumnType("int(11)");

                    b.Property<long>("EditableItemId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.HasKey("Id", "RevisionNumber")
                        .HasName("PRIMARY");

                    b.HasIndex("EditableItemId")
                        .HasName("FK_ForagableProfiles_EditableItems_idx");

                    b.ToTable("ForagableProfiles");
                });

            modelBuilder.Entity("MudSharp.Models.ForagableProfilesForagables", b =>
                {
                    b.Property<long>("ForagableProfileId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("ForagableProfileRevisionNumber")
                        .HasColumnType("int(11)");

                    b.Property<long>("ForagableId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ForagableProfileId", "ForagableProfileRevisionNumber", "ForagableId")
                        .HasName("PRIMARY");

                    b.ToTable("ForagableProfiles_Foragables");
                });

            modelBuilder.Entity("MudSharp.Models.ForagableProfilesHourlyYieldGains", b =>
                {
                    b.Property<long>("ForagableProfileId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("ForagableProfileRevisionNumber")
                        .HasColumnType("int(11)");

                    b.Property<string>("ForageType")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<double>("Yield")
                        .HasColumnType("double");

                    b.HasKey("ForagableProfileId", "ForagableProfileRevisionNumber", "ForageType")
                        .HasName("PRIMARY");

                    b.ToTable("ForagableProfiles_HourlyYieldGains");
                });

            modelBuilder.Entity("MudSharp.Models.ForagableProfilesMaximumYields", b =>
                {
                    b.Property<long>("ForagableProfileId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("ForagableProfileRevisionNumber")
                        .HasColumnType("int(11)");

                    b.Property<string>("ForageType")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<double>("Yield")
                        .HasColumnType("double");

                    b.HasKey("ForagableProfileId", "ForagableProfileRevisionNumber", "ForageType")
                        .HasName("PRIMARY");

                    b.ToTable("ForagableProfiles_MaximumYields");
                });

            modelBuilder.Entity("MudSharp.Models.FutureProg", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("AcceptsAnyParameters")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("FunctionComment")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("FunctionName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("FunctionText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<ulong>("Public")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<long>("ReturnType")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("StaticType")
                        .HasColumnType("int(11)");

                    b.Property<string>("Subcategory")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("FutureProgs");
                });

            modelBuilder.Entity("MudSharp.Models.FutureProgsParameter", b =>
                {
                    b.Property<long>("FutureProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("ParameterIndex")
                        .HasColumnType("int(11)");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("ParameterType")
                        .HasColumnType("bigint(20)");

                    b.HasKey("FutureProgId", "ParameterIndex")
                        .HasName("PRIMARY");

                    b.ToTable("FutureProgs_Parameters");
                });

            modelBuilder.Entity("MudSharp.Models.GameItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<double>("Condition")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.Property<long?>("ContainerId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("EffectData")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("GameItemProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("GameItemProtoRevision")
                        .HasColumnType("int(11)");

                    b.Property<long>("MaterialId")
                        .HasColumnType("bigint(20)");

                    b.Property<int?>("MorphTimeRemaining")
                        .HasColumnType("int(11)");

                    b.Property<string>("PositionEmote")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("PositionModifier")
                        .HasColumnType("int(11)");

                    b.Property<long?>("PositionTargetId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("PositionTargetType")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("Quality")
                        .HasColumnType("int(11)");

                    b.Property<int>("RoomLayer")
                        .HasColumnType("int(11)");

                    b.Property<int>("Size")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("ContainerId")
                        .HasName("FK_GameItems_GameItems_Containers_idx");

                    b.ToTable("GameItems");
                });

            modelBuilder.Entity("MudSharp.Models.GameItemComponent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("GameItemComponentProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("GameItemComponentProtoRevision")
                        .HasColumnType("int(11)");

                    b.Property<long>("GameItemId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("GameItemId")
                        .HasName("FK_GameItemComponents_GameItems");

                    b.ToTable("GameItemComponents");
                });

            modelBuilder.Entity("MudSharp.Models.GameItemComponentProto", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("RevisionNumber")
                        .HasColumnType("int(11)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("EditableItemId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id", "RevisionNumber")
                        .HasName("PRIMARY");

                    b.HasIndex("EditableItemId")
                        .HasName("FK_GameItemComponentProtos_EditableItems");

                    b.ToTable("GameItemComponentProtos");
                });

            modelBuilder.Entity("MudSharp.Models.GameItemMagicResource", b =>
                {
                    b.Property<long>("GameItemId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("MagicResourceId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.HasKey("GameItemId", "MagicResourceId")
                        .HasName("PRIMARY");

                    b.HasIndex("MagicResourceId")
                        .HasName("FK_GameItems_MagicResources_MagicResources_idx");

                    b.ToTable("GameItems_MagicResources");
                });

            modelBuilder.Entity("MudSharp.Models.GameItemProto", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("RevisionNumber")
                        .HasColumnType("int(11)");

                    b.Property<int>("BaseItemQuality")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'5'");

                    b.Property<string>("CustomColour")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("EditableItemId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("FullDescription")
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long?>("HealthStrategyId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("HighPriority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<long?>("ItemGroupId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Keywords")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("LongDescription")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("MaterialId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("MorphEmote")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1000)")
                        .HasDefaultValueSql("'$0 $?1|morphs into $1|decays into nothing$.'")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long?>("MorphGameItemProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("MorphTimeSeconds")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long?>("OnDestroyedGameItemProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("ReadOnly")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("varchar(1000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("Size")
                        .HasColumnType("int(11)");

                    b.Property<double>("Weight")
                        .HasColumnType("double");

                    b.HasKey("Id", "RevisionNumber")
                        .HasName("PRIMARY");

                    b.HasIndex("EditableItemId")
                        .HasName("FK_GameItemProtos_EditableItems");

                    b.HasIndex("ItemGroupId")
                        .HasName("FK_GameItemProtos_ItemGroups_idx");

                    b.ToTable("GameItemProtos");
                });

            modelBuilder.Entity("MudSharp.Models.GameItemProtosDefaultVariable", b =>
                {
                    b.Property<long>("GameItemProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("GameItemProtoRevNum")
                        .HasColumnType("int(11)");

                    b.Property<string>("VariableName")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<string>("VariableValue")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.HasKey("GameItemProtoId", "GameItemProtoRevNum", "VariableName")
                        .HasName("PRIMARY");

                    b.ToTable("GameItemProtos_DefaultVariables");
                });

            modelBuilder.Entity("MudSharp.Models.GameItemProtosGameItemComponentProtos", b =>
                {
                    b.Property<long>("GameItemProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("GameItemComponentProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("GameItemProtoRevision")
                        .HasColumnType("int(11)");

                    b.Property<int>("GameItemComponentRevision")
                        .HasColumnType("int(11)");

                    b.HasKey("GameItemProtoId", "GameItemComponentProtoId", "GameItemProtoRevision", "GameItemComponentRevision")
                        .HasName("PRIMARY");

                    b.HasIndex("GameItemComponentProtoId", "GameItemComponentRevision")
                        .HasName("FK_GIPGICP_GameItemComponentProtos");

                    b.HasIndex("GameItemProtoId", "GameItemProtoRevision")
                        .HasName("FK_GIPGICP_GameItemProtos");

                    b.ToTable("GameItemProtos_GameItemComponentProtos");
                });

            modelBuilder.Entity("MudSharp.Models.GameItemProtosOnLoadProgs", b =>
                {
                    b.Property<long>("GameItemProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("GameItemProtoRevisionNumber")
                        .HasColumnType("int(11)");

                    b.Property<long>("FutureProgId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("GameItemProtoId", "GameItemProtoRevisionNumber", "FutureProgId")
                        .HasName("PRIMARY");

                    b.HasIndex("FutureProgId")
                        .HasName("FK_GameItemProtos_OnLoadProgs_FutureProgs_idx");

                    b.ToTable("GameItemProtos_OnLoadProgs");
                });

            modelBuilder.Entity("MudSharp.Models.GameItemProtosTags", b =>
                {
                    b.Property<long>("GameItemProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("GameItemProtoRevisionNumber")
                        .HasColumnType("int(11)");

                    b.HasKey("GameItemProtoId", "TagId", "GameItemProtoRevisionNumber")
                        .HasName("PRIMARY");

                    b.HasIndex("TagId")
                        .HasName("FK_GameItemProtos_Tags_Tags");

                    b.HasIndex("GameItemProtoId", "GameItemProtoRevisionNumber")
                        .HasName("FK_GameItemProtos_Tags_GameItemProtos");

                    b.ToTable("GameItemProtos_Tags");
                });

            modelBuilder.Entity("MudSharp.Models.Gameitemeditingview", b =>
                {
                    b.Property<sbyte>("Id")
                        .HasColumnType("tinyint(4)");

                    b.Property<sbyte>("MaterialId")
                        .HasColumnType("tinyint(4)");

                    b.Property<sbyte>("Name")
                        .HasColumnType("tinyint(4)");

                    b.Property<sbyte>("ProtoMaterial")
                        .HasColumnType("tinyint(4)");

                    b.Property<sbyte>("Quality")
                        .HasColumnType("tinyint(4)");

                    b.Property<sbyte>("Size")
                        .HasColumnType("tinyint(4)");

                    b.ToTable("gameitemeditingview");
                });

            modelBuilder.Entity("MudSharp.Models.Gas", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<double>("BoilingPoint")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'5'");

                    b.Property<long?>("CountAsId")
                        .HasColumnType("bigint(20)");

                    b.Property<int?>("CountsAsQuality")
                        .HasColumnType("int(11)");

                    b.Property<double>("Density")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'0.001205'");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<string>("DisplayColour")
                        .IsRequired()
                        .HasColumnType("varchar(40)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<double>("ElectricalConductivity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'0.000005'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<ulong>("Organic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<long?>("PrecipitateId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("SmellIntensity")
                        .HasColumnType("double");

                    b.Property<string>("SmellText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<double>("SpecificHeatCapacity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1.005'");

                    b.Property<double>("ThermalConductivity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'0.0257'");

                    b.Property<string>("VagueSmellText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<double>("Viscosity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'15'");

                    b.HasKey("Id");

                    b.HasIndex("CountAsId")
                        .HasName("FK_Gases_Gases_idx");

                    b.HasIndex("PrecipitateId")
                        .HasName("FK_Gases_Liquids_idx");

                    b.ToTable("Gases");
                });

            modelBuilder.Entity("MudSharp.Models.GasesTags", b =>
                {
                    b.Property<long>("GasId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("GasId", "TagId")
                        .HasName("PRIMARY");

                    b.HasIndex("TagId")
                        .HasName("FK_Gases_Tags_Tags_idx");

                    b.ToTable("Gases_Tags");
                });

            modelBuilder.Entity("MudSharp.Models.Grid", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("GridType")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("Grids");
                });

            modelBuilder.Entity("MudSharp.Models.GroupAi", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("GroupAiTemplateId")
                        .HasColumnName("GroupAITemplateId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("GroupAiTemplateId")
                        .HasName("FK_GroupAIs_GroupAITemplates_idx");

                    b.ToTable("GroupAIs");
                });

            modelBuilder.Entity("MudSharp.Models.GroupAiTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("GroupAITemplates");
                });

            modelBuilder.Entity("MudSharp.Models.Guest", b =>
                {
                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("CharacterId")
                        .HasName("PRIMARY");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("MudSharp.Models.HealthStrategy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("Id");

                    b.ToTable("HealthStrategies");
                });

            modelBuilder.Entity("MudSharp.Models.HearingProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("SurveyDescription")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("HearingProfiles");
                });

            modelBuilder.Entity("MudSharp.Models.HeightWeightModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<double>("Bmimultiplier")
                        .HasColumnName("BMIMultiplier")
                        .HasColumnType("double");

                    b.Property<double>("MeanBmi")
                        .HasColumnName("MeanBMI")
                        .HasColumnType("double");

                    b.Property<double>("MeanHeight")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<double>("StddevBmi")
                        .HasColumnName("StddevBMI")
                        .HasColumnType("double");

                    b.Property<double>("StddevHeight")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("HeightWeightModels");
                });

            modelBuilder.Entity("MudSharp.Models.Helpfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Keywords")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("LastEditedBy")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<DateTime>("LastEditedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("PublicText")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long?>("RuleId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Subcategory")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("TagLine")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("RuleId")
                        .HasName("FK_Helpfiles_FutureProgs");

                    b.ToTable("Helpfiles");
                });

            modelBuilder.Entity("MudSharp.Models.HelpfilesExtraText", b =>
                {
                    b.Property<long>("HelpfileId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<long>("RuleId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("HelpfileId", "DisplayOrder")
                        .HasName("PRIMARY");

                    b.HasIndex("RuleId")
                        .HasName("FK_Helpfiles_ExtraTexts_FutureProgs");

                    b.ToTable("Helpfiles_ExtraTexts");
                });

            modelBuilder.Entity("MudSharp.Models.Hooks", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("TargetEventType")
                        .HasColumnType("int(11)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("Hooks");
                });

            modelBuilder.Entity("MudSharp.Models.HooksPerceivable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("BodyId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CellId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("GameItemId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("HookId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("ShardId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("ZoneId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("BodyId")
                        .HasName("FK_Hooks_Perceivables_Bodies_idx");

                    b.HasIndex("CellId")
                        .HasName("FK_Hooks_Perceivables_Cells_idx");

                    b.HasIndex("CharacterId")
                        .HasName("FK_Hooks_Perceivables_Characters_idx");

                    b.HasIndex("GameItemId")
                        .HasName("FK_Hooks_Perceivables_GameItems_idx");

                    b.HasIndex("HookId")
                        .HasName("FK_Hooks_Perceivables_Hooks_idx");

                    b.HasIndex("ShardId")
                        .HasName("FK_Hooks_Perceivables_Shards_idx");

                    b.HasIndex("ZoneId")
                        .HasName("FK_Hooks_Perceivables_Zones_idx");

                    b.ToTable("Hooks_Perceivables");
                });

            modelBuilder.Entity("MudSharp.Models.Improver", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("Improvers");
                });

            modelBuilder.Entity("MudSharp.Models.Infection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("BodypartId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("Immunity")
                        .HasColumnType("double");

                    b.Property<int>("InfectionType")
                        .HasColumnType("int(11)");

                    b.Property<double>("Intensity")
                        .HasColumnType("double");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Virulence")
                        .HasColumnType("int(11)");

                    b.Property<long?>("WoundId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("BodypartId")
                        .HasName("FK_Infections_Bodyparts_idx");

                    b.HasIndex("OwnerId")
                        .HasName("FK_Infections_Bodies_idx");

                    b.HasIndex("WoundId")
                        .HasName("FK_Infections_Wounds_idx");

                    b.ToTable("Infections");
                });

            modelBuilder.Entity("MudSharp.Models.ItemGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Keywords")
                        .HasColumnType("varchar(1000)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("Id");

                    b.ToTable("ItemGroups");
                });

            modelBuilder.Entity("MudSharp.Models.ItemGroupForm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<long>("ItemGroupId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.HasKey("Id");

                    b.HasIndex("ItemGroupId")
                        .HasName("FK_ItemGroupForms_ItemGroups_idx");

                    b.ToTable("ItemGroupForms");
                });

            modelBuilder.Entity("MudSharp.Models.Knowledge", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CanAcquireProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CanLearnProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("LearnDifficulty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'7'");

                    b.Property<int>("LearnableType")
                        .HasColumnType("int(11)");

                    b.Property<int>("LearningSessionsRequired")
                        .HasColumnType("int(11)");

                    b.Property<string>("LongDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Subtype")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("TeachDifficulty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'7'");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("CanAcquireProgId")
                        .HasName("FK_KNOWLEDGES_FUTUREPROGS_ACQUIRE_idx");

                    b.HasIndex("CanLearnProgId")
                        .HasName("FK_KNOWLEDGES_FUTUREPROGS_LEARN_idx");

                    b.ToTable("knowledges");
                });

            modelBuilder.Entity("MudSharp.Models.KnowledgesCosts", b =>
                {
                    b.Property<long>("KnowledgeId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ChargenResourceId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Cost")
                        .HasColumnType("int(11)");

                    b.HasKey("KnowledgeId", "ChargenResourceId")
                        .HasName("PRIMARY");

                    b.HasIndex("ChargenResourceId")
                        .HasName("FK_KnowledgesCosts_ChargenResources_idx");

                    b.HasIndex("KnowledgeId")
                        .HasName("FK_KnowledgesCosts_Knowledges_idx");

                    b.ToTable("KnowledgesCosts");
                });

            modelBuilder.Entity("MudSharp.Models.Language", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("DefaultLearnerAccentId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("DifficultyModel")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("LanguageObfuscationFactor")
                        .HasColumnType("double");

                    b.Property<long>("LinkedTraitId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("UnknownLanguageDescription")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("DefaultLearnerAccentId")
                        .HasName("FK_Languages_Accents_idx");

                    b.HasIndex("DifficultyModel")
                        .HasName("FK_Languages_LanguageDifficultyModels");

                    b.HasIndex("LinkedTraitId")
                        .HasName("FK_Languages_TraitDefinitions");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("MudSharp.Models.LanguageDifficultyModels", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("LanguageDifficultyModels");
                });

            modelBuilder.Entity("MudSharp.Models.Law", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<double>("ActivePeriod")
                        .HasColumnType("double");

                    b.Property<ulong>("CanBeAppliedAutomatically")
                        .HasColumnType("bit(1)");

                    b.Property<ulong>("CanBeArrested")
                        .HasColumnType("bit(1)");

                    b.Property<ulong>("CanBeOfferedBail")
                        .HasColumnType("bit(1)");

                    b.Property<int>("CrimeType")
                        .HasColumnType("int(11)");

                    b.Property<int>("EnforcementPriority")
                        .HasColumnType("int(11)");

                    b.Property<string>("EnforcementStrategy")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long?>("LawAppliesProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("LegalAuthorityId")
                        .HasColumnType("bigint(20)");

                    b.Property<decimal>("MaximumFine")
                        .HasColumnType("decimal(10,0)");

                    b.Property<decimal>("MinimumFine")
                        .HasColumnType("decimal(10,0)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<decimal>("StandardFine")
                        .HasColumnType("decimal(10,0)");

                    b.HasKey("Id");

                    b.HasIndex("LawAppliesProgId")
                        .HasName("FK_Laws_FutureProgs_idx");

                    b.HasIndex("LegalAuthorityId")
                        .HasName("FK_Laws_LegalAuthority_idx");

                    b.ToTable("Laws");
                });

            modelBuilder.Entity("MudSharp.Models.LawsOffenderClasses", b =>
                {
                    b.Property<long>("LawId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("LegalClassId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("LawId", "LegalClassId")
                        .HasName("PRIMARY");

                    b.HasIndex("LegalClassId")
                        .HasName("FK_Laws_OffenderClasses_LegalClasses_idx");

                    b.ToTable("Laws_OffenderClasses");
                });

            modelBuilder.Entity("MudSharp.Models.LawsVictimClasses", b =>
                {
                    b.Property<long>("LawId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("LegalClassId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("LawId", "LegalClassId")
                        .HasName("PRIMARY");

                    b.HasIndex("LegalClassId")
                        .HasName("FK_Laws_VictimClasses_LegalClasses_idx");

                    b.ToTable("Laws_VictimClasses");
                });

            modelBuilder.Entity("MudSharp.Models.LegalAuthoritiesZones", b =>
                {
                    b.Property<long>("ZoneId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("LegalAuthorityId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ZoneId", "LegalAuthorityId")
                        .HasName("PRIMARY");

                    b.HasIndex("LegalAuthorityId")
                        .HasName("FK_LegalAuthorities_Zones_LegalAuthorities_idx");

                    b.ToTable("LegalAuthorities_Zones");
                });

            modelBuilder.Entity("MudSharp.Models.LegalAuthority", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId")
                        .HasName("FK_LegalAuthorities_Currencies_idx");

                    b.ToTable("LegalAuthorities");
                });

            modelBuilder.Entity("MudSharp.Models.LegalClass", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("CanBeDetainedUntilFinesPaid")
                        .HasColumnType("bit(1)");

                    b.Property<long>("LegalAuthorityId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("LegalClassPriority")
                        .HasColumnType("int(11)");

                    b.Property<long>("MembershipProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("LegalAuthorityId")
                        .HasName("FK_LegalClasses_LegalAuthorities_idx");

                    b.HasIndex("MembershipProgId")
                        .HasName("FK_LegalClasses_FutureProgs_idx");

                    b.ToTable("LegalClasses");
                });

            modelBuilder.Entity("MudSharp.Models.Limb", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<double>("LimbDamageThresholdMultiplier")
                        .HasColumnType("double");

                    b.Property<double>("LimbPainThresholdMultiplier")
                        .HasColumnType("double");

                    b.Property<int>("LimbType")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<long>("RootBodyId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("RootBodypartId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("RootBodyId")
                        .HasName("FK_Limbs_BodyProtos_idx");

                    b.HasIndex("RootBodypartId")
                        .HasName("FK_Limbs_BodypartProto_idx");

                    b.ToTable("Limbs");
                });

            modelBuilder.Entity("MudSharp.Models.LimbBodypartProto", b =>
                {
                    b.Property<long>("BodypartProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("LimbId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("BodypartProtoId", "LimbId")
                        .HasName("PRIMARY");

                    b.HasIndex("LimbId")
                        .HasName("FK_Limbs_BodypartProto_Limbs_idx");

                    b.ToTable("Limbs_BodypartProto");
                });

            modelBuilder.Entity("MudSharp.Models.LimbsSpinalPart", b =>
                {
                    b.Property<long>("LimbId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("BodypartProtoId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("LimbId", "BodypartProtoId")
                        .HasName("PRIMARY");

                    b.HasIndex("BodypartProtoId")
                        .HasName("FK_Limbs_SpinalParts_BodypartProtos_idx");

                    b.ToTable("Limbs_SpinalParts");
                });

            modelBuilder.Entity("MudSharp.Models.LineOfCreditAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<decimal>("AccountLimit")
                        .HasColumnType("decimal(10,0)");

                    b.Property<string>("AccountName")
                        .HasColumnType("longtext CHARACTER SET utf8mb4");

                    b.Property<long>("AccountOwnerId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("AccountOwnerName")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<ulong>("IsSuspended")
                        .HasColumnType("bit(1)");

                    b.Property<decimal>("OutstandingBalance")
                        .HasColumnType("decimal(10,0)");

                    b.Property<long>("ShopId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("AccountOwnerId")
                        .HasName("FK_LineOfCreditAccounts_Characters_idx");

                    b.HasIndex("ShopId")
                        .HasName("FK_LineOfCreditAccounts_Shops_idx");

                    b.ToTable("LineOfCreditAccounts");
                });

            modelBuilder.Entity("MudSharp.Models.LineOfCreditAccountUser", b =>
                {
                    b.Property<long>("LineOfCreditAccountId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("AccountUserId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("AccountUserName")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<decimal?>("SpendingLimit")
                        .HasColumnType("decimal(10,0)");

                    b.HasKey("LineOfCreditAccountId", "AccountUserId")
                        .HasName("PRIMARY");

                    b.HasIndex("AccountUserId")
                        .HasName("FK_LineOfCreditAccountUsers_Characters_idx");

                    b.HasIndex("LineOfCreditAccountId")
                        .HasName("FK_LineOfCreditAccountUsers_LineOfCreditAccounts_idx");

                    b.ToTable("LineOfCreditAccountUsers");
                });

            modelBuilder.Entity("MudSharp.Models.Liquid", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<double>("AlcoholLitresPerLitre")
                        .HasColumnType("double");

                    b.Property<double?>("BoilingPoint")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'373.15'");

                    b.Property<double>("CaloriesPerLitre")
                        .HasColumnType("double");

                    b.Property<long?>("CountAsId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("CountAsQuality")
                        .HasColumnType("int(11)");

                    b.Property<string>("DampDescription")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("DampShortDescription")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<double>("Density")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("DisplayColour")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'blue'")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long?>("DraughtProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("DrenchedDescription")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("DrenchedShortDescription")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long?>("DriedResidueId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("DrinkSatiatedHoursPerLitre")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'12'");

                    b.Property<double>("DrugGramsPerUnitVolume")
                        .HasColumnType("double");

                    b.Property<long?>("DrugId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("ElectricalConductivity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'0.005'");

                    b.Property<double>("FoodSatiatedHoursPerLitre")
                        .HasColumnType("double");

                    b.Property<double?>("FreezingPoint")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'273.15'");

                    b.Property<double?>("IgnitionPoint")
                        .HasColumnType("double");

                    b.Property<int>("InjectionConsequence")
                        .HasColumnType("int(11)");

                    b.Property<string>("LongDescription")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<ulong>("Organic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<double>("ResidueVolumePercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'0.05'");

                    b.Property<double>("SmellIntensity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'10'");

                    b.Property<string>("SmellText")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long?>("SolventId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("SolventVolumeRatio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.Property<double>("SpecificHeatCapacity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'4181'");

                    b.Property<double>("TasteIntensity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'100'");

                    b.Property<string>("TasteText")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<double>("ThermalConductivity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'0.609'");

                    b.Property<string>("VagueSmellText")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("VagueTasteText")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<double>("Viscosity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.Property<double>("WaterLitresPerLitre")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("WetDescription")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("WetShortDescription")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("CountAsId")
                        .HasName("FK_Liquids_Liquids_CountasAs_idx");

                    b.HasIndex("DriedResidueId")
                        .HasName("FK_Liquids_Materials_idx");

                    b.HasIndex("DrugId")
                        .HasName("FK_Liquids_Drugs_idx");

                    b.HasIndex("SolventId")
                        .HasName("FK_Liquids_Liquids_idx");

                    b.ToTable("Liquids");
                });

            modelBuilder.Entity("MudSharp.Models.LiquidsTags", b =>
                {
                    b.Property<long>("LiquidId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("LiquidId", "TagId")
                        .HasName("PRIMARY");

                    b.HasIndex("TagId")
                        .HasName("FK_Liquids_Tags_Tags_idx");

                    b.ToTable("Liquids_Tags");
                });

            modelBuilder.Entity("MudSharp.Models.Lock", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("Strength")
                        .HasColumnType("int(11)");

                    b.Property<int>("Style")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.ToTable("Locks");
                });

            modelBuilder.Entity("MudSharp.Models.LoginIp", b =>
                {
                    b.Property<string>("IpAddress")
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("AccountRegisteredOnThisIp")
                        .ValueGeneratedOnAdd()
                        .HasColumnName("AccountRegisteredOnThisIP")
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<DateTime>("FirstDate")
                        .HasColumnType("datetime");

                    b.HasKey("IpAddress", "AccountId")
                        .HasName("PRIMARY");

                    b.HasIndex("AccountId")
                        .HasName("FK_LoginIPs_Accounts");

                    b.ToTable("LoginIPs");
                });

            modelBuilder.Entity("MudSharp.Models.MagicCapability", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("CapabilityModel")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("MagicSchoolId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("PowerLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("Id");

                    b.HasIndex("MagicSchoolId")
                        .HasName("FK_MagicCapabilities_MagicSchools_idx");

                    b.ToTable("MagicCapabilities");
                });

            modelBuilder.Entity("MudSharp.Models.MagicGenerator", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("MagicGenerators");
                });

            modelBuilder.Entity("MudSharp.Models.MagicPower", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Blurb")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("MagicSchoolId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("PowerModel")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("ShowHelp")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("MagicSchoolId")
                        .HasName("FK_MagicPowers_MagicSchools_idx");

                    b.ToTable("MagicPowers");
                });

            modelBuilder.Entity("MudSharp.Models.MagicResource", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("MagicResourceType")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("MagicResources");
                });

            modelBuilder.Entity("MudSharp.Models.MagicSchool", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long?>("ParentSchoolId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("PowerListColour")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("SchoolAdjective")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("SchoolVerb")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("ParentSchoolId")
                        .HasName("FK_MagicSchools_MagicSchools_idx");

                    b.ToTable("MagicSchools");
                });

            modelBuilder.Entity("MudSharp.Models.Material", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<double>("Absorbency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'0.25'");

                    b.Property<int?>("BehaviourType")
                        .HasColumnType("int(11)");

                    b.Property<double?>("BoilingPoint")
                        .HasColumnType("double");

                    b.Property<double>("Density")
                        .HasColumnType("double");

                    b.Property<double>("ElectricalConductivity")
                        .HasColumnType("double");

                    b.Property<double?>("HeatDamagePoint")
                        .HasColumnType("double");

                    b.Property<double?>("IgnitionPoint")
                        .HasColumnType("double");

                    b.Property<double?>("ImpactFracture")
                        .HasColumnType("double");

                    b.Property<double?>("ImpactStrainAtYield")
                        .HasColumnType("double");

                    b.Property<double?>("ImpactYield")
                        .HasColumnType("double");

                    b.Property<long?>("LiquidFormId")
                        .HasColumnType("bigint");

                    b.Property<string>("MaterialDescription")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<double?>("MeltingPoint")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<ulong>("Organic")
                        .HasColumnType("bit(1)");

                    b.Property<string>("ResidueColour")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'white'")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("ResidueDesc")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("ResidueSdesc")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<double?>("ShearFracture")
                        .HasColumnType("double");

                    b.Property<double?>("ShearStrainAtYield")
                        .HasColumnType("double");

                    b.Property<double?>("ShearYield")
                        .HasColumnType("double");

                    b.Property<long?>("SolventId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("SolventVolumeRatio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.Property<double>("SpecificHeatCapacity")
                        .HasColumnType("double");

                    b.Property<double>("ThermalConductivity")
                        .HasColumnType("double");

                    b.Property<int>("Type")
                        .HasColumnType("int(11)");

                    b.Property<double?>("Viscosity")
                        .HasColumnType("double");

                    b.Property<double?>("YoungsModulus")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("MudSharp.Models.MaterialsTags", b =>
                {
                    b.Property<long>("MaterialId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("MaterialId", "TagId")
                        .HasName("PRIMARY");

                    b.HasIndex("TagId")
                        .HasName("Materials_Tags_Tags_idx");

                    b.ToTable("Materials_Tags");
                });

            modelBuilder.Entity("MudSharp.Models.Merchandise", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<decimal>("AutoReorderPrice")
                        .HasColumnType("decimal(10,0)");

                    b.Property<ulong>("AutoReordering")
                        .HasColumnType("bit(1)");

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(10,0)");

                    b.Property<ulong>("DefaultMerchandiseForItem")
                        .HasColumnType("bit(1)");

                    b.Property<long>("ItemProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("ListDescription")
                        .HasColumnType("varchar(500)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("MinimumStockLevels")
                        .HasColumnType("int(11)");

                    b.Property<double>("MinimumStockLevelsByWeight")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long?>("PreferredDisplayContainerId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("PreserveVariablesOnReorder")
                        .HasColumnType("bit(1)");

                    b.Property<long>("ShopId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("PreferredDisplayContainerId")
                        .HasName("FK_Merchandises_GameItems_idx");

                    b.HasIndex("ShopId")
                        .HasName("FK_Merchandises_Shops_idx");

                    b.ToTable("Merchandises");
                });

            modelBuilder.Entity("MudSharp.Models.Merit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<int>("MeritScope")
                        .HasColumnType("int(11)");

                    b.Property<int>("MeritType")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.HasKey("Id");

                    b.HasIndex("ParentId")
                        .HasName("FK_Merits_Merits_idx");

                    b.ToTable("Merits");
                });

            modelBuilder.Entity("MudSharp.Models.MeritsChargenResources", b =>
                {
                    b.Property<long>("MeritId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ChargenResourceId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("RequirementOnly")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<int>("Amount")
                        .HasColumnType("int(11)");

                    b.HasKey("MeritId", "ChargenResourceId", "RequirementOnly")
                        .HasName("PRIMARY");

                    b.HasIndex("ChargenResourceId")
                        .HasName("FK_Merits_ChargenResources_ChargenResources_idx");

                    b.ToTable("Merits_ChargenResources");
                });

            modelBuilder.Entity("MudSharp.Models.MoveSpeed", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("BodyProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("FirstPersonVerb")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<double>("Multiplier")
                        .HasColumnType("double");

                    b.Property<long>("PositionId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("PresentParticiple")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<double>("StaminaMultiplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("ThirdPersonVerb")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("BodyProtoId")
                        .HasName("FK_MoveSpeeds_BodyPrototype");

                    b.ToTable("MoveSpeeds");
                });

            modelBuilder.Entity("MudSharp.Models.MutualIntelligability", b =>
                {
                    b.Property<long>("ListenerLanguageId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("TargetLanguageId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("IntelligabilityDifficulty")
                        .HasColumnType("int(11)");

                    b.HasKey("ListenerLanguageId", "TargetLanguageId")
                        .HasName("PRIMARY");

                    b.HasIndex("TargetLanguageId")
                        .HasName("FK_Languages_MutualIntelligabilities_Target_idx");

                    b.ToTable("MutualIntelligabilities");
                });

            modelBuilder.Entity("MudSharp.Models.NameCulture", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("NameCulture");
                });

            modelBuilder.Entity("MudSharp.Models.NonCardinalExitTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("DestinationInboundPreface")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("DestinationOutboundPreface")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("InboundVerb")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("OriginInboundPreface")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("OriginOutboundPreface")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("OutboundVerb")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("NonCardinalExitTemplates");
                });

            modelBuilder.Entity("MudSharp.Models.Npc", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("BodyguardCharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("TemplateId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("TemplateRevnum")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("BodyguardCharacterId")
                        .HasName("FK_NPCs_Characters_Bodyguard_idx");

                    b.HasIndex("CharacterId")
                        .HasName("FK_NPCs_Characters");

                    b.HasIndex("TemplateId", "TemplateRevnum")
                        .HasName("FK_NPCs_NPCTemplates");

                    b.ToTable("NPCs");
                });

            modelBuilder.Entity("MudSharp.Models.NpcTemplate", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("RevisionNumber")
                        .HasColumnType("int(11)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("EditableItemId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id", "RevisionNumber")
                        .HasName("PRIMARY");

                    b.HasIndex("EditableItemId")
                        .HasName("FK_NPCTemplates_EditableItems");

                    b.ToTable("NPCTemplates");
                });

            modelBuilder.Entity("MudSharp.Models.NpcTemplatesArtificalIntelligences", b =>
                {
                    b.Property<int>("NpcTemplateRevisionNumber")
                        .HasColumnName("NPCTemplateRevisionNumber")
                        .HasColumnType("int(11)");

                    b.Property<long>("NpcTemplateId")
                        .HasColumnName("NPCTemplateId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("AiId")
                        .HasColumnName("AIId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("NpcTemplateRevisionNumber", "NpcTemplateId", "AiId")
                        .HasName("PRIMARY");

                    b.HasIndex("AiId")
                        .HasName("FK_NTAI_ArtificalIntelligences");

                    b.HasIndex("NpcTemplateId", "NpcTemplateRevisionNumber")
                        .HasName("FK_NTAI_NPCTemplates");

                    b.ToTable("NPCTemplates_ArtificalIntelligences");
                });

            modelBuilder.Entity("MudSharp.Models.NpcsArtificialIntelligences", b =>
                {
                    b.Property<long>("ArtificialIntelligenceId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("Npcid")
                        .HasColumnName("NPCId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ArtificialIntelligenceId", "Npcid")
                        .HasName("PRIMARY");

                    b.HasIndex("Npcid")
                        .HasName("FK_NPCs_ArtificialIntelligences_NPCs");

                    b.ToTable("NPCs_ArtificialIntelligences");
                });

            modelBuilder.Entity("MudSharp.Models.PatrolRoute", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long>("LegalAuthorityId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("LingerTimeMajorNode")
                        .HasColumnType("DOUBLE");

                    b.Property<double>("LingerTimeMinorNode")
                        .HasColumnType("DOUBLE");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PatrolStrategy")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Priority")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("LegalAuthorityId")
                        .HasName("FK_PatrolRoutes_LegalAuthorities_idx");

                    b.ToTable("PatrolRoutes");
                });

            modelBuilder.Entity("MudSharp.Models.PatrolRouteNode", b =>
                {
                    b.Property<long>("PatrolRouteId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CellId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Order")
                        .HasColumnType("int(11)");

                    b.HasKey("PatrolRouteId", "CellId")
                        .HasName("PRIMARY");

                    b.HasIndex("CellId")
                        .HasName("FK_PatrolRoutesNodes_Cells_idx");

                    b.HasIndex("PatrolRouteId")
                        .HasName("FK_PatrolRoutesNodes_PatrolRoutes_idx");

                    b.ToTable("PatrolRoutesNodes");
                });

            modelBuilder.Entity("MudSharp.Models.PatrolRouteNumbers", b =>
                {
                    b.Property<long>("PatrolRouteId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("EnforcementAuthorityId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("NumberRequired")
                        .HasColumnType("int(11)");

                    b.HasKey("PatrolRouteId", "EnforcementAuthorityId")
                        .HasName("PRIMARY");

                    b.HasIndex("EnforcementAuthorityId")
                        .HasName("FK_PatrolRoutesNumbers_EnforcementAuthorities_idx");

                    b.HasIndex("PatrolRouteId")
                        .HasName("FK_PatrolRoutesNumbers_PatrolRoutes_idx");

                    b.ToTable("PatrolRoutesNumbers");
                });

            modelBuilder.Entity("MudSharp.Models.PatrolRouteTimeOfDay", b =>
                {
                    b.Property<long>("PatrolRouteId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("TimeOfDay")
                        .HasColumnType("int(11)");

                    b.HasKey("PatrolRouteId", "TimeOfDay")
                        .HasName("PRIMARY");

                    b.HasIndex("PatrolRouteId")
                        .HasName("FK_PatrolRoutesTimesOfDay_PatrolRoutes_idx");

                    b.ToTable("PatrolRoutesTimesOfDay");
                });

            modelBuilder.Entity("MudSharp.Models.Paygrade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("ClanId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<decimal>("PayAmount")
                        .HasColumnType("decimal(18,0)");

                    b.HasKey("Id");

                    b.HasIndex("ClanId")
                        .HasName("FK_Paygrades_Clans");

                    b.HasIndex("CurrencyId")
                        .HasName("FK_Paygrades_Currencies");

                    b.ToTable("Paygrades");
                });

            modelBuilder.Entity("MudSharp.Models.PerceiverMerit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("BodyId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("GameItemId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("MeritId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("BodyId")
                        .HasName("FK_PerceiverMerits_Bodies_idx");

                    b.HasIndex("CharacterId")
                        .HasName("FK_PerceiverMerits_Characters_idx");

                    b.HasIndex("GameItemId")
                        .HasName("FK_PerceiverMerits_GameItems_idx");

                    b.HasIndex("MeritId")
                        .HasName(" FK_PerceiverMerits_Merits_idx");

                    b.ToTable("PerceiverMerits");
                });

            modelBuilder.Entity("MudSharp.Models.PopulationBloodModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("PopulationBloodModels");
                });

            modelBuilder.Entity("MudSharp.Models.PopulationBloodModelsBloodtype", b =>
                {
                    b.Property<long>("BloodtypeId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("PopulationBloodModelId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("Weight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("BloodtypeId", "PopulationBloodModelId")
                        .HasName("PRIMARY");

                    b.HasIndex("PopulationBloodModelId")
                        .HasName("FK_PopulationBloodModels_Bloodtypes_PopulationBloodModels_idx");

                    b.ToTable("PopulationBloodModels_Bloodtypes");
                });

            modelBuilder.Entity("MudSharp.Models.ProgSchedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long>("FutureProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("IntervalModifier")
                        .HasColumnType("int(11)");

                    b.Property<int>("IntervalOther")
                        .HasColumnType("int(11)");

                    b.Property<int>("IntervalType")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<string>("ReferenceDate")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<string>("ReferenceTime")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.HasKey("Id");

                    b.HasIndex("FutureProgId")
                        .HasName("FK_ProgSchedules_FutureProgs_idx");

                    b.ToTable("ProgSchedules");
                });

            modelBuilder.Entity("MudSharp.Models.Project", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("RevisionNumber")
                        .HasColumnType("int(11)");

                    b.Property<string>("Definition")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("EditableItemId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id", "RevisionNumber")
                        .HasName("PRIMARY");

                    b.HasIndex("EditableItemId")
                        .HasName("FK_Projects_EditableItems_idx");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("MudSharp.Models.ProjectAction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("ProjectPhaseId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int(11)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("ProjectPhaseId")
                        .HasName("FK_ProjectActions_ProjectPhases_idx");

                    b.ToTable("ProjectActions");
                });

            modelBuilder.Entity("MudSharp.Models.ProjectLabourImpact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<double>("MinimumHoursForImpactToKickIn")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("ProjectLabourRequirementId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("ProjectLabourRequirementId")
                        .HasName("FK_ProjectLabourImpacts_ProjectLabourRequirements_idx");

                    b.ToTable("ProjectLabourImpacts");
                });

            modelBuilder.Entity("MudSharp.Models.ProjectLabourRequirement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("MaximumSimultaneousWorkers")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("ProjectPhaseId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("TotalProgressRequired")
                        .HasColumnType("double");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("ProjectPhaseId")
                        .HasName("FK_ProjectLabourRequirements_ProjectPhases_idx");

                    b.ToTable("ProjectLabourRequirements");
                });

            modelBuilder.Entity("MudSharp.Models.ProjectMaterialRequirement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<ulong>("IsMandatoryForProjectCompletion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("ProjectPhaseId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("ProjectPhaseId")
                        .HasName("FK_ProjectMaterialRequirements_ProjectPhases_idx");

                    b.ToTable("ProjectMaterialRequirements");
                });

            modelBuilder.Entity("MudSharp.Models.ProjectPhase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("PhaseNumber")
                        .HasColumnType("int(11)");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("ProjectRevisionNumber")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId", "ProjectRevisionNumber")
                        .HasName("FK_ProjectPhases_Projects_idx");

                    b.ToTable("ProjectPhases");
                });

            modelBuilder.Entity("MudSharp.Models.Race", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<int>("AdultAge")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'21'");

                    b.Property<string>("AllowedGenders")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("AttributeBonusProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("AttributeTotalCap")
                        .HasColumnType("int(11)");

                    b.Property<long?>("AvailabilityProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("BaseBodyId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("BiteWeight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1000'");

                    b.Property<long?>("BloodLiquidId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("BloodModelId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("BodypartHealthMultiplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("BodypartSizeModifier")
                        .HasColumnType("int(11)");

                    b.Property<string>("BreathingVolumeExpression")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(500)")
                        .HasDefaultValueSql("'7'")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<ulong>("CanAttack")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<ulong>("CanClimb")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<ulong>("CanDefend")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<ulong>("CanEatCorpses")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<ulong>("CanEatMaterialsOptIn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<ulong>("CanSwim")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<ulong>("CanUseWeapons")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<int>("ChildAge")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'3'");

                    b.Property<string>("CommunicationStrategyType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'humanoid'")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("CorpseModelId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("DefaultHandedness")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'3'");

                    b.Property<long>("DefaultHealthStrategyId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("DiceExpression")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("EatCorpseEmoteText")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(500)")
                        .HasDefaultValueSql("'@ eat|eats {0}$1'")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("ElderAge")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'55'");

                    b.Property<string>("HandednessOptions")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("'1 3'")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("HoldBreathLengthExpression")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(500)")
                        .HasDefaultValueSql("'120'")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<double>("IlluminationPerceptionMultiplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("IndividualAttributeCap")
                        .HasColumnType("int(11)");

                    b.Property<string>("MaximumDragWeightExpression")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("MaximumLiftWeightExpression")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("MinimumSleepingPosition")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'4'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long?>("NaturalArmourMaterialId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("NaturalArmourQuality")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("NaturalArmourTypeId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("NeedsToBreathe")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<long?>("ParentRaceId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("RaceButcheryProfileId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("RaceUsesStamina")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<int>("SizeProne")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'5'");

                    b.Property<int>("SizeSitting")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'6'");

                    b.Property<int>("SizeStanding")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'6'");

                    b.Property<long?>("SweatLiquidId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("SweatRateInLitresPerMinute")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'0.8'");

                    b.Property<double>("TemperatureRangeCeiling")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'40'");

                    b.Property<double>("TemperatureRangeFloor")
                        .HasColumnType("double");

                    b.Property<int>("VenerableAge")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'75'");

                    b.Property<int>("YoungAdultAge")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'16'");

                    b.Property<int>("YouthAge")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'10'");

                    b.HasKey("Id");

                    b.HasIndex("AttributeBonusProgId")
                        .HasName("FK_Races_AttributeBonusProg");

                    b.HasIndex("AvailabilityProgId")
                        .HasName("FK_Races_AvailabilityProg");

                    b.HasIndex("BaseBodyId")
                        .HasName("FK_Races_BodyProtos");

                    b.HasIndex("BloodLiquidId")
                        .HasName("FK_Races_Liquids_Blood_idx");

                    b.HasIndex("BloodModelId")
                        .HasName("FK_Races_BloodModels_idx");

                    b.HasIndex("CorpseModelId")
                        .HasName("FK_Races_CorpseModels_idx");

                    b.HasIndex("DefaultHealthStrategyId")
                        .HasName("FK_Races_HealthStrategies_idx");

                    b.HasIndex("NaturalArmourMaterialId")
                        .HasName("FK_Races_Materials_idx");

                    b.HasIndex("NaturalArmourTypeId")
                        .HasName("FK_Races_ArmourTypes_idx");

                    b.HasIndex("ParentRaceId")
                        .HasName("FK_Races_Races");

                    b.HasIndex("RaceButcheryProfileId")
                        .HasName("FK_Races_RaceButcheryProfiles_idx");

                    b.HasIndex("SweatLiquidId")
                        .HasName("FK_Races_Liqiuds_Sweat_idx");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("MudSharp.Models.RaceButcheryProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CanButcherProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("DifficultySkin")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long?>("RequiredToolTagId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Verb")
                        .HasColumnType("int(11)");

                    b.Property<long?>("WhyCannotButcherProgId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("CanButcherProgId")
                        .HasName("FK_RaceButcheryProfiles_FutureProgs_Can_idx");

                    b.HasIndex("RequiredToolTagId")
                        .HasName("FK_RaceButcheryProfiles_Tags_idx");

                    b.HasIndex("WhyCannotButcherProgId")
                        .HasName("FK_RaceButcheryProfiles_FutureProgs_Why_idx");

                    b.ToTable("RaceButcheryProfiles");
                });

            modelBuilder.Entity("MudSharp.Models.RaceButcheryProfilesBreakdownChecks", b =>
                {
                    b.Property<long>("RaceButcheryProfileId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Subcageory")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int(11)");

                    b.Property<long>("TraitDefinitionId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("RaceButcheryProfileId", "Subcageory")
                        .HasName("PRIMARY");

                    b.HasIndex("TraitDefinitionId")
                        .HasName("FK_RaceButcheryProfiles_BreakdownChecks_TraitDefinitions_idx");

                    b.ToTable("RaceButcheryProfiles_BreakdownChecks");
                });

            modelBuilder.Entity("MudSharp.Models.RaceButcheryProfilesBreakdownEmotes", b =>
                {
                    b.Property<long>("RaceButcheryProfileId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Subcategory")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("Order")
                        .HasColumnType("int(11)");

                    b.Property<double>("Delay")
                        .HasColumnType("double");

                    b.Property<string>("Emote")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("RaceButcheryProfileId", "Subcategory", "Order")
                        .HasName("PRIMARY");

                    b.ToTable("RaceButcheryProfiles_BreakdownEmotes");
                });

            modelBuilder.Entity("MudSharp.Models.RaceButcheryProfilesButcheryProducts", b =>
                {
                    b.Property<long>("RaceButcheryProfileId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ButcheryProductId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("RaceButcheryProfileId", "ButcheryProductId")
                        .HasName("PRIMARY");

                    b.HasIndex("ButcheryProductId")
                        .HasName("FK_RaceButcheryProfiles_ButcheryProducts_ButcheryProducts_idx");

                    b.ToTable("RaceButcheryProfiles_ButcheryProducts");
                });

            modelBuilder.Entity("MudSharp.Models.RaceButcheryProfilesSkinningEmotes", b =>
                {
                    b.Property<long>("RaceButcheryProfileId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Subcategory")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("Order")
                        .HasColumnType("int(11)");

                    b.Property<double>("Delay")
                        .HasColumnType("double");

                    b.Property<string>("Emote")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("RaceButcheryProfileId", "Subcategory", "Order")
                        .HasName("PRIMARY");

                    b.ToTable("RaceButcheryProfiles_SkinningEmotes");
                });

            modelBuilder.Entity("MudSharp.Models.RaceEdibleForagableYields", b =>
                {
                    b.Property<long>("RaceId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("YieldType")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<double>("AlcoholPerYield")
                        .HasColumnType("double");

                    b.Property<double>("BiteYield")
                        .HasColumnType("double");

                    b.Property<double>("CaloriesPerYield")
                        .HasColumnType("double");

                    b.Property<string>("EatEmote")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1000)")
                        .HasDefaultValueSql("'@ eat|eats {0} from the location.'")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<double>("HungerPerYield")
                        .HasColumnType("double");

                    b.Property<double>("ThirstPerYield")
                        .HasColumnType("double");

                    b.Property<double>("WaterPerYield")
                        .HasColumnType("double");

                    b.HasKey("RaceId", "YieldType")
                        .HasName("PRIMARY");

                    b.ToTable("RaceEdibleForagableYields");
                });

            modelBuilder.Entity("MudSharp.Models.RacesAdditionalBodyparts", b =>
                {
                    b.Property<string>("Usage")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("RaceId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("BodypartId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Usage", "RaceId", "BodypartId")
                        .HasName("PRIMARY");

                    b.HasIndex("BodypartId")
                        .HasName("FK_Races_AdditionalBodyparts_BodypartProto");

                    b.HasIndex("RaceId")
                        .HasName("FK_Races_AdditionalBodyparts_Races");

                    b.ToTable("Races_AdditionalBodyparts");
                });

            modelBuilder.Entity("MudSharp.Models.RacesAdditionalCharacteristics", b =>
                {
                    b.Property<long>("RaceId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CharacteristicDefinitionId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Usage")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("RaceId", "CharacteristicDefinitionId")
                        .HasName("PRIMARY");

                    b.HasIndex("CharacteristicDefinitionId")
                        .HasName("FK_RAC_CharacteristicDefinitions");

                    b.ToTable("Races_AdditionalCharacteristics");
                });

            modelBuilder.Entity("MudSharp.Models.RacesAttributes", b =>
                {
                    b.Property<long>("RaceId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("AttributeId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("IsHealthAttribute")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.HasKey("RaceId", "AttributeId")
                        .HasName("PRIMARY");

                    b.HasIndex("AttributeId")
                        .HasName("FK_Races_Attributes_TraitDefinitions");

                    b.ToTable("Races_Attributes");
                });

            modelBuilder.Entity("MudSharp.Models.RacesBreathableGases", b =>
                {
                    b.Property<long>("RaceId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("GasId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("Multiplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("RaceId", "GasId")
                        .HasName("PRIMARY");

                    b.HasIndex("GasId")
                        .HasName("FK_Races-BreathableGases_Gases_idx");

                    b.ToTable("Races_BreathableGases");
                });

            modelBuilder.Entity("MudSharp.Models.RacesBreathableLiquids", b =>
                {
                    b.Property<long>("RaceId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("LiquidId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("Multiplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("RaceId", "LiquidId")
                        .HasName("PRIMARY");

                    b.HasIndex("LiquidId")
                        .HasName("FK_Races_BreathableLiquids_Liquids_idx");

                    b.ToTable("Races_BreathableLiquids");
                });

            modelBuilder.Entity("MudSharp.Models.RacesChargenResources", b =>
                {
                    b.Property<long>("RaceId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ChargenResourceId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("RequirementOnly")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<int>("Amount")
                        .HasColumnType("int(11)");

                    b.HasKey("RaceId", "ChargenResourceId", "RequirementOnly")
                        .HasName("PRIMARY");

                    b.HasIndex("ChargenResourceId")
                        .HasName("FK_Races_ChargenResources_ChargenResources");

                    b.ToTable("Races_ChargenResources");
                });

            modelBuilder.Entity("MudSharp.Models.RacesEdibleMaterials", b =>
                {
                    b.Property<long>("RaceId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("MaterialId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("AlcoholPerKilogram")
                        .HasColumnType("double");

                    b.Property<double>("CaloriesPerKilogram")
                        .HasColumnType("double");

                    b.Property<double>("HungerPerKilogram")
                        .HasColumnType("double");

                    b.Property<double>("ThirstPerKilogram")
                        .HasColumnType("double");

                    b.Property<double>("WaterPerKilogram")
                        .HasColumnType("double");

                    b.HasKey("RaceId", "MaterialId")
                        .HasName("PRIMARY");

                    b.HasIndex("MaterialId")
                        .HasName("FK_Races_EdibleMaterials_Materials_idx");

                    b.ToTable("Races_EdibleMaterials");
                });

            modelBuilder.Entity("MudSharp.Models.RacesWeaponAttacks", b =>
                {
                    b.Property<long>("RaceId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("WeaponAttackId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("BodypartId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Quality")
                        .HasColumnType("int(11)");

                    b.HasKey("RaceId", "WeaponAttackId", "BodypartId")
                        .HasName("PRIMARY");

                    b.HasIndex("BodypartId")
                        .HasName("FK_Races_WeaponAttacks_BodypartProto_idx");

                    b.HasIndex("WeaponAttackId")
                        .HasName("FK_Races_WeaponAttacks_WeaponAttacks_idx");

                    b.ToTable("Races_WeaponAttacks");
                });

            modelBuilder.Entity("MudSharp.Models.RandomNameProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Gender")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("NameCultureId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("NameCultureId")
                        .HasName("FK_RandomNameProfiles_NameCulture");

                    b.ToTable("RandomNameProfiles");
                });

            modelBuilder.Entity("MudSharp.Models.RandomNameProfilesDiceExpressions", b =>
                {
                    b.Property<long>("RandomNameProfileId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("NameUsage")
                        .HasColumnType("int(11)");

                    b.Property<string>("DiceExpression")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("RandomNameProfileId", "NameUsage")
                        .HasName("PRIMARY");

                    b.ToTable("RandomNameProfiles_DiceExpressions");
                });

            modelBuilder.Entity("MudSharp.Models.RandomNameProfilesElements", b =>
                {
                    b.Property<long>("RandomNameProfileId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("NameUsage")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("Weighting")
                        .HasColumnType("int(11)");

                    b.HasKey("RandomNameProfileId", "NameUsage", "Name")
                        .HasName("PRIMARY");

                    b.ToTable("RandomNameProfiles_Elements");
                });

            modelBuilder.Entity("MudSharp.Models.RangedCover", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("ActionDescriptionString")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<int>("CoverExtent")
                        .HasColumnType("int(11)");

                    b.Property<ulong>("CoverStaysWhileMoving")
                        .HasColumnType("bit(1)");

                    b.Property<int>("CoverType")
                        .HasColumnType("int(11)");

                    b.Property<string>("DescriptionString")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<int>("HighestPositionState")
                        .HasColumnType("int(11)");

                    b.Property<int>("MaximumSimultaneousCovers")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.HasKey("Id");

                    b.ToTable("RangedCovers");
                });

            modelBuilder.Entity("MudSharp.Models.RangedWeaponTypes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("AccuracyBonusExpression")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<double>("AimBonusLostPerShot")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.Property<ulong>("AlwaysRequiresTwoHandsToWield")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<int>("AmmunitionCapacity")
                        .HasColumnType("int(11)");

                    b.Property<int>("AmmunitionLoadType")
                        .HasColumnType("int(11)");

                    b.Property<int>("BaseAimDifficulty")
                        .HasColumnType("int(11)");

                    b.Property<int>("Classification")
                        .HasColumnType("int(11)");

                    b.Property<double>("CoverBonus")
                        .HasColumnType("double");

                    b.Property<string>("DamageBonusExpression")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<int>("DefaultRangeInRooms")
                        .HasColumnType("int(11)");

                    b.Property<double>("FireDelay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'0.5'");

                    b.Property<long>("FireTraitId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("FireableInMelee")
                        .HasColumnType("bit(1)");

                    b.Property<double>("LoadDelay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'0.5'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<long>("OperateTraitId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("RangedWeaponType")
                        .HasColumnType("int(11)");

                    b.Property<double>("ReadyDelay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'0.1'");

                    b.Property<ulong>("RequiresFreeHandToReady")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<string>("SpecificAmmunitionGrade")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<double>("StaminaPerLoadStage")
                        .HasColumnType("double");

                    b.Property<double>("StaminaToFire")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("FireTraitId")
                        .HasName("FK_RangedWeaponTypes_TraitDefinitions_Fire_idx");

                    b.HasIndex("OperateTraitId")
                        .HasName("FK_RangedWeaponTypes_TraitDefinitions_Operate_idx");

                    b.ToTable("RangedWeaponTypes");
                });

            modelBuilder.Entity("MudSharp.Models.Rank", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ClanId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("InsigniaGameItemId")
                        .HasColumnType("bigint(20)");

                    b.Property<int?>("InsigniaGameItemRevnum")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("Privileges")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("RankNumber")
                        .HasColumnType("int(11)");

                    b.Property<string>("RankPath")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("ClanId")
                        .HasName("FK_Ranks_Clans");

                    b.HasIndex("InsigniaGameItemId", "InsigniaGameItemRevnum")
                        .HasName("FK_Ranks_GameItemProtos");

                    b.ToTable("Ranks");
                });

            modelBuilder.Entity("MudSharp.Models.RanksAbbreviations", b =>
                {
                    b.Property<long>("RankId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long?>("FutureProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Order")
                        .HasColumnType("int(11)");

                    b.HasKey("RankId", "Abbreviation")
                        .HasName("PRIMARY");

                    b.HasIndex("FutureProgId")
                        .HasName("FK_Ranks_Abbreviations_FutureProgs");

                    b.ToTable("Ranks_Abbreviations");
                });

            modelBuilder.Entity("MudSharp.Models.RanksPaygrade", b =>
                {
                    b.Property<long>("RankId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("PaygradeId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Order")
                        .HasColumnType("int(11)");

                    b.HasKey("RankId", "PaygradeId")
                        .HasName("PRIMARY");

                    b.HasIndex("PaygradeId")
                        .HasName("FK_Ranks_Paygrades_Paygrades");

                    b.ToTable("Ranks_Paygrades");
                });

            modelBuilder.Entity("MudSharp.Models.RanksTitle", b =>
                {
                    b.Property<long>("RankId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long?>("FutureProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Order")
                        .HasColumnType("int(11)");

                    b.HasKey("RankId", "Title")
                        .HasName("PRIMARY");

                    b.HasIndex("FutureProgId")
                        .HasName("FK_Ranks_Titles_FutureProgs");

                    b.ToTable("Ranks_Titles");
                });

            modelBuilder.Entity("MudSharp.Models.RegionalClimate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ClimateModelId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("RegionalClimates");
                });

            modelBuilder.Entity("MudSharp.Models.RegionalClimatesSeason", b =>
                {
                    b.Property<long>("RegionalClimateId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("SeasonId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("TemperatureInfo")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("RegionalClimateId", "SeasonId")
                        .HasName("PRIMARY");

                    b.HasIndex("SeasonId")
                        .HasName("FK_RegionalClimates_Seasons_Seasons_idx");

                    b.ToTable("RegionalClimates_Seasons");
                });

            modelBuilder.Entity("MudSharp.Models.Room", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<int>("X")
                        .HasColumnType("int(11)");

                    b.Property<int>("Y")
                        .HasColumnType("int(11)");

                    b.Property<int>("Z")
                        .HasColumnType("int(11)");

                    b.Property<long>("ZoneId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("ZoneId")
                        .HasName("FK_Rooms_Zones");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("MudSharp.Models.Script", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<double>("DocumentLengthModifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.Property<double>("InkUseModifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.Property<long>("KnowledgeId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("KnownScriptDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("UnknownScriptDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("KnowledgeId")
                        .HasName("FK_Scripts_Knowledges_idx");

                    b.ToTable("Scripts");
                });

            modelBuilder.Entity("MudSharp.Models.ScriptsDesignedLanguage", b =>
                {
                    b.Property<long>("ScriptId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ScriptId", "LanguageId")
                        .HasName("PRIMARY");

                    b.HasIndex("LanguageId")
                        .HasName("FK_Scripts_DesignedLanguages_Languages_idx");

                    b.ToTable("Scripts_DesignedLanguages");
                });

            modelBuilder.Entity("MudSharp.Models.Season", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<int>("CelestialDayOnset")
                        .HasColumnType("int(11)");

                    b.Property<long>("CelestialId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("CelestialId")
                        .HasName("FK_Seasons_Celestials_idx");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("MudSharp.Models.Shard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<double>("MinimumTerrestrialLux")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("SkyDescriptionTemplateId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("SphericalRadiusMetres")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'6371000'");

                    b.HasKey("Id");

                    b.HasIndex("SkyDescriptionTemplateId")
                        .HasName("FK_Shards_SkyDescriptionTemplates");

                    b.ToTable("Shards");
                });

            modelBuilder.Entity("MudSharp.Models.ShardsCalendars", b =>
                {
                    b.Property<long>("ShardId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CalendarId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ShardId", "CalendarId")
                        .HasName("PRIMARY");

                    b.ToTable("Shards_Calendars");
                });

            modelBuilder.Entity("MudSharp.Models.ShardsCelestials", b =>
                {
                    b.Property<long>("ShardId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CelestialId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ShardId", "CelestialId")
                        .HasName("PRIMARY");

                    b.ToTable("Shards_Celestials");
                });

            modelBuilder.Entity("MudSharp.Models.ShardsClocks", b =>
                {
                    b.Property<long>("ShardId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ClockId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ShardId", "ClockId")
                        .HasName("PRIMARY");

                    b.ToTable("Shards_Clocks");
                });

            modelBuilder.Entity("MudSharp.Models.ShieldType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<double>("BlockBonus")
                        .HasColumnType("double");

                    b.Property<long>("BlockTraitId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("EffectiveArmourTypeId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<double>("StaminaPerBlock")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("BlockTraitId")
                        .HasName("FK_ShieldTypes_TraitDefinitions_idx");

                    b.HasIndex("EffectiveArmourTypeId")
                        .HasName("FK_ShieldTypes_ArmourTypes_idx");

                    b.ToTable("ShieldTypes");
                });

            modelBuilder.Entity("MudSharp.Models.Shop", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CanShopProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("EconomicZoneId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("EmployeeRecords")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<ulong>("IsTrading")
                        .HasColumnType("bit(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long?>("StockroomCellId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("WhyCannotShopProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("WorkshopCellId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("CanShopProgId")
                        .HasName("FK_Shops_FutureProgs_Can_idx");

                    b.HasIndex("CurrencyId")
                        .HasName("FK_Shops_Currencies_idx");

                    b.HasIndex("EconomicZoneId")
                        .HasName("FK_Shops_EconomicZonesa_idx");

                    b.HasIndex("StockroomCellId")
                        .HasName("FK_Shops_Cells_Stockroom_idx");

                    b.HasIndex("WhyCannotShopProgId")
                        .HasName("FK_Shops_FutureProgs_WhyCant_idx");

                    b.HasIndex("WorkshopCellId")
                        .HasName("FK_Shops_Cells_Workshop_idx");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("MudSharp.Models.ShopFinancialPeriodResult", b =>
                {
                    b.Property<long>("EconomicZoneId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ShopId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("FinancialPeriodId")
                        .HasColumnType("bigint(20)");

                    b.Property<decimal>("GrossRevenue")
                        .HasColumnType("decimal(10,0)");

                    b.Property<decimal>("NetRevenue")
                        .HasColumnType("decimal(10,0)");

                    b.Property<decimal>("ProfitsTax")
                        .HasColumnType("decimal(10,0)");

                    b.Property<decimal>("SalesTax")
                        .HasColumnType("decimal(10,0)");

                    b.HasKey("EconomicZoneId", "ShopId", "FinancialPeriodId")
                        .HasName("PRIMARY");

                    b.HasIndex("FinancialPeriodId")
                        .HasName("FK_ShopFinancialPeriodResults_FinancialPeriods_idx");

                    b.HasIndex("ShopId")
                        .HasName("FK_ShopFinancialPeriodResults_Shops_idx");

                    b.ToTable("ShopFinancialPeriodResults");
                });

            modelBuilder.Entity("MudSharp.Models.ShopTransactionRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("MudDateTime")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<decimal>("PretaxValue")
                        .HasColumnType("decimal(10,0)");

                    b.Property<DateTime>("RealDateTime")
                        .HasColumnType("datetime");

                    b.Property<long>("ShopId")
                        .HasColumnType("bigint(20)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(10,0)");

                    b.Property<long?>("ThirdPartyId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId")
                        .HasName("FK_ShopTransactionRecords_Currencies_idx");

                    b.HasIndex("ShopId")
                        .HasName("FK_ShopTransactionRecords_Shops_idx");

                    b.ToTable("ShopTransactionRecords");
                });

            modelBuilder.Entity("MudSharp.Models.ShopsStoreroomCell", b =>
                {
                    b.Property<long>("ShopId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CellId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ShopId", "CellId")
                        .HasName("PRIMARY");

                    b.HasIndex("CellId")
                        .HasName("FK_Shops_StoreroomCells_Cells_idx");

                    b.ToTable("Shops_StoreroomCells");
                });

            modelBuilder.Entity("MudSharp.Models.ShopsTill", b =>
                {
                    b.Property<long>("ShopId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("GameItemId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ShopId", "GameItemId")
                        .HasName("PRIMARY");

                    b.HasIndex("GameItemId")
                        .HasName("FK_ShopTills_GameItems_idx");

                    b.ToTable("ShopsTills");
                });

            modelBuilder.Entity("MudSharp.Models.SkyDescriptionTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("SkyDescriptionTemplates");
                });

            modelBuilder.Entity("MudSharp.Models.SkyDescriptionTemplatesValue", b =>
                {
                    b.Property<long>("SkyDescriptionTemplateId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("LowerBound")
                        .HasColumnType("double");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<double>("UpperBound")
                        .HasColumnType("double");

                    b.HasKey("SkyDescriptionTemplateId", "LowerBound")
                        .HasName("PRIMARY");

                    b.ToTable("SkyDescriptionTemplates_Values");
                });

            modelBuilder.Entity("MudSharp.Models.Social", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("DirectionTargetEcho")
                        .HasColumnType("varchar(1000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long?>("FutureProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("MultiTargetEcho")
                        .HasColumnType("varchar(1000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("NoTargetEcho")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("OneTargetEcho")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Name")
                        .HasName("PRIMARY");

                    b.HasIndex("FutureProgId")
                        .HasName("FK_Socials_FutureProgs");

                    b.ToTable("Socials");
                });

            modelBuilder.Entity("MudSharp.Models.StackDecorator", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("varchar(10000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(1000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("StackDecorators");
                });

            modelBuilder.Entity("MudSharp.Models.StaticConfiguration", b =>
                {
                    b.Property<string>("SettingName")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("SettingName")
                        .HasName("PRIMARY");

                    b.ToTable("StaticConfigurations");
                });

            modelBuilder.Entity("MudSharp.Models.StaticString", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("StaticStrings");
                });

            modelBuilder.Entity("MudSharp.Models.SurgicalProcedure", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("AbortProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("BaseCheckBonus")
                        .HasColumnType("double");

                    b.Property<int>("Check")
                        .HasColumnType("int(11)");

                    b.Property<long?>("CompletionProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Definition")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<long?>("KnowledgeRequiredId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("MedicalSchool")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<int>("Procedure")
                        .HasColumnType("int(11)");

                    b.Property<string>("ProcedureBeginEmote")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<string>("ProcedureDescriptionEmote")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<string>("ProcedureGerund")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<string>("ProcedureName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<long?>("UsabilityProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("WhyCannotUseProgId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("AbortProgId")
                        .HasName("FK_SurgicalProcedures_FutureProgs_AbortProg_idx");

                    b.HasIndex("CompletionProgId")
                        .HasName("FK_SurgicalProcedures_FutureProgs_CompletionProg_idx");

                    b.HasIndex("KnowledgeRequiredId")
                        .HasName("FK_SurgicalProcedures_Knowledges_idx");

                    b.HasIndex("UsabilityProgId")
                        .HasName("FK_SurgicalProcedures_FutureProgs_Usability_idx");

                    b.HasIndex("WhyCannotUseProgId")
                        .HasName("FK_SurgicalProcedures_FutureProgs_WhyCannotUseProg_idx");

                    b.ToTable("SurgicalProcedures");
                });

            modelBuilder.Entity("MudSharp.Models.SurgicalProcedurePhase", b =>
                {
                    b.Property<long>("SurgicalProcedureId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("PhaseNumber")
                        .HasColumnType("int(11)");

                    b.Property<double>("BaseLengthInSeconds")
                        .HasColumnType("double");

                    b.Property<string>("InventoryActionPlan")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<long?>("OnPhaseProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("PhaseEmote")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<string>("PhaseSpecialEffects")
                        .HasColumnType("varchar(500)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.HasKey("SurgicalProcedureId", "PhaseNumber")
                        .HasName("PRIMARY");

                    b.HasIndex("OnPhaseProgId")
                        .HasName("FK_SurgicalProcedurePhases_FutureProgs_OnPhaseProg_idx");

                    b.ToTable("SurgicalProcedurePhases");
                });

            modelBuilder.Entity("MudSharp.Models.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("ShouldSeeProgId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId")
                        .HasName("FK_Tags_Parent_idx");

                    b.HasIndex("ShouldSeeProgId")
                        .HasName("FK_Tags_Futureprogs_idx");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("MudSharp.Models.Terrain", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("AtmosphereId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("AtmosphereType")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("DefaultCellOutdoorsType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValue(0);

                    b.Property<ulong>("DefaultTerrain")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<long>("ForagableProfileId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("HideDifficulty")
                        .HasColumnType("int(11)");

                    b.Property<double>("InfectionMultiplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("InfectionType")
                        .HasColumnType("int(11)");

                    b.Property<int>("InfectionVirulence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'5'");

                    b.Property<double>("MovementRate")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("SpotDifficulty")
                        .HasColumnType("int(11)");

                    b.Property<double>("StaminaCost")
                        .HasColumnType("double");

                    b.Property<string>("TerrainBehaviourMode")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("TerrainEditorColour")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'#FFFFFFFF'")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("TerrainEditorText")
                        .HasColumnType("varchar(45)");

                    b.Property<long?>("WeatherControllerId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("WeatherControllerId")
                        .HasName("FK_Terrains_WeatherControllers_idx");

                    b.ToTable("Terrains");
                });

            modelBuilder.Entity("MudSharp.Models.TerrainsRangedCovers", b =>
                {
                    b.Property<long>("TerrainId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("RangedCoverId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("TerrainId", "RangedCoverId")
                        .HasName("PRIMARY");

                    b.HasIndex("RangedCoverId")
                        .HasName("FK_Terrains_RangedCovers_RangedCovers_idx");

                    b.ToTable("Terrains_RangedCovers");
                });

            modelBuilder.Entity("MudSharp.Models.TimeZoneInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(100)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Display")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<decimal>("Order")
                        .HasColumnType("decimal(18,2)");

                    b.HasKey("Id");

                    b.ToTable("TimeZoneInfos");
                });

            modelBuilder.Entity("MudSharp.Models.Timezone", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ClockId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("OffsetHours")
                        .HasColumnType("int(11)");

                    b.Property<int>("OffsetMinutes")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("ClockId")
                        .HasName("FK_Timezones_Clocks");

                    b.ToTable("Timezones");
                });

            modelBuilder.Entity("MudSharp.Models.Trait", b =>
                {
                    b.Property<long>("BodyId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("TraitDefinitionId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("AdditionalValue")
                        .HasColumnType("double");

                    b.Property<double>("Value")
                        .HasColumnType("double");

                    b.HasKey("BodyId", "TraitDefinitionId")
                        .HasName("PRIMARY");

                    b.HasIndex("TraitDefinitionId")
                        .HasName("FK_Traits_TraitDefinitions");

                    b.ToTable("Traits");
                });

            modelBuilder.Entity("MudSharp.Models.TraitDecorator", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Contents")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("TraitDecorators");
                });

            modelBuilder.Entity("MudSharp.Models.TraitDefinition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Alias")
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long?>("AvailabilityProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("BranchMultiplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("ChargenBlurb")
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("DecoratorId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("DerivedType")
                        .HasColumnType("int(11)");

                    b.Property<ulong>("DisplayAsSubAttribute")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<int>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("1");

                    b.Property<long?>("ExpressionId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong?>("Hidden")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<long?>("ImproverId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("LearnDifficulty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'7'");

                    b.Property<long?>("LearnableProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<ulong>("ShowInAttributeCommand")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<ulong>("ShowInScoreCommand")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<int>("TeachDifficulty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'7'");

                    b.Property<long?>("TeachableProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("TraitGroup")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("Type")
                        .HasColumnType("int(11)");

                    b.Property<string>("ValueExpression")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilityProgId")
                        .HasName("FK_TraitDefinitions_AvailabilityProg");

                    b.HasIndex("ExpressionId")
                        .HasName("FK_TraitDefinitions_TraitExpression");

                    b.HasIndex("LearnableProgId")
                        .HasName("FK_TraitDefinitions_LearnableProg_idx");

                    b.HasIndex("TeachableProgId")
                        .HasName("FK_TraitDefinitions_TeachableProg_idx");

                    b.ToTable("TraitDefinitions");
                });

            modelBuilder.Entity("MudSharp.Models.TraitDefinitionsChargenResources", b =>
                {
                    b.Property<long>("TraitDefinitionId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ChargenResourceId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("RequirementOnly")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<int>("Amount")
                        .HasColumnType("int(11)");

                    b.HasKey("TraitDefinitionId", "ChargenResourceId", "RequirementOnly")
                        .HasName("PRIMARY");

                    b.HasIndex("ChargenResourceId")
                        .HasName("FK_TraitDefinitions_ChargenResources_ChargenResources");

                    b.ToTable("TraitDefinitions_ChargenResources");
                });

            modelBuilder.Entity("MudSharp.Models.TraitExpression", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Expression")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(200)")
                        .HasDefaultValueSql("'Unnamed Expression'")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("TraitExpression");
                });

            modelBuilder.Entity("MudSharp.Models.TraitExpressionParameters", b =>
                {
                    b.Property<string>("Parameter")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("TraitExpressionId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("CanBranch")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<ulong>("CanImprove")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<long>("TraitDefinitionId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Parameter", "TraitExpressionId")
                        .HasName("PRIMARY");

                    b.HasIndex("TraitDefinitionId")
                        .HasName("FK_TraitExpressionParameters_TraitDefinitions");

                    b.HasIndex("TraitExpressionId")
                        .HasName("FK_TraitExpressionParameters_TraitExpression");

                    b.ToTable("TraitExpressionParameters");
                });

            modelBuilder.Entity("MudSharp.Models.UnitOfMeasure", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Abbreviations")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<double>("BaseMultiplier")
                        .HasColumnType("double");

                    b.Property<ulong>("DefaultUnitForSystem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<ulong>("Describer")
                        .HasColumnType("bit(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<double>("PostMultiplierBaseOffset")
                        .HasColumnType("double");

                    b.Property<double>("PreMultiplierBaseOffset")
                        .HasColumnType("double");

                    b.Property<string>("PrimaryAbbreviation")
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<ulong>("SpaceBetween")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<string>("System")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("Type")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.ToTable("UnitOfMeasure");
                });

            modelBuilder.Entity("MudSharp.Models.VariableDefault", b =>
                {
                    b.Property<long>("OwnerType")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Property")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("DefaultValue")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("OwnerType", "Property")
                        .HasName("PRIMARY");

                    b.ToTable("VariableDefaults");
                });

            modelBuilder.Entity("MudSharp.Models.VariableDefinition", b =>
                {
                    b.Property<long>("OwnerType")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Property")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("ContainedType")
                        .HasColumnType("bigint(20)");

                    b.HasKey("OwnerType", "Property")
                        .HasName("PRIMARY");

                    b.ToTable("VariableDefinitions");
                });

            modelBuilder.Entity("MudSharp.Models.VariableValue", b =>
                {
                    b.Property<long>("ReferenceType")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ReferenceId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("ReferenceProperty")
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("ValueDefinition")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("ValueType")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ReferenceType", "ReferenceId", "ReferenceProperty")
                        .HasName("PRIMARY");

                    b.ToTable("VariableValues");
                });

            modelBuilder.Entity("MudSharp.Models.WeaponAttack", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<int>("Alignment")
                        .HasColumnType("int(11)");

                    b.Property<double>("BaseAngleOfIncidence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1.5708'");

                    b.Property<int>("BaseAttackerDifficulty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'5'");

                    b.Property<int>("BaseBlockDifficulty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'5'");

                    b.Property<double>("BaseDelay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("BaseDodgeDifficulty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'5'");

                    b.Property<int>("BaseParryDifficulty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'5'");

                    b.Property<long?>("BodypartShapeId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("DamageExpressionId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("DamageType")
                        .HasColumnType("int(11)");

                    b.Property<int>("ExertionLevel")
                        .HasColumnType("int(11)");

                    b.Property<long?>("FutureProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("HandednessOptions")
                        .HasColumnType("int(11)");

                    b.Property<long>("Intentions")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("MoveType")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<int>("Orientation")
                        .HasColumnType("int(11)");

                    b.Property<long>("PainExpressionId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("RecoveryDifficultyFailure")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'5'");

                    b.Property<int>("RecoveryDifficultySuccess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'5'");

                    b.Property<double>("StaminaCost")
                        .HasColumnType("double");

                    b.Property<long>("StunExpressionId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Verb")
                        .HasColumnType("int(11)");

                    b.Property<long?>("WeaponTypeId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("Weighting")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("Id");

                    b.HasIndex("DamageExpressionId")
                        .HasName("FK_WeaponAttacks_TraitExpression_Damage_idx");

                    b.HasIndex("FutureProgId")
                        .HasName("FK_WeaponAttacks_FutureProgs_idx");

                    b.HasIndex("PainExpressionId")
                        .HasName("FK_WeaponAttacks_TraitExpression_Pain_idx");

                    b.HasIndex("StunExpressionId")
                        .HasName("FK_WeaponAttacks_TraitExpression_Stun_idx");

                    b.HasIndex("WeaponTypeId")
                        .HasName("FK_WeaponAttacks_WeaponTypes_idx");

                    b.ToTable("WeaponAttacks");
                });

            modelBuilder.Entity("MudSharp.Models.WeaponType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("AttackTraitId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Classification")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_unicode_ci");

                    b.Property<int>("ParryBonus")
                        .HasColumnType("int(11)");

                    b.Property<long?>("ParryTraitId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Reach")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'1'");

                    b.Property<double>("StaminaPerParry")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("AttackTraitId")
                        .HasName("FK_WeaponTypes_TraitDefinitions_Attack_idx");

                    b.HasIndex("ParryTraitId")
                        .HasName("FK_WeaponTypes_TraitDefinitions_Parry_idx");

                    b.ToTable("WeaponTypes");
                });

            modelBuilder.Entity("MudSharp.Models.WearProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long>("BodyPrototypeId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<ulong>("RequireContainerIsEmpty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("'Direct'")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("WearAction1st")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("'put'")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("WearAction3rd")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("'puts'")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("WearAffix")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("'on'")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("WearStringInventory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("'worn on'")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("WearlocProfiles")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.ToTable("WearProfiles");
                });

            modelBuilder.Entity("MudSharp.Models.WearableSize", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long>("BodyPrototypeId")
                        .HasColumnType("bigint(20)");

                    b.Property<double?>("Height")
                        .HasColumnType("double");

                    b.Property<ulong>("OneSizeFitsAll")
                        .HasColumnType("bit(1)");

                    b.Property<double?>("TraitValue")
                        .HasColumnType("double");

                    b.Property<double?>("Weight")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("WearableSizes");
                });

            modelBuilder.Entity("MudSharp.Models.WearableSizeParameterRule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long>("BodyProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("HeightLinearRatios")
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<ulong>("IgnoreTrait")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<double>("MaxHeightFactor")
                        .HasColumnType("double");

                    b.Property<double?>("MaxTraitFactor")
                        .HasColumnType("double");

                    b.Property<double?>("MaxWeightFactor")
                        .HasColumnType("double");

                    b.Property<double>("MinHeightFactor")
                        .HasColumnType("double");

                    b.Property<double?>("MinTraitFactor")
                        .HasColumnType("double");

                    b.Property<double>("MinWeightFactor")
                        .HasColumnType("double");

                    b.Property<long?>("TraitId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("TraitVolumeRatios")
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("WeightVolumeRatios")
                        .HasColumnType("varchar(4000)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("TraitId")
                        .HasName("FK_WearableSizeParameterRule_TraitDefinitions");

                    b.ToTable("WearableSizeParameterRule");
                });

            modelBuilder.Entity("MudSharp.Models.WeatherController", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CelestialId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("ConsecutiveUnchangedPeriods")
                        .HasColumnType("int(11)");

                    b.Property<long>("CurrentSeasonId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CurrentWeatherEventId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("Elevation")
                        .HasColumnType("double");

                    b.Property<long>("FeedClockId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("FeedClockTimeZoneId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("HighestRecentPrecipitationLevel")
                        .HasColumnType("int(11)");

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<double>("Longitude")
                        .HasColumnType("double");

                    b.Property<int>("MinutesCounter")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("PeriodsSinceHighestPrecipitation")
                        .HasColumnType("int(11)");

                    b.Property<double>("Radius")
                        .HasColumnType("double");

                    b.Property<long>("RegionalClimateId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("CelestialId")
                        .HasName("FK_WeatherControllers_Celestials_idx");

                    b.HasIndex("CurrentSeasonId")
                        .HasName("FK_WeatherControllers_Seasons_idx");

                    b.HasIndex("CurrentWeatherEventId")
                        .HasName("FK_WeatherControllers_WeatherEvents_idx");

                    b.HasIndex("FeedClockId")
                        .HasName("FK_WeatherControllers_Clocks_idx");

                    b.HasIndex("FeedClockTimeZoneId")
                        .HasName("FK_WeatherControllers_TimeZones_idx");

                    b.HasIndex("RegionalClimateId")
                        .HasName("FK_WeatherControllers_RegionalClimates_idx");

                    b.ToTable("WeatherControllers");
                });

            modelBuilder.Entity("MudSharp.Models.WeatherEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long?>("CountsAsId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("LightLevelMultiplier")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<ulong>("ObscuresViewOfSky")
                        .HasColumnType("bit(1)");

                    b.Property<ulong>("PermittedAtAfternoon")
                        .HasColumnType("bit(1)");

                    b.Property<ulong>("PermittedAtDawn")
                        .HasColumnType("bit(1)");

                    b.Property<ulong>("PermittedAtDusk")
                        .HasColumnType("bit(1)");

                    b.Property<ulong>("PermittedAtMorning")
                        .HasColumnType("bit(1)");

                    b.Property<ulong>("PermittedAtNight")
                        .HasColumnType("bit(1)");

                    b.Property<int>("Precipitation")
                        .HasColumnType("int(11)");

                    b.Property<double>("PrecipitationTemperatureEffect")
                        .HasColumnType("double");

                    b.Property<double>("TemperatureEffect")
                        .HasColumnType("double");

                    b.Property<string>("WeatherDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("WeatherEventType")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<string>("WeatherRoomAddendum")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<int>("Wind")
                        .HasColumnType("int(11)");

                    b.Property<double>("WindTemperatureEffect")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("CountsAsId")
                        .HasName("FK_WeatherEvents_WeatherEvents_idx");

                    b.ToTable("WeatherEvents");
                });

            modelBuilder.Entity("MudSharp.Models.WitnessProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<double>("BaseReportingChanceAfternoon")
                        .HasColumnType("double");

                    b.Property<double>("BaseReportingChanceDawn")
                        .HasColumnType("double");

                    b.Property<double>("BaseReportingChanceDusk")
                        .HasColumnType("double");

                    b.Property<double>("BaseReportingChanceMorning")
                        .HasColumnType("double");

                    b.Property<double>("BaseReportingChanceNight")
                        .HasColumnType("double");

                    b.Property<long>("IdentityKnownProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("MinimumSkillToDetermineBiases")
                        .HasColumnType("double");

                    b.Property<double>("MinimumSkillToDetermineTimeOfDay")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("ReportingMultiplierProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("ReportingReliability")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("IdentityKnownProgId")
                        .HasName("FK_WitnessProfiles_IdentityProg_idx");

                    b.HasIndex("ReportingMultiplierProgId")
                        .HasName("FK_WitnessProfiles_MultiplierProg_idx");

                    b.ToTable("WitnessProfiles");
                });

            modelBuilder.Entity("MudSharp.Models.WitnessProfilesCooperatingAuthorities", b =>
                {
                    b.Property<long>("WitnessProfileId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("LegalAuthorityId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("WitnessProfileId", "LegalAuthorityId")
                        .HasName("PRIMARY");

                    b.HasIndex("LegalAuthorityId")
                        .HasName("FK_WitnessProfiles_CooperatingAuthorities_LegalAuthorities_idx");

                    b.ToTable("WitnessProfiles_CooperatingAuthorities");
                });

            modelBuilder.Entity("MudSharp.Models.WitnessProfilesIgnoredCriminalClasses", b =>
                {
                    b.Property<long>("WitnessProfileId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("LegalClassId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("WitnessProfileId", "LegalClassId")
                        .HasName("PRIMARY");

                    b.HasIndex("LegalClassId")
                        .HasName("FK_WitnessProfiles_IgnoredCriminalClasses_LegalClasses_idx");

                    b.ToTable("WitnessProfiles_IgnoredCriminalClasses");
                });

            modelBuilder.Entity("MudSharp.Models.WitnessProfilesIgnoredVictimClasses", b =>
                {
                    b.Property<long>("WitnessProfileId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("LegalClassId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("WitnessProfileId", "LegalClassId")
                        .HasName("PRIMARY");

                    b.HasIndex("LegalClassId")
                        .HasName("FK_WitnessProfiles_IgnoredVictimClasses_LegalClasses_idx");

                    b.ToTable("WitnessProfiles_IgnoredVictimClasses");
                });

            modelBuilder.Entity("MudSharp.Models.Wound", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("ActorOriginId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("BodyId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("BodypartProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("CurrentDamage")
                        .HasColumnType("double");

                    b.Property<double>("CurrentPain")
                        .HasColumnType("double");

                    b.Property<double>("CurrentShock")
                        .HasColumnType("double");

                    b.Property<double>("CurrentStun")
                        .HasColumnType("double");

                    b.Property<int>("DamageType")
                        .HasColumnType("int(11)");

                    b.Property<string>("ExtraInformation")
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.Property<long?>("GameItemId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("Internal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<long?>("LodgedItemId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("OriginalDamage")
                        .HasColumnType("double");

                    b.Property<long?>("ToolOriginId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("WoundType")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .HasAnnotation("MySql:CharSet", "utf8mb4")
                        .HasAnnotation("MySql:Collation", "utf8mb4_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("ActorOriginId")
                        .HasName("FK_Wounds_Characters_idx");

                    b.HasIndex("BodyId")
                        .HasName("FK_Wounds_Bodies_idx");

                    b.HasIndex("GameItemId")
                        .HasName("FK_Wounds_GameItemOwner_idx");

                    b.HasIndex("LodgedItemId")
                        .HasName("FK_Wounds_GameItems_idx");

                    b.HasIndex("ToolOriginId")
                        .HasName("FK_Wounds_GameItems_Tool_idx");

                    b.ToTable("Wounds");
                });

            modelBuilder.Entity("MudSharp.Models.Writing", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<double>("ForgerySkill")
                        .HasColumnType("double");

                    b.Property<double>("HandwritingSkill")
                        .HasColumnType("double");

                    b.Property<int>("ImplementType")
                        .HasColumnType("int(11)");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("LanguageSkill")
                        .HasColumnType("double");

                    b.Property<double>("LiteracySkill")
                        .HasColumnType("double");

                    b.Property<long>("ScriptId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Style")
                        .HasColumnType("int(11)");

                    b.Property<long?>("TrueAuthorId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("WritingColour")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("WritingType")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId")
                        .HasName("FK_Writings_Characters_Author_idx");

                    b.HasIndex("LanguageId")
                        .HasName("FK_Writings_Languages_idx");

                    b.HasIndex("ScriptId")
                        .HasName("FK_Writings_Scripts_idx");

                    b.HasIndex("TrueAuthorId")
                        .HasName("FK_Writings_Characters_TrueAuthor_idx");

                    b.ToTable("Writings");
                });

            modelBuilder.Entity("MudSharp.Models.Zone", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<double>("AmbientLightPollution")
                        .HasColumnType("double");

                    b.Property<long?>("DefaultCellId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("Elevation")
                        .HasColumnType("double");

                    b.Property<long?>("ForagableProfileId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<double>("Longitude")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasAnnotation("MySql:CharSet", "utf8")
                        .HasAnnotation("MySql:Collation", "utf8_general_ci");

                    b.Property<long>("ShardId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("WeatherControllerId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("DefaultCellId")
                        .HasName("FK_Zones_Cells");

                    b.HasIndex("ShardId")
                        .HasName("FK_Zones_Shards");

                    b.HasIndex("WeatherControllerId")
                        .HasName("FK_Zones_WeatherControllers_idx");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("MudSharp.Models.ZonesTimezones", b =>
                {
                    b.Property<long>("ZoneId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ClockId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("TimezoneId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ZoneId", "ClockId", "TimezoneId")
                        .HasName("PRIMARY");

                    b.ToTable("Zones_Timezones");
                });

            modelBuilder.Entity("MudSharp.Models.Accent", b =>
                {
                    b.HasOne("MudSharp.Models.Language", "Language")
                        .WithMany("Accents")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_Accents_Languages")
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Account", b =>
                {
                    b.HasOne("MudSharp.Models.AuthorityGroup", "AuthorityGroup")
                        .WithMany("Accounts")
                        .HasForeignKey("AuthorityGroupId")
                        .HasConstraintName("FK_Accounts_AuthorityGroups");
                });

            modelBuilder.Entity("MudSharp.Models.AccountNote", b =>
                {
                    b.HasOne("MudSharp.Models.Account", "Account")
                        .WithMany("AccountNotesAccount")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_AccountNotes_Accounts")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Account", "Author")
                        .WithMany("AccountNotesAuthor")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK_AccountNotes_Author");
                });

            modelBuilder.Entity("MudSharp.Models.AccountsChargenResources", b =>
                {
                    b.HasOne("MudSharp.Models.Account", "Account")
                        .WithMany("AccountsChargenResources")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_Accounts_ChargenResources_Accounts")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.ChargenResource", "ChargenResource")
                        .WithMany("AccountsChargenResources")
                        .HasForeignKey("ChargenResourceId")
                        .HasConstraintName("FK_Accounts_ChargenResources_ChargenResources")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ActiveProject", b =>
                {
                    b.HasOne("MudSharp.Models.Cell", "Cell")
                        .WithMany("ActiveProjects")
                        .HasForeignKey("CellId")
                        .HasConstraintName("FK_ActiveProjects_Cells");

                    b.HasOne("MudSharp.Models.Character", "Character")
                        .WithMany("ActiveProjects")
                        .HasForeignKey("CharacterId")
                        .HasConstraintName("FK_ActiveProjects_Characters");

                    b.HasOne("MudSharp.Models.ProjectPhase", "CurrentPhase")
                        .WithMany("ActiveProjects")
                        .HasForeignKey("CurrentPhaseId")
                        .HasConstraintName("FK_ActiveProjects_ProjectPhases")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Project", "Project")
                        .WithMany("ActiveProjects")
                        .HasForeignKey("ProjectId", "ProjectRevisionNumber")
                        .HasConstraintName("FK_ActiveProjects_Projects")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ActiveProjectLabour", b =>
                {
                    b.HasOne("MudSharp.Models.ActiveProject", "ActiveProject")
                        .WithMany("ActiveProjectLabours")
                        .HasForeignKey("ActiveProjectId")
                        .HasConstraintName("FK_ActiveProjectLabours_ActiveProjects")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.ProjectLabourRequirement", "ProjectLabourRequirements")
                        .WithMany("ActiveProjectLabours")
                        .HasForeignKey("ProjectLabourRequirementsId")
                        .HasConstraintName("FK_ActiveProjectLabours_ProjectLabourRequirements")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ActiveProjectMaterial", b =>
                {
                    b.HasOne("MudSharp.Models.ActiveProject", "ActiveProject")
                        .WithMany("ActiveProjectMaterials")
                        .HasForeignKey("ActiveProjectId")
                        .HasConstraintName("FK_ActiveProjectMaterials_ActiveProjects")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.ProjectMaterialRequirement", "ProjectMaterialRequirements")
                        .WithMany("ActiveProjectMaterials")
                        .HasForeignKey("ProjectMaterialRequirementsId")
                        .HasConstraintName("FK_ActiveProjectMaterials_ProjectMaterialRequirements")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Ally", b =>
                {
                    b.HasOne("MudSharp.Models.Character", "AllyCharacter")
                        .WithMany("AlliesAlly")
                        .HasForeignKey("AllyId")
                        .HasConstraintName("FK_Allies_Characters_Target")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Character", "OwnerCharacter")
                        .WithMany("AlliesCharacter")
                        .HasForeignKey("CharacterId")
                        .HasConstraintName("FK_Allies_Characters_Owner")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Appointment", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "CanNominateProg")
                        .WithMany()
                        .HasForeignKey("CanNominateProgId")
                        .HasConstraintName("FK_Appointments_CanNominateProg");

                    b.HasOne("MudSharp.Models.Clan", "Clan")
                        .WithMany("Appointments")
                        .HasForeignKey("ClanId")
                        .HasConstraintName("FK_Appointments_Clans")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Rank", "MinimumRank")
                        .WithMany("AppointmentsMinimumRank")
                        .HasForeignKey("MinimumRankId")
                        .HasConstraintName("FK_Appointments_Ranks")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.Rank", "MinimumRankToAppoint")
                        .WithMany("AppointmentsMinimumRankToAppoint")
                        .HasForeignKey("MinimumRankToAppointId")
                        .HasConstraintName("FK_Appointments_Ranks_2");

                    b.HasOne("MudSharp.Models.FutureProg", "NumberOfVotesProg")
                        .WithMany()
                        .HasForeignKey("NumberOfVotesProgId")
                        .HasConstraintName("FK_Appointments_NumberOfVotesProg");

                    b.HasOne("MudSharp.Models.Appointment", "ParentAppointment")
                        .WithMany("InverseParentAppointment")
                        .HasForeignKey("ParentAppointmentId")
                        .HasConstraintName("FK_Appointments_ParentAppointment");

                    b.HasOne("MudSharp.Models.Paygrade", "Paygrade")
                        .WithMany("Appointments")
                        .HasForeignKey("PaygradeId")
                        .HasConstraintName("FK_Appointments_Paygrades")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.FutureProg", "WhyCantNominateProg")
                        .WithMany()
                        .HasForeignKey("WhyCantNominateProgId")
                        .HasConstraintName("FK_Appointments_WhyCantNominateProg");

                    b.HasOne("MudSharp.Models.GameItemProto", "InsigniaGameItem")
                        .WithMany("Appointments")
                        .HasForeignKey("InsigniaGameItemId", "InsigniaGameItemRevnum")
                        .HasConstraintName("FK_Appointments_GameItemProtos");
                });

            modelBuilder.Entity("MudSharp.Models.AppointmentsAbbreviations", b =>
                {
                    b.HasOne("MudSharp.Models.Appointment", "Appointment")
                        .WithMany("AppointmentsAbbreviations")
                        .HasForeignKey("AppointmentId")
                        .HasConstraintName("FK_Appointments_Abbreviations_Appointments")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.FutureProg", "FutureProg")
                        .WithMany("AppointmentsAbbreviations")
                        .HasForeignKey("FutureProgId")
                        .HasConstraintName("FK_Appointments_Abbreviations_FutureProgs");
                });

            modelBuilder.Entity("MudSharp.Models.AppointmentsTitles", b =>
                {
                    b.HasOne("MudSharp.Models.Appointment", "Appointment")
                        .WithMany("AppointmentsTitles")
                        .HasForeignKey("AppointmentId")
                        .HasConstraintName("FK_Appointments_Titles_Appointments")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.FutureProg", "FutureProg")
                        .WithMany("AppointmentsTitles")
                        .HasForeignKey("FutureProgId")
                        .HasConstraintName("FK_Appointments_Titles_FutureProgs");
                });

            modelBuilder.Entity("MudSharp.Models.Areas", b =>
                {
                    b.HasOne("MudSharp.Models.WeatherController", "WeatherController")
                        .WithMany("Areas")
                        .HasForeignKey("WeatherControllerId")
                        .HasConstraintName("FK_Areas_WeatherControllers")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("MudSharp.Models.AreasRooms", b =>
                {
                    b.HasOne("MudSharp.Models.Areas", "Area")
                        .WithMany("AreasRooms")
                        .HasForeignKey("AreaId")
                        .HasConstraintName("FK_Areas_Rooms_Areas")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Room", "Room")
                        .WithMany("AreasRooms")
                        .HasForeignKey("RoomId")
                        .HasConstraintName("FK_Areas_Rooms_Rooms")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Ban", b =>
                {
                    b.HasOne("MudSharp.Models.Account", "BannerAccount")
                        .WithMany("Bans")
                        .HasForeignKey("BannerAccountId")
                        .HasConstraintName("FK_Bans_Accounts")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("MudSharp.Models.BloodModelsBloodtypes", b =>
                {
                    b.HasOne("MudSharp.Models.BloodModel", "BloodModel")
                        .WithMany("BloodModelsBloodtypes")
                        .HasForeignKey("BloodModelId")
                        .HasConstraintName("FK_BloodModels_Bloodtypes_BloodModels")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Bloodtype", "Bloodtype")
                        .WithMany("BloodModelsBloodtypes")
                        .HasForeignKey("BloodtypeId")
                        .HasConstraintName("FK_BloodModels_Bloodtypes_Bloodtypes")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.BloodtypesBloodtypeAntigens", b =>
                {
                    b.HasOne("MudSharp.Models.BloodtypeAntigen", "BloodtypeAntigen")
                        .WithMany("BloodtypesBloodtypeAntigens")
                        .HasForeignKey("BloodtypeAntigenId")
                        .HasConstraintName("FK_Bloodtypes_BloodtypeAntigens_BloodtypeAntigens")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Bloodtype", "Bloodtype")
                        .WithMany("BloodtypesBloodtypeAntigens")
                        .HasForeignKey("BloodtypeId")
                        .HasConstraintName("FK_Bloodtypes_BloodtypeAntigens_Bloodtypes")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.BoardPost", b =>
                {
                    b.HasOne("MudSharp.Models.Account", "Author")
                        .WithMany("BoardPosts")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK_BoardsPosts_Accounts")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.Board", "Board")
                        .WithMany("BoardPosts")
                        .HasForeignKey("BoardId")
                        .HasConstraintName("FK_BoardPosts_Boards")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.BodiesGameItems", b =>
                {
                    b.HasOne("MudSharp.Models.Body", "Body")
                        .WithMany("BodiesGameItems")
                        .HasForeignKey("BodyId")
                        .HasConstraintName("FK_Bodies_GameItems_Bodies")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.GameItem", "GameItem")
                        .WithMany("BodiesGameItems")
                        .HasForeignKey("GameItemId")
                        .HasConstraintName("FK_Bodies_GameItems_GameItems")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.BodiesImplants", b =>
                {
                    b.HasOne("MudSharp.Models.Body", "Body")
                        .WithMany("BodiesImplants")
                        .HasForeignKey("BodyId")
                        .HasConstraintName("FK_Bodies_Implants_Bodies")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.GameItem", "Implant")
                        .WithMany("BodiesImplants")
                        .HasForeignKey("ImplantId")
                        .HasConstraintName("FK_Bodies_Implants_GameItems")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.BodiesProsthetics", b =>
                {
                    b.HasOne("MudSharp.Models.Body", "Body")
                        .WithMany("BodiesProsthetics")
                        .HasForeignKey("BodyId")
                        .HasConstraintName("FK_Bodies_Prosthetics_Bodies")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.GameItem", "Prosthetic")
                        .WithMany("BodiesProsthetics")
                        .HasForeignKey("ProstheticId")
                        .HasConstraintName("FK_Bodies_Prosthetics_GameItems")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.BodiesSeveredParts", b =>
                {
                    b.HasOne("MudSharp.Models.Body", "Bodies")
                        .WithMany("BodiesSeveredParts")
                        .HasForeignKey("BodiesId")
                        .HasConstraintName("FK_Bodies_SeveredParts_Bodies")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.BodypartProto", "BodypartProto")
                        .WithMany("BodiesSeveredParts")
                        .HasForeignKey("BodypartProtoId")
                        .HasConstraintName("FK_Bodies_SeveredParts_BodypartProtos")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Body", b =>
                {
                    b.HasOne("MudSharp.Models.Bloodtype", "Bloodtype")
                        .WithMany("Bodies")
                        .HasForeignKey("BloodtypeId")
                        .HasConstraintName("FK_Bodies_Bloodtypes")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.Ethnicity", "Ethnicity")
                        .WithMany("Bodies")
                        .HasForeignKey("EthnicityId")
                        .HasConstraintName("FK_Bodies_Ethnicities")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.EntityDescriptionPattern", "FullDescriptionPattern")
                        .WithMany("BodiesFullDescriptionPattern")
                        .HasForeignKey("FullDescriptionPatternId")
                        .HasConstraintName("FK_Bodies_EntityDescriptionPatterns_Full");

                    b.HasOne("MudSharp.Models.Race", "Race")
                        .WithMany("Bodies")
                        .HasForeignKey("RaceId")
                        .HasConstraintName("FK_Bodies_Races")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.EntityDescriptionPattern", "ShortDescriptionPattern")
                        .WithMany("BodiesShortDescriptionPattern")
                        .HasForeignKey("ShortDescriptionPatternId")
                        .HasConstraintName("FK_Bodies_EntityDescriptionPatterns_Short");
                });

            modelBuilder.Entity("MudSharp.Models.BodyDrugDose", b =>
                {
                    b.HasOne("MudSharp.Models.Body", "Body")
                        .WithMany("BodiesDrugDoses")
                        .HasForeignKey("BodyId")
                        .HasConstraintName("FK_Bodies_DrugDoses_Bodies")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Drug", "Drug")
                        .WithMany("BodiesDrugDoses")
                        .HasForeignKey("DrugId")
                        .HasConstraintName("FK_Bodies_DrugDoses_Drugs")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.BodyProto", b =>
                {
                    b.HasOne("MudSharp.Models.BodyProto", "CountsAs")
                        .WithMany("InverseCountsAs")
                        .HasForeignKey("CountsAsId")
                        .HasConstraintName("FK_BodyPrototype_BodyPrototype")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.BodypartProto", "DefaultSmashingBodypart")
                        .WithMany("BodyProtos")
                        .HasForeignKey("DefaultSmashingBodypartId")
                        .HasConstraintName("FK_BodyPrototype_Bodyparts")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.WearableSizeParameterRule", "WearSizeParameter")
                        .WithMany("BodyProtos")
                        .HasForeignKey("WearSizeParameterId")
                        .HasConstraintName("FK_BodyPrototype_WearableSizeParameterRule")
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.BodyProtosAdditionalBodyparts", b =>
                {
                    b.HasOne("MudSharp.Models.BodyProto", "BodyProto")
                        .WithMany("BodyProtosAdditionalBodyparts")
                        .HasForeignKey("BodyProtoId")
                        .HasConstraintName("FK_BodyProtos_AdditionalBodyparts_BodyProtos")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.BodypartProto", "Bodypart")
                        .WithMany("BodyProtosAdditionalBodyparts")
                        .HasForeignKey("BodypartId")
                        .HasConstraintName("FK_BodyProtos_AdditionalBodyparts_BodypartProto")
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.BodypartGroupDescribersBodyProtos", b =>
                {
                    b.HasOne("MudSharp.Models.BodyProto", "BodyProto")
                        .WithMany("BodypartGroupDescribersBodyProtos")
                        .HasForeignKey("BodyProtoId")
                        .HasConstraintName("FK_BGD_BodyProtos_BodyProtos")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.BodypartGroupDescriber", "BodypartGroupDescriber")
                        .WithMany("BodypartGroupDescribersBodyProtos")
                        .HasForeignKey("BodypartGroupDescriberId")
                        .HasConstraintName("FK_BGD_BodyProtos_BodypartGroupDescribers")
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.BodypartGroupDescribersBodypartProtos", b =>
                {
                    b.HasOne("MudSharp.Models.BodypartGroupDescriber", "BodypartGroupDescriber")
                        .WithMany("BodypartGroupDescribersBodypartProtos")
                        .HasForeignKey("BodypartGroupDescriberId")
                        .HasConstraintName("FK_BGD_BodypartProtos_BodypartGroupDescribers")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.BodypartProto", "BodypartProto")
                        .WithMany("BodypartGroupDescribersBodypartProtos")
                        .HasForeignKey("BodypartProtoId")
                        .HasConstraintName("FK_BGD_BodypartProtos_BodypartProto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.BodypartGroupDescribersShapeCount", b =>
                {
                    b.HasOne("MudSharp.Models.BodypartGroupDescriber", "BodypartGroupDescriptionRule")
                        .WithMany("BodypartGroupDescribersShapeCount")
                        .HasForeignKey("BodypartGroupDescriptionRuleId")
                        .HasConstraintName("FK_BGD_ShapeCount_BodypartGroupDescribers")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.BodypartShape", "Target")
                        .WithMany("BodypartGroupDescribersShapeCount")
                        .HasForeignKey("TargetId")
                        .HasConstraintName("FK_BGD_ShapeCount_BodypartShape")
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.BodypartInternalInfos", b =>
                {
                    b.HasOne("MudSharp.Models.BodypartProto", "BodypartProto")
                        .WithMany("BodypartInternalInfosBodypartProto")
                        .HasForeignKey("BodypartProtoId")
                        .HasConstraintName("FK_BodypartInternalInfos_BodypartProtos")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.BodypartProto", "InternalPart")
                        .WithMany("BodypartInternalInfosInternalPart")
                        .HasForeignKey("InternalPartId")
                        .HasConstraintName("FK_BodypartInternalInfos_BodypartProtos_Internal")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.BodypartProto", b =>
                {
                    b.HasOne("MudSharp.Models.ArmourType", "ArmourType")
                        .WithMany("BodypartProto")
                        .HasForeignKey("ArmourTypeId")
                        .HasConstraintName("FK_BodypartProto_ArmourTypes")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.BodyProto", "Body")
                        .WithMany("BodypartProtos")
                        .HasForeignKey("BodyId")
                        .HasConstraintName("FK_BodypartProto_BodyPrototype")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.BodypartShape", "BodypartShape")
                        .WithMany("BodypartProto")
                        .HasForeignKey("BodypartShapeId")
                        .HasConstraintName("FK_BodypartProto_BodypartShape")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.BodypartProto", "CountAs")
                        .WithMany("InverseCountAs")
                        .HasForeignKey("CountAsId")
                        .HasConstraintName("FK_BodypartProto_BodypartProto")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.Material", "DefaultMaterial")
                        .WithMany("BodypartProto")
                        .HasForeignKey("DefaultMaterialId")
                        .HasConstraintName("FK_BodypartProto_Materials")
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.BodypartProtoAlignmentHits", b =>
                {
                    b.HasOne("MudSharp.Models.BodypartProto", "BodypartProto")
                        .WithMany("BodypartProtoAlignmentHits")
                        .HasForeignKey("BodypartProtoId")
                        .HasConstraintName("FK_BodypartProto_AlignmentHits_BodypartProto")
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.BodypartProtoBodypartProtoUpstream", b =>
                {
                    b.HasOne("MudSharp.Models.BodypartProto", "ChildNavigation")
                        .WithMany("BodypartProtoBodypartProtoUpstreamChildNavigation")
                        .HasForeignKey("Child")
                        .HasConstraintName("FKChild")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.BodypartProto", "ParentNavigation")
                        .WithMany("BodypartProtoBodypartProtoUpstreamParentNavigation")
                        .HasForeignKey("Parent")
                        .HasConstraintName("FKParent")
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.BodypartProtoOrientationHits", b =>
                {
                    b.HasOne("MudSharp.Models.BodypartProto", "BodypartProto")
                        .WithMany("BodypartProtoOrientationHits")
                        .HasForeignKey("BodypartProtoId")
                        .HasConstraintName("FK_BodypartProto_OrientationHits_BodypartProto")
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.BoneOrganCoverage", b =>
                {
                    b.HasOne("MudSharp.Models.BodypartProto", "Bone")
                        .WithMany("BoneOrganCoveragesBone")
                        .HasForeignKey("BoneId")
                        .HasConstraintName("FK_BoneOrganCoverages_BodypartProto_Bone")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.BodypartProto", "Organ")
                        .WithMany("BoneOrganCoveragesOrgan")
                        .HasForeignKey("OrganId")
                        .HasConstraintName("FK_BoneOrganCoverages_BodypartProto_Organ")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ButcheryProductItems", b =>
                {
                    b.HasOne("MudSharp.Models.ButcheryProducts", "ButcheryProduct")
                        .WithMany("ButcheryProductItems")
                        .HasForeignKey("ButcheryProductId")
                        .HasConstraintName("FK_ButcheryProductItems_ButcheryProducts")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ButcheryProducts", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "CanProduceProg")
                        .WithMany("ButcheryProducts")
                        .HasForeignKey("CanProduceProgId")
                        .HasConstraintName("FK_ButcheryProducts_FutureProgs")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.BodyProto", "TargetBody")
                        .WithMany("ButcheryProducts")
                        .HasForeignKey("TargetBodyId")
                        .HasConstraintName("FK_ButcheryProducts_BodyProtos")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ButcheryProductsBodypartProtos", b =>
                {
                    b.HasOne("MudSharp.Models.BodypartProto", "BodypartProto")
                        .WithMany("ButcheryProductsBodypartProtos")
                        .HasForeignKey("BodypartProtoId")
                        .HasConstraintName("FK_ButcheryProducts_BodypartProtos_BodypartProtos")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.ButcheryProducts", "ButcheryProduct")
                        .WithMany("ButcheryProductsBodypartProtos")
                        .HasForeignKey("ButcheryProductId")
                        .HasConstraintName("FK_ButcheryProducts_BodypartProtos_ButcheryProducts")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Cell", b =>
                {
                    b.HasOne("MudSharp.Models.CellOverlay", "CurrentOverlay")
                        .WithMany("Cells")
                        .HasForeignKey("CurrentOverlayId")
                        .HasConstraintName("FK_Cells_CellOverlays")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.Room", "Room")
                        .WithMany("Cells")
                        .HasForeignKey("RoomId")
                        .HasConstraintName("FK_Cells_Rooms")
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.CellMagicResource", b =>
                {
                    b.HasOne("MudSharp.Models.Cell", "Cell")
                        .WithMany("CellsMagicResources")
                        .HasForeignKey("CellId")
                        .HasConstraintName("FK_Cells_MagicResources_Cells")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.MagicResource", "MagicResource")
                        .WithMany("CellsMagicResources")
                        .HasForeignKey("MagicResourceId")
                        .HasConstraintName("FK_Cells_MagicResources_MagicResources")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.CellOverlay", b =>
                {
                    b.HasOne("MudSharp.Models.Cell", "Cell")
                        .WithMany("CellOverlays")
                        .HasForeignKey("CellId")
                        .HasConstraintName("FK_CellOverlays_Cells")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.HearingProfile", "HearingProfile")
                        .WithMany("CellOverlays")
                        .HasForeignKey("HearingProfileId")
                        .HasConstraintName("FK_CellOverlays_HearingProfiles")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.Terrain", "Terrain")
                        .WithMany("CellOverlays")
                        .HasForeignKey("TerrainId")
                        .HasConstraintName("FK_CellOverlays_Terrains")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.CellOverlayPackage", "CellOverlayPackage")
                        .WithMany("CellOverlays")
                        .HasForeignKey("CellOverlayPackageId", "CellOverlayPackageRevisionNumber")
                        .HasConstraintName("FK_CellOverlays_CellOverlayPackages")
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.CellOverlayExit", b =>
                {
                    b.HasOne("MudSharp.Models.CellOverlay", "CellOverlay")
                        .WithMany("CellOverlaysExits")
                        .HasForeignKey("CellOverlayId")
                        .HasConstraintName("FK_CellOverlays_Exits_CellOverlays")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Exit", "Exit")
                        .WithMany("CellOverlaysExits")
                        .HasForeignKey("ExitId")
                        .HasConstraintName("FK_CellOverlays_Exits_Exits")
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.CellOverlayPackage", b =>
                {
                    b.HasOne("MudSharp.Models.EditableItem", "EditableItem")
                        .WithMany("CellOverlayPackages")
                        .HasForeignKey("EditableItemId")
                        .HasConstraintName("FK_CellOverlayPackages_EditableItems")
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.CellsForagableYield", b =>
                {
                    b.HasOne("MudSharp.Models.Cell", "Cell")
                        .WithMany("CellsForagableYields")
                        .HasForeignKey("CellId")
                        .HasConstraintName("FK_Cells_ForagableYields_Cells")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.CellsGameItems", b =>
                {
                    b.HasOne("MudSharp.Models.Cell", "Cell")
                        .WithMany("CellsGameItems")
                        .HasForeignKey("CellId")
                        .HasConstraintName("FK_Cells_GameItems_Cells")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.GameItem", "GameItem")
                        .WithMany("CellsGameItems")
                        .HasForeignKey("GameItemId")
                        .HasConstraintName("FK_Cells_GameItems_GameItems")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.CellsRangedCovers", b =>
                {
                    b.HasOne("MudSharp.Models.Cell", "Cell")
                        .WithMany("CellsRangedCovers")
                        .HasForeignKey("CellId")
                        .HasConstraintName("FK_Cells_RangedCovers_Cells")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.RangedCover", "RangedCover")
                        .WithMany("CellsRangedCovers")
                        .HasForeignKey("RangedCoverId")
                        .HasConstraintName("FK_Cells_RangedCovers_RangedCovers")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.CellsTags", b =>
                {
                    b.HasOne("MudSharp.Models.Cell", "Cell")
                        .WithMany("CellsTags")
                        .HasForeignKey("CellId")
                        .HasConstraintName("FK_Cells_Tags_Cells")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Tag", "Tag")
                        .WithMany("CellsTags")
                        .HasForeignKey("TagId")
                        .HasConstraintName("FK_Cells_Tags_Tags")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Channel", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "ChannelListenerProg")
                        .WithMany("ChannelsChannelListenerProg")
                        .HasForeignKey("ChannelListenerProgId")
                        .HasConstraintName("FK_Channels_FutureProgs_Listener")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.FutureProg", "ChannelSpeakerProg")
                        .WithMany("ChannelsChannelSpeakerProg")
                        .HasForeignKey("ChannelSpeakerProgId")
                        .HasConstraintName("FK_Channels_FutureProgs_Speaker")
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ChannelCommandWord", b =>
                {
                    b.HasOne("MudSharp.Models.Channel", "Channel")
                        .WithMany("ChannelCommandWords")
                        .HasForeignKey("ChannelId")
                        .HasConstraintName("FK_ChannelCommandWords_Channels")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ChannelIgnorer", b =>
                {
                    b.HasOne("MudSharp.Models.Account", "Account")
                        .WithMany("ChannelIgnorers")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_ChannelIgnorers_Accounts")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Channel", "Channel")
                        .WithMany("ChannelIgnorers")
                        .HasForeignKey("ChannelId")
                        .HasConstraintName("FK_ChannelIgnorers_Channels")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Character", b =>
                {
                    b.HasOne("MudSharp.Models.Account", "Account")
                        .WithMany("Characters")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_Characters_Accounts")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MudSharp.Models.Body", "Body")
                        .WithMany("Characters")
                        .HasForeignKey("BodyId")
                        .HasConstraintName("FK_Characters_Bodies")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Chargen", "Chargen")
                        .WithMany("Characters")
                        .HasForeignKey("ChargenId")
                        .HasConstraintName("FK_Characters_Chargens")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.Culture", "Culture")
                        .WithMany("Characters")
                        .HasForeignKey("CultureId")
                        .HasConstraintName("FK_Characters_Cultures")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Currency", "Currency")
                        .WithMany("Characters")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("FK_Characters_Currencies");

                    b.HasOne("MudSharp.Models.Accent", "CurrentAccent")
                        .WithMany("Characters")
                        .HasForeignKey("CurrentAccentId")
                        .HasConstraintName("FK_Characters_Accents")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.Language", "CurrentLanguage")
                        .WithMany("CharactersCurrentLanguage")
                        .HasForeignKey("CurrentLanguageId")
                        .HasConstraintName("FK_Characters_Languages_Spoken")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.ActiveProject", "CurrentProject")
                        .WithMany("Characters")
                        .HasForeignKey("CurrentProjectId")
                        .HasConstraintName("FK_Characters_ActiveProjects")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.ProjectLabourRequirement", "CurrentProjectLabour")
                        .WithMany("Characters")
                        .HasForeignKey("CurrentProjectLabourId")
                        .HasConstraintName("FK_Characters_ProjectLabourRequirements")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.Script", "CurrentScript")
                        .WithMany("Characters")
                        .HasForeignKey("CurrentScriptId")
                        .HasConstraintName("FK_Characters_Scripts")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.Language", "CurrentWritingLanguage")
                        .WithMany("CharactersCurrentWritingLanguage")
                        .HasForeignKey("CurrentWritingLanguageId")
                        .HasConstraintName("FK_Characters_Languages_Written")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.Cell", "LocationNavigation")
                        .WithMany("Characters")
                        .HasForeignKey("Location")
                        .HasConstraintName("FK_Characters_Cells")
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.CharacterAccent", b =>
                {
                    b.HasOne("MudSharp.Models.Accent", "Accent")
                        .WithMany("CharactersAccents")
                        .HasForeignKey("AccentId")
                        .HasConstraintName("FK_Characters_Accents_Accents")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Character", "Character")
                        .WithMany("CharactersAccents")
                        .HasForeignKey("CharacterId")
                        .HasConstraintName("FK_Characters_Accents_Characters")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.CharacterCombatSetting", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "AvailabilityProg")
                        .WithMany("CharacterCombatSettings")
                        .HasForeignKey("AvailabilityProgId")
                        .HasConstraintName("FK_CharacterCombatSettings_FutureProgs")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.Character", "CharacterOwner")
                        .WithMany("CharacterCombatSettings")
                        .HasForeignKey("CharacterOwnerId")
                        .HasConstraintName("FK_CharacterCombatSettings_Characters")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MudSharp.Models.CharacterIntroTemplate", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "AppliesToCharacterProg")
                        .WithMany("CharacterIntroTemplates")
                        .HasForeignKey("AppliesToCharacterProgId")
                        .HasConstraintName("FK_CharacterIntroTemplates_FutureProgs")
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.CharacterKnowledge", b =>
                {
                    b.HasOne("MudSharp.Models.Character", "Character")
                        .WithMany("CharacterKnowledges")
                        .HasForeignKey("CharacterId")
                        .HasConstraintName("FK_CHARACTERKNOWLEDGES_CHARACTERS")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Knowledge", "Knowledge")
                        .WithMany("CharacterKnowledges")
                        .HasForeignKey("KnowledgeId")
                        .HasConstraintName("FK_CHARACTERKNOWLEDGES_KNOWLEDGES")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.CharacterLog", b =>
                {
                    b.HasOne("MudSharp.Models.Account", "Account")
                        .WithMany("CharacterLog")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_CharacterLog_Accounts")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MudSharp.Models.Cell", "Cell")
                        .WithMany("CharacterLog")
                        .HasForeignKey("CellId")
                        .HasConstraintName("FK_CharacterLog_Cells")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Character", "Character")
                        .WithMany("CharacterLog")
                        .HasForeignKey("CharacterId")
                        .HasConstraintName("FK_CharacterLog_Characters")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Characteristic", b =>
                {
                    b.HasOne("MudSharp.Models.Body", "Body")
                        .WithMany("Characteristics")
                        .HasForeignKey("BodyId")
                        .HasConstraintName("FK_Characteristics_Bodies")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.CharacteristicValue", "CharacteristicValue")
                        .WithMany("Characteristics")
                        .HasForeignKey("CharacteristicId")
                        .HasConstraintName("FK_Characteristics_CharacteristicValues")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.CharacteristicDefinition", b =>
                {
                    b.HasOne("MudSharp.Models.CharacteristicDefinition", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_CharacteristicDefinitions_Parent");
                });

            modelBuilder.Entity("MudSharp.Models.CharacteristicProfile", b =>
                {
                    b.HasOne("MudSharp.Models.CharacteristicDefinition", "TargetDefinition")
                        .WithMany("CharacteristicProfiles")
                        .HasForeignKey("TargetDefinitionId")
                        .HasConstraintName("FK_CharacteristicProfiles_CharacteristicDefinitions")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.CharacteristicValue", b =>
                {
                    b.HasOne("MudSharp.Models.CharacteristicDefinition", "Definition")
                        .WithMany("CharacteristicValues")
                        .HasForeignKey("DefinitionId")
                        .HasConstraintName("FK_CharacteristicValues_CharacteristicDefinitions")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.FutureProg", "FutureProg")
                        .WithMany("CharacteristicValues")
                        .HasForeignKey("FutureProgId")
                        .HasConstraintName("FK_CharacteristicValues_FutureProgs")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("MudSharp.Models.CharactersChargenRoles", b =>
                {
                    b.HasOne("MudSharp.Models.Character", "Character")
                        .WithMany("CharactersChargenRoles")
                        .HasForeignKey("CharacterId")
                        .HasConstraintName("FK_Characters_ChargenRoles_Characters")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.ChargenRole", "ChargenRole")
                        .WithMany("CharactersChargenRoles")
                        .HasForeignKey("ChargenRoleId")
                        .HasConstraintName("FK_Characters_ChargenRoles_ChargenRoles")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.CharactersLanguages", b =>
                {
                    b.HasOne("MudSharp.Models.Character", "Character")
                        .WithMany("CharactersLanguages")
                        .HasForeignKey("CharacterId")
                        .HasConstraintName("FK_Characters_Languages_Characters")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Language", "Language")
                        .WithMany("CharactersLanguages")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_Characters_Languages_Languages")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.CharactersMagicResources", b =>
                {
                    b.HasOne("MudSharp.Models.Character", "Character")
                        .WithMany("CharactersMagicResources")
                        .HasForeignKey("CharacterId")
                        .HasConstraintName("FK_Characters_MagicResources_Characters")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.MagicResource", "MagicResource")
                        .WithMany("CharactersMagicResources")
                        .HasForeignKey("MagicResourceId")
                        .HasConstraintName("FK_Characters_MagicResources_MagicResources")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.CharactersScripts", b =>
                {
                    b.HasOne("MudSharp.Models.Character", "Character")
                        .WithMany("CharactersScripts")
                        .HasForeignKey("CharacterId")
                        .HasConstraintName("FK_Characters_Scripts_Characters")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Script", "Script")
                        .WithMany("CharactersScripts")
                        .HasForeignKey("ScriptId")
                        .HasConstraintName("FK_Characters_Scripts_Scripts")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Chargen", b =>
                {
                    b.HasOne("MudSharp.Models.Account", "Account")
                        .WithMany("Chargens")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_Chargens_Accounts")
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ChargenAdvice", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "ShouldShowAdviceProg")
                        .WithMany("ChargenAdvices")
                        .HasForeignKey("ShouldShowAdviceProgId")
                        .HasConstraintName("FK_ChargenAdvices_FutureProgs")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("MudSharp.Models.ChargenAdvicesChargenRoles", b =>
                {
                    b.HasOne("MudSharp.Models.ChargenAdvice", "ChargenAdvice")
                        .WithMany("ChargenAdvicesChargenRoles")
                        .HasForeignKey("ChargenAdviceId")
                        .HasConstraintName("FK_ChargenAdvices_ChargenRoles_ChargenAdvices")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.ChargenRole", "ChargenRole")
                        .WithMany("ChargenAdvicesChargenRoles")
                        .HasForeignKey("ChargenRoleId")
                        .HasConstraintName("FK_ChargenAdvices_ChargenRoles_ChargenRoles")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ChargenAdvicesCultures", b =>
                {
                    b.HasOne("MudSharp.Models.ChargenAdvice", "ChargenAdvice")
                        .WithMany("ChargenAdvicesCultures")
                        .HasForeignKey("ChargenAdviceId")
                        .HasConstraintName("FK_ChargenAdvices_Cultures_ChargenAdvices")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Culture", "Culture")
                        .WithMany("ChargenAdvicesCultures")
                        .HasForeignKey("CultureId")
                        .HasConstraintName("FK_ChargenAdvices_Cultures_Cultures")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ChargenAdvicesEthnicities", b =>
                {
                    b.HasOne("MudSharp.Models.ChargenAdvice", "ChargenAdvice")
                        .WithMany("ChargenAdvicesEthnicities")
                        .HasForeignKey("ChargenAdviceId")
                        .HasConstraintName("FK_ChargenAdvices_Ethnicities_ChargenAdvices")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Ethnicity", "Ethnicity")
                        .WithMany("ChargenAdvicesEthnicities")
                        .HasForeignKey("EthnicityId")
                        .HasConstraintName("FK_ChargenAdvices_Ethnicities_Ethnicities")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ChargenAdvicesRaces", b =>
                {
                    b.HasOne("MudSharp.Models.ChargenAdvice", "ChargenAdvice")
                        .WithMany("ChargenAdvicesRaces")
                        .HasForeignKey("ChargenAdviceId")
                        .HasConstraintName("FK_ChargenAdvices_Races_ChargenAdvices")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Race", "Race")
                        .WithMany("ChargenAdvicesRaces")
                        .HasForeignKey("RaceId")
                        .HasConstraintName("FK_ChargenAdvices_Races_Races")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ChargenRole", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "AvailabilityProg")
                        .WithMany("ChargenRoles")
                        .HasForeignKey("AvailabilityProgId")
                        .HasConstraintName("FK_ChargenRoles_FutureProgs")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.Account", "Poster")
                        .WithMany("ChargenRoles")
                        .HasForeignKey("PosterId")
                        .HasConstraintName("FK_ChargenRoles_Accounts")
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ChargenRolesApprovers", b =>
                {
                    b.HasOne("MudSharp.Models.Account", "Approver")
                        .WithMany("ChargenRolesApprovers")
                        .HasForeignKey("ApproverId")
                        .HasConstraintName("FK_ChargenRoles_Approvers_Accounts")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.ChargenRole", "ChargenRole")
                        .WithMany("ChargenRolesApprovers")
                        .HasForeignKey("ChargenRoleId")
                        .HasConstraintName("FK_ChargenRoles_Approvers_ChargenRoles")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ChargenRolesClanMemberships", b =>
                {
                    b.HasOne("MudSharp.Models.ChargenRole", "ChargenRole")
                        .WithMany("ChargenRolesClanMemberships")
                        .HasForeignKey("ChargenRoleId")
                        .HasConstraintName("FK_ChargenRoles_ClanMemberships_ChargenRoles")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Clan", "Clan")
                        .WithMany("ChargenRolesClanMemberships")
                        .HasForeignKey("ClanId")
                        .HasConstraintName("FK_ChargenRoles_ClanMemberships_Clans")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Paygrade", "Paygrade")
                        .WithMany()
                        .HasForeignKey("PaygradeId");

                    b.HasOne("MudSharp.Models.Rank", "Rank")
                        .WithMany()
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ChargenRolesClanMembershipsAppointments", b =>
                {
                    b.HasOne("MudSharp.Models.ChargenRolesClanMemberships", "ChargenRolesClanMembership")
                        .WithMany("ChargenRolesClanMembershipsAppointments")
                        .HasForeignKey("ChargenRoleId", "ClanId")
                        .HasConstraintName("FK_CRCMA_ChargenRoles_ClanMemberships")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ChargenRolesCost", b =>
                {
                    b.HasOne("MudSharp.Models.ChargenResource", "ChargenResource")
                        .WithMany("ChargenRolesCosts")
                        .HasForeignKey("ChargenResourceId")
                        .HasConstraintName("FK_ChargenRoles_Costs_ChargenResources")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.ChargenRole", "ChargenRole")
                        .WithMany("ChargenRolesCosts")
                        .HasForeignKey("ChargenRoleId")
                        .HasConstraintName("FK_ChargenRoles_Costs_ChargenRoles")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ChargenRolesCurrency", b =>
                {
                    b.HasOne("MudSharp.Models.ChargenRole", "ChargenRole")
                        .WithMany("ChargenRolesCurrencies")
                        .HasForeignKey("ChargenRoleId")
                        .HasConstraintName("FK_ChargenRoles_Currencies_ChargenRoles")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Currency", "Currency")
                        .WithMany("ChargenRolesCurrencies")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("FK_ChargenRoles_Currencies_Currencies")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ChargenRolesMerit", b =>
                {
                    b.HasOne("MudSharp.Models.ChargenRole", "ChargenRole")
                        .WithMany("ChargenRolesMerits")
                        .HasForeignKey("ChargenRoleId")
                        .HasConstraintName("FK_ChargenRoles_Merits_ChargenRoles")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Merit", "Merit")
                        .WithMany("ChargenRolesMerits")
                        .HasForeignKey("MeritId")
                        .HasConstraintName("FK_ChargenRoles_Merits_Merits")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ChargenRolesTrait", b =>
                {
                    b.HasOne("MudSharp.Models.ChargenRole", "ChargenRole")
                        .WithMany("ChargenRolesTraits")
                        .HasForeignKey("ChargenRoleId")
                        .HasConstraintName("FK_ChargenRoles_Traits_ChargenRoles")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.TraitDefinition", "Trait")
                        .WithMany("ChargenRolesTraits")
                        .HasForeignKey("TraitId")
                        .HasConstraintName("FK_ChargenRoles_Traits_Currencies")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ChargenScreenStoryboardDependentStage", b =>
                {
                    b.HasOne("MudSharp.Models.ChargenScreenStoryboard", "Owner")
                        .WithMany("DependentStages")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("FK_ChargenScreenStoryboardDependentStages_Owner")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Check", b =>
                {
                    b.HasOne("MudSharp.Models.CheckTemplate", "CheckTemplate")
                        .WithMany("Checks")
                        .HasForeignKey("CheckTemplateId")
                        .HasConstraintName("FK_Checks_CheckTemplates")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.TraitExpression", "TraitExpression")
                        .WithMany("Checks")
                        .HasForeignKey("TraitExpressionId")
                        .HasConstraintName("FK_Checks_TraitExpression")
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.CheckTemplateDifficulty", b =>
                {
                    b.HasOne("MudSharp.Models.CheckTemplate", "CheckTemplate")
                        .WithMany("CheckTemplateDifficulties")
                        .HasForeignKey("CheckTemplateId")
                        .HasConstraintName("FK_CheckTemplateDifficulties_CheckTemplates")
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Clan", b =>
                {
                    b.HasOne("MudSharp.Models.Calendar", "Calendar")
                        .WithMany("Clans")
                        .HasForeignKey("CalendarId")
                        .HasConstraintName("FK_Clans_Calendars")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.FutureProg", "OnPayProg")
                        .WithMany("Clans")
                        .HasForeignKey("OnPayProgId")
                        .HasConstraintName("FK_Clans_FutureProgs")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.Clan", "ParentClan")
                        .WithMany("InverseParentClan")
                        .HasForeignKey("ParentClanId")
                        .HasConstraintName("FK_Clans_Parent");

                    b.HasOne("MudSharp.Models.Character", "Paymaster")
                        .WithMany("Clans")
                        .HasForeignKey("PaymasterId")
                        .HasConstraintName("FK_Clans_Characters")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("MudSharp.Models.ClanAdministrationCell", b =>
                {
                    b.HasOne("MudSharp.Models.Cell", "Cell")
                        .WithMany("ClansAdministrationCells")
                        .HasForeignKey("CellId")
                        .HasConstraintName("FK_Clans_AdministrationCells_Cells")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Clan", "Clan")
                        .WithMany("ClansAdministrationCells")
                        .HasForeignKey("ClanId")
                        .HasConstraintName("FK_Clans_AdministrationCells_Clans")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ClanMembership", b =>
                {
                    b.HasOne("MudSharp.Models.Character", "Character")
                        .WithMany("ClanMembershipsCharacter")
                        .HasForeignKey("CharacterId")
                        .HasConstraintName("FK_ClanMemberships_Characters")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Clan", "Clan")
                        .WithMany("ClanMemberships")
                        .HasForeignKey("ClanId")
                        .HasConstraintName("FK_ClanMemberships_Clans")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Character", "Manager")
                        .WithMany("ClanMembershipsManager")
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("FK_ClanMemberships_Manager");
                });

            modelBuilder.Entity("MudSharp.Models.ClanMembershipBackpay", b =>
                {
                    b.HasOne("MudSharp.Models.Currency", "Currency")
                        .WithMany("ClanMembershipsBackpay")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("FK_ClanMemberships_Backpay_Currencies")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.ClanMembership", "C")
                        .WithMany("ClanMembershipsBackpay")
                        .HasForeignKey("ClanId", "CharacterId")
                        .HasConstraintName("FK_ClanMemberships_Backpay_ClanMemberships")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ClanMembershipsAppointments", b =>
                {
                    b.HasOne("MudSharp.Models.Appointment", "Appointment")
                        .WithMany("ClanMembershipsAppointments")
                        .HasForeignKey("AppointmentId")
                        .HasConstraintName("FK_ClanMemberships_Appointments_Appointments")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.ClanMembership", "ClanMembership")
                        .WithMany("ClanMembershipsAppointments")
                        .HasForeignKey("ClanId", "CharacterId")
                        .HasConstraintName("FK_ClanMemberships_Appointments_ClanMemberships")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ClanTreasuryCell", b =>
                {
                    b.HasOne("MudSharp.Models.Cell", "Cell")
                        .WithMany("ClansTreasuryCells")
                        .HasForeignKey("CellId")
                        .HasConstraintName("FK_Clans_TreasuryCells_Cells")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Clan", "Clan")
                        .WithMany("ClansTreasuryCells")
                        .HasForeignKey("ClanId")
                        .HasConstraintName("FK_Clans_TreasuryCells_Clans")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Coin", b =>
                {
                    b.HasOne("MudSharp.Models.Currency", "Currency")
                        .WithMany("Coins")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("FK_Coins_Currencies")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.CombatMessage", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "Prog")
                        .WithMany("CombatMessages")
                        .HasForeignKey("ProgId")
                        .HasConstraintName("FK_CombatMessages_FutureProgs")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("MudSharp.Models.CombatMessagesWeaponAttacks", b =>
                {
                    b.HasOne("MudSharp.Models.CombatMessage", "CombatMessage")
                        .WithMany("CombatMessagesWeaponAttacks")
                        .HasForeignKey("CombatMessageId")
                        .HasConstraintName("FK_CombatMessages_WeaponAttacks_CombatMessages")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.WeaponAttack", "WeaponAttack")
                        .WithMany("CombatMessagesWeaponAttacks")
                        .HasForeignKey("WeaponAttackId")
                        .HasConstraintName("FK_CombatMessages_WeaponAttacks_WeaponAttacks")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Craft", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "AppearInCraftsListProg")
                        .WithMany("CraftsAppearInCraftsListProg")
                        .HasForeignKey("AppearInCraftsListProgId")
                        .HasConstraintName("FK_Crafts_FutureProgs_AppearInCraftsListProg");

                    b.HasOne("MudSharp.Models.FutureProg", "CanUseProg")
                        .WithMany("CraftsCanUseProg")
                        .HasForeignKey("CanUseProgId")
                        .HasConstraintName("FK_Crafts_FutureProgs_CanUseProg")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.TraitDefinition", "CheckTrait")
                        .WithMany("Crafts")
                        .HasForeignKey("CheckTraitId")
                        .HasConstraintName("FK_Crafts_TraitDefinitions");

                    b.HasOne("MudSharp.Models.EditableItem", "EditableItem")
                        .WithMany("Crafts")
                        .HasForeignKey("EditableItemId")
                        .HasConstraintName("FK_Crafts_EditableItems")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.FutureProg", "OnUseProgCancel")
                        .WithMany("CraftsOnUseProgCancel")
                        .HasForeignKey("OnUseProgCancelId")
                        .HasConstraintName("FK_Crafts_FutureProgs_OnUseProgCancel")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.FutureProg", "OnUseProgComplete")
                        .WithMany("CraftsOnUseProgComplete")
                        .HasForeignKey("OnUseProgCompleteId")
                        .HasConstraintName("FK_Crafts_FutureProgs_OnUseProgComplete")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.FutureProg", "OnUseProgStart")
                        .WithMany("CraftsOnUseProgStart")
                        .HasForeignKey("OnUseProgStartId")
                        .HasConstraintName("FK_Crafts_FutureProgs_OnUseProgStart")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.FutureProg", "WhyCannotUseProg")
                        .WithMany("CraftsWhyCannotUseProg")
                        .HasForeignKey("WhyCannotUseProgId")
                        .HasConstraintName("FK_Crafts_FutureProgs_WhyCannotUseProg")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("MudSharp.Models.CraftInput", b =>
                {
                    b.HasOne("MudSharp.Models.Craft", "Craft")
                        .WithMany("CraftInputs")
                        .HasForeignKey("CraftId", "CraftRevisionNumber")
                        .HasConstraintName("FK_CraftInputs_Crafts")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.CraftPhase", b =>
                {
                    b.HasOne("MudSharp.Models.Craft", "Craft")
                        .WithMany("CraftPhases")
                        .HasForeignKey("CraftPhaseId", "CraftPhaseRevisionNumber")
                        .HasConstraintName("FK_CraftPhases_Crafts")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.CraftProduct", b =>
                {
                    b.HasOne("MudSharp.Models.Craft", "Craft")
                        .WithMany("CraftProducts")
                        .HasForeignKey("CraftId", "CraftRevisionNumber")
                        .HasConstraintName("FK_CraftProducts_Crafts")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.CraftTool", b =>
                {
                    b.HasOne("MudSharp.Models.Craft", "Craft")
                        .WithMany("CraftTools")
                        .HasForeignKey("CraftId", "CraftRevisionNumber")
                        .HasConstraintName("FK_CraftTools_Crafts")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Crime", b =>
                {
                    b.HasOne("MudSharp.Models.Character", "Accuser")
                        .WithMany("CrimesAccuser")
                        .HasForeignKey("AccuserId")
                        .HasConstraintName("FK_Crimes_Accuser")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.Character", "Criminal")
                        .WithMany("CrimesCriminal")
                        .HasForeignKey("CriminalId")
                        .HasConstraintName("FK_Crimes_Criminal")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Law", "Law")
                        .WithMany("Crimes")
                        .HasForeignKey("LawId")
                        .HasConstraintName("FK_Crimes_Laws")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Cell", "Location")
                        .WithMany("Crimes")
                        .HasForeignKey("LocationId")
                        .HasConstraintName("FK_Crimes_Location")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.Character", "Victim")
                        .WithMany("CrimesVictim")
                        .HasForeignKey("VictimId")
                        .HasConstraintName("FK_Crimes_Victim")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("MudSharp.Models.Culture", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "AvailabilityProg")
                        .WithMany("CulturesAvailabilityProg")
                        .HasForeignKey("AvailabilityProgId")
                        .HasConstraintName("FK_Cultures_AvailabilityProg")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.NameCulture", "NameCulture")
                        .WithMany("Cultures")
                        .HasForeignKey("NameCultureId")
                        .HasConstraintName("FK_Cultures_NameCulture")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.FutureProg", "SkillStartingValueProg")
                        .WithMany("CulturesSkillStartingValueProg")
                        .HasForeignKey("SkillStartingValueProgId")
                        .HasConstraintName("FK_Cultures_SkillStartingProg")
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.CulturesChargenResources", b =>
                {
                    b.HasOne("MudSharp.Models.ChargenResource", "ChargenResource")
                        .WithMany("CulturesChargenResources")
                        .HasForeignKey("ChargenResourceId")
                        .HasConstraintName("FK_Cultures_ChargenResources_ChargenResources")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Culture", "Culture")
                        .WithMany("CulturesChargenResources")
                        .HasForeignKey("CultureId")
                        .HasConstraintName("FK_Cultures_ChargenResources_Races")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.CurrencyDescriptionPattern", b =>
                {
                    b.HasOne("MudSharp.Models.Currency", "Currency")
                        .WithMany("CurrencyDescriptionPatterns")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("FK_CurrencyDescriptionPatterns_Currencies")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.FutureProg", "FutureProg")
                        .WithMany("CurrencyDescriptionPatterns")
                        .HasForeignKey("FutureProgId")
                        .HasConstraintName("FK_CurrencyDescriptionPatterns_FutureProgs")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MudSharp.Models.CurrencyDescriptionPatternElement", b =>
                {
                    b.HasOne("MudSharp.Models.CurrencyDescriptionPattern", "CurrencyDescriptionPattern")
                        .WithMany("CurrencyDescriptionPatternElements")
                        .HasForeignKey("CurrencyDescriptionPatternId")
                        .HasConstraintName("FK_CDPE_CurrencyDescriptionPatterns")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.CurrencyDivision", "CurrencyDivision")
                        .WithMany("CurrencyDescriptionPatternElements")
                        .HasForeignKey("CurrencyDivisionId")
                        .HasConstraintName("FK_CDPE_CurrencyDivisions")
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.CurrencyDescriptionPatternElementSpecialValues", b =>
                {
                    b.HasOne("MudSharp.Models.CurrencyDescriptionPatternElement", "CurrencyDescriptionPatternElement")
                        .WithMany("CurrencyDescriptionPatternElementSpecialValues")
                        .HasForeignKey("CurrencyDescriptionPatternElementId")
                        .HasConstraintName("FK_CDPESV_CDPE")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.CurrencyDivision", b =>
                {
                    b.HasOne("MudSharp.Models.Currency", "Currency")
                        .WithMany("CurrencyDivisions")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("FK_CurrencyDivisions_Currencies")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.CurrencyDivisionAbbreviation", b =>
                {
                    b.HasOne("MudSharp.Models.CurrencyDivision", "CurrencyDivision")
                        .WithMany("CurrencyDivisionAbbreviations")
                        .HasForeignKey("CurrencyDivisionId")
                        .HasConstraintName("FK_CurrencyDivisionAbbreviations_CurrencyDivisions")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.DefaultHook", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "FutureProg")
                        .WithMany("DefaultHooks")
                        .HasForeignKey("FutureProgId")
                        .HasConstraintName("FK_DefaultHooks_Futureprogs")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Hooks", "Hook")
                        .WithMany("DefaultHooks")
                        .HasForeignKey("HookId")
                        .HasConstraintName("FK_DefaultHooks_Hooks")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.DisfigurementTemplate", b =>
                {
                    b.HasOne("MudSharp.Models.EditableItem", "EditableItem")
                        .WithMany("DisfigurementTemplates")
                        .HasForeignKey("EditableItemId")
                        .HasConstraintName("FK_DisfigurementTemplates_EditableItems")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Door", b =>
                {
                    b.HasOne("MudSharp.Models.Lock", "LockedWithNavigation")
                        .WithMany("Doors")
                        .HasForeignKey("LockedWith")
                        .HasConstraintName("FK_Doors_Locks");
                });

            modelBuilder.Entity("MudSharp.Models.Drawing", b =>
                {
                    b.HasOne("MudSharp.Models.Character", "Author")
                        .WithMany("Drawings")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK_Drawings_Characters")
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Dream", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "CanDreamProg")
                        .WithMany("DreamsCanDreamProg")
                        .HasForeignKey("CanDreamProgId")
                        .HasConstraintName("FK_Dreams_FutureProgs_CanDream")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.FutureProg", "OnDreamProg")
                        .WithMany("DreamsOnDreamProg")
                        .HasForeignKey("OnDreamProgId")
                        .HasConstraintName("FK_Dreams_FutureProgs_OnDream")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.FutureProg", "OnWakeDuringDreamingProg")
                        .WithMany("DreamsOnWakeDuringDreamingProg")
                        .HasForeignKey("OnWakeDuringDreamingProgId")
                        .HasConstraintName("FK_Dreams_FutureProgs_OnWake")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("MudSharp.Models.DreamPhase", b =>
                {
                    b.HasOne("MudSharp.Models.Dream", "Dream")
                        .WithMany("DreamPhases")
                        .HasForeignKey("DreamId")
                        .HasConstraintName("FK_Dream_Phases_Dreams")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.DreamsAlreadyDreamt", b =>
                {
                    b.HasOne("MudSharp.Models.Character", "Character")
                        .WithMany("DreamsAlreadyDreamt")
                        .HasForeignKey("CharacterId")
                        .HasConstraintName("FK_Dreams_Dreamt_Characters")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Dream", "Dream")
                        .WithMany("DreamsAlreadyDreamt")
                        .HasForeignKey("DreamId")
                        .HasConstraintName("FK_Dreams_Dreamt_Dreams")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.DreamsCharacters", b =>
                {
                    b.HasOne("MudSharp.Models.Character", "Character")
                        .WithMany("DreamsCharacters")
                        .HasForeignKey("CharacterId")
                        .HasConstraintName("FK_Dreams_Characters_Characters")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Dream", "Dream")
                        .WithMany("DreamsCharacters")
                        .HasForeignKey("DreamId")
                        .HasConstraintName("FK_Dreams_Characters_Dreams")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.DrugIntensity", b =>
                {
                    b.HasOne("MudSharp.Models.Drug", "Drug")
                        .WithMany("DrugsIntensities")
                        .HasForeignKey("DrugId")
                        .HasConstraintName("FK_Drugs_DrugIntensities")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Dub", b =>
                {
                    b.HasOne("MudSharp.Models.Character", "Character")
                        .WithMany("Dubs")
                        .HasForeignKey("CharacterId")
                        .HasConstraintName("FK_Dubs_Characters")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.EconomicZone", b =>
                {
                    b.HasOne("MudSharp.Models.Currency", "Currency")
                        .WithMany("EconomicZones")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("FK_EconomicZones_Currencies")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.FinancialPeriod", "CurrentFinancialPeriod")
                        .WithMany("EconomicZones")
                        .HasForeignKey("CurrentFinancialPeriodId")
                        .HasConstraintName("FK_EconomicZones_FinancialPeriods")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.Calendar", "ReferenceCalendar")
                        .WithMany("EconomicZones")
                        .HasForeignKey("ReferenceCalendarId")
                        .HasConstraintName("FK_EconomicZones_Calendars")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.Clock", "ReferenceClock")
                        .WithMany("EconomicZones")
                        .HasForeignKey("ReferenceClockId")
                        .HasConstraintName("FK_EconomicZones_Clocks")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Timezone", "ReferenceClockNavigation")
                        .WithMany("EconomicZones")
                        .HasForeignKey("ReferenceClockId")
                        .HasConstraintName("FK_EconomicZones_Timezones")
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.EconomicZoneRevenue", b =>
                {
                    b.HasOne("MudSharp.Models.EconomicZone", "EconomicZone")
                        .WithMany("EconomicZoneRevenues")
                        .HasForeignKey("EconomicZoneId")
                        .HasConstraintName("FK_EconomicZoneRevenues")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.FinancialPeriod", "FinancialPeriod")
                        .WithMany("EconomicZoneRevenues")
                        .HasForeignKey("FinancialPeriodId")
                        .HasConstraintName("FK_EconomicZoneRevenues_FinancialPeriods")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.EconomicZoneShopTax", b =>
                {
                    b.HasOne("MudSharp.Models.EconomicZone", "EconomicZone")
                        .WithMany("EconomicZoneShopTaxes")
                        .HasForeignKey("EconomicZoneId")
                        .HasConstraintName("FK_EconomicZoneShopTaxes_EconomicZones")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Shop", "Shop")
                        .WithMany("EconomicZoneShopTaxes")
                        .HasForeignKey("ShopId")
                        .HasConstraintName("FK_EconomicZoneShopTaxes_Shops")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.EconomicZoneTax", b =>
                {
                    b.HasOne("MudSharp.Models.EconomicZone", "EconomicZone")
                        .WithMany("EconomicZoneTaxes")
                        .HasForeignKey("EconomicZoneId")
                        .HasConstraintName("FK_EconomicZoneTaxes_EconomicZones")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.FutureProg", "MerchandiseFilterProg")
                        .WithMany()
                        .HasForeignKey("MerchandiseFilterProgId")
                        .HasConstraintName("FK_EconomicZoneTaxes_FutureProgs");
                });

            modelBuilder.Entity("MudSharp.Models.Election", b =>
                {
                    b.HasOne("MudSharp.Models.Appointment", "Appointment")
                        .WithMany("Elections")
                        .HasForeignKey("AppointmentId")
                        .HasConstraintName("FK_Elections_Appointments")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ElectionNominee", b =>
                {
                    b.HasOne("MudSharp.Models.Election", "Election")
                        .WithMany("ElectionNominees")
                        .HasForeignKey("ElectionId")
                        .HasConstraintName("FK_ElectionsNominees_Elections")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.ClanMembership", "Nominee")
                        .WithMany()
                        .HasForeignKey("NomineeClanId", "NomineeId")
                        .HasConstraintName("FK_ElectionsNominees_ClanMemberships")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ElectionVote", b =>
                {
                    b.HasOne("MudSharp.Models.Election", "Election")
                        .WithMany("ElectionVotes")
                        .HasForeignKey("ElectionId")
                        .HasConstraintName("FK_ElectionsVotes_Elections")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.ClanMembership", "Nominee")
                        .WithMany()
                        .HasForeignKey("NomineeClanId", "NomineeId")
                        .HasConstraintName("FK_ElectionsVotes_Nominees")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.ClanMembership", "Voter")
                        .WithMany()
                        .HasForeignKey("VoterClanId", "VoterId")
                        .HasConstraintName("FK_ElectionsVotes_Voters")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.EnforcementAuthoritiesAccusableClasses", b =>
                {
                    b.HasOne("MudSharp.Models.EnforcementAuthority", "EnforcementAuthority")
                        .WithMany("EnforcementAuthoritiesAccusableClasses")
                        .HasForeignKey("EnforcementAuthorityId")
                        .HasConstraintName("FK_EnforcementAuthorities_AccusableClasses_Enforce")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.LegalClass", "LegalClass")
                        .WithMany("EnforcementAuthoritiesAccusableClasses")
                        .HasForeignKey("LegalClassId")
                        .HasConstraintName("FK_EnforcementAuthorities_AccusableClasses_LegalClasses")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.EnforcementAuthoritiesArrestableClasses", b =>
                {
                    b.HasOne("MudSharp.Models.EnforcementAuthority", "EnforcementAuthority")
                        .WithMany("EnforcementAuthoritiesArrestableClasses")
                        .HasForeignKey("EnforcementAuthorityId")
                        .HasConstraintName("FK_EnforcementAuthorities_ArrestableClasses_Enforce")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.LegalClass", "LegalClass")
                        .WithMany("EnforcementAuthoritiesArrestableClasses")
                        .HasForeignKey("LegalClassId")
                        .HasConstraintName("FK_EnforcementAuthorities_ArrestableClasses_LegalClasses")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.EnforcementAuthority", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "FilterProg")
                        .WithMany("EnforcementAuthorities")
                        .HasForeignKey("FilterProgId")
                        .HasConstraintName("FK_EnforcementAuthorities_FutureProgs");

                    b.HasOne("MudSharp.Models.LegalAuthority", "LegalAuthority")
                        .WithMany("EnforcementAuthorities")
                        .HasForeignKey("LegalAuthorityId")
                        .HasConstraintName("FK_EnforcementAuthorities_LegalAuthorities")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.EnforcementAuthorityParentAuthority", b =>
                {
                    b.HasOne("MudSharp.Models.EnforcementAuthority", "Child")
                        .WithMany("EnforcementAuthoritiesParentAuthoritiesChild")
                        .HasForeignKey("ChildId")
                        .HasConstraintName("FK_EnforcementAuthorities_ParentAuthorities_Child")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.EnforcementAuthority", "Parent")
                        .WithMany("EnforcementAuthoritiesParentAuthoritiesParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_EnforcementAuthorities_ParentAuthorities_Parent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.EntityDescriptionPattern", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "ApplicabilityProg")
                        .WithMany("EntityDescriptionPatterns")
                        .HasForeignKey("ApplicabilityProgId")
                        .HasConstraintName("FK_EntityDescriptionPatterns_FutureProgs");
                });

            modelBuilder.Entity("MudSharp.Models.EntityDescriptionPatternsEntityDescriptions", b =>
                {
                    b.HasOne("MudSharp.Models.EntityDescriptions", "EntityDescription")
                        .WithMany("EntityDescriptionPatternsEntityDescriptions")
                        .HasForeignKey("EntityDescriptionId")
                        .HasConstraintName("FK_EDP_EntityDescriptions_EntityDescriptions")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.EntityDescriptionPattern", "Pattern")
                        .WithMany("EntityDescriptionPatternsEntityDescriptions")
                        .HasForeignKey("PatternId")
                        .HasConstraintName("FK_EDP_EntityDescriptions_EntityDescriptionPatterns")
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.EthnicitiesCharacteristics", b =>
                {
                    b.HasOne("MudSharp.Models.CharacteristicDefinition", "CharacteristicDefinition")
                        .WithMany("EthnicitiesCharacteristics")
                        .HasForeignKey("CharacteristicDefinitionId")
                        .HasConstraintName("FK_Ethnicities_Characteristics_CharacteristicDefinitions")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.CharacteristicProfile", "CharacteristicProfile")
                        .WithMany("EthnicitiesCharacteristics")
                        .HasForeignKey("CharacteristicProfileId")
                        .HasConstraintName("FK_Ethnicities_Characteristics_CharacteristicProfiles")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Ethnicity", "Ethnicity")
                        .WithMany("EthnicitiesCharacteristics")
                        .HasForeignKey("EthnicityId")
                        .HasConstraintName("FK_Ethnicities_Characteristics_Ethnicities")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.EthnicitiesChargenResources", b =>
                {
                    b.HasOne("MudSharp.Models.ChargenResource", "ChargenResource")
                        .WithMany("EthnicitiesChargenResources")
                        .HasForeignKey("ChargenResourceId")
                        .HasConstraintName("FK_Ethnicities_ChargenResources_ChargenResources")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Ethnicity", "Ethnicity")
                        .WithMany("EthnicitiesChargenResources")
                        .HasForeignKey("EthnicityId")
                        .HasConstraintName("FK_Ethnicities_ChargenResources_Ethnicities")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Ethnicity", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "AvailabilityProg")
                        .WithMany("Ethnicities")
                        .HasForeignKey("AvailabilityProgId")
                        .HasConstraintName("FK_Ethnicities_AvailabilityProg")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.Race", "ParentRace")
                        .WithMany("Ethnicities")
                        .HasForeignKey("ParentRaceId")
                        .HasConstraintName("FK_Ethnicities_Races")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MudSharp.Models.PopulationBloodModel", "PopulationBloodModel")
                        .WithMany("Ethnicities")
                        .HasForeignKey("PopulationBloodModelId")
                        .HasConstraintName("FK_Ethnicities_PopulationBloodModels")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("MudSharp.Models.ExternalClanControl", b =>
                {
                    b.HasOne("MudSharp.Models.Appointment", "ControlledAppointment")
                        .WithMany("ExternalClanControlsControlledAppointment")
                        .HasForeignKey("ControlledAppointmentId")
                        .HasConstraintName("FK_ECC_Appointments_Controlled")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Appointment", "ControllingAppointment")
                        .WithMany("ExternalClanControlsControllingAppointment")
                        .HasForeignKey("ControllingAppointmentId")
                        .HasConstraintName("FK_ECC_Appointments_Controlling");

                    b.HasOne("MudSharp.Models.Clan", "LiegeClan")
                        .WithMany("ExternalClanControlsLiegeClan")
                        .HasForeignKey("LiegeClanId")
                        .HasConstraintName("FK_ECC_Clans_Liege")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Clan", "VassalClan")
                        .WithMany("ExternalClanControlsVassalClan")
                        .HasForeignKey("VassalClanId")
                        .HasConstraintName("FK_ECC_Clans_Vassal")
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ExternalClanControlsAppointment", b =>
                {
                    b.HasOne("MudSharp.Models.ClanMembership", "ClanMemberships")
                        .WithMany("ExternalClanControlsAppointments")
                        .HasForeignKey("VassalClanId", "CharacterId")
                        .HasConstraintName("FK_ECC_Appointments_ClanMemberships")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.ExternalClanControl", "ExternalClanControls")
                        .WithMany("ExternalClanControlsAppointments")
                        .HasForeignKey("VassalClanId", "LiegeClanId", "ControlledAppointmentId")
                        .HasConstraintName("FK_ECC_Appointments_ExternalClanControls")
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.FinancialPeriod", b =>
                {
                    b.HasOne("MudSharp.Models.EconomicZone", "EconomicZone")
                        .WithMany("FinancialPeriods")
                        .HasForeignKey("EconomicZoneId")
                        .HasConstraintName("FK_FinancialPeriods_EconomicZones")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Foragable", b =>
                {
                    b.HasOne("MudSharp.Models.EditableItem", "EditableItem")
                        .WithMany("Foragables")
                        .HasForeignKey("EditableItemId")
                        .HasConstraintName("FK_Foragables_EditableItems")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ForagableProfile", b =>
                {
                    b.HasOne("MudSharp.Models.EditableItem", "EditableItem")
                        .WithMany("ForagableProfiles")
                        .HasForeignKey("EditableItemId")
                        .HasConstraintName("FK_ForagableProfiles_EditableItems")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ForagableProfilesForagables", b =>
                {
                    b.HasOne("MudSharp.Models.ForagableProfile", "ForagableProfile")
                        .WithMany("ForagableProfilesForagables")
                        .HasForeignKey("ForagableProfileId", "ForagableProfileRevisionNumber")
                        .HasConstraintName("FK_ForagableProfiles_Foragables_ForagableProfiles")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ForagableProfilesHourlyYieldGains", b =>
                {
                    b.HasOne("MudSharp.Models.ForagableProfile", "ForagableProfile")
                        .WithMany("ForagableProfilesHourlyYieldGains")
                        .HasForeignKey("ForagableProfileId", "ForagableProfileRevisionNumber")
                        .HasConstraintName("FK_ForagableProfiles_HourlyYieldGains_ForagableProfiles")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ForagableProfilesMaximumYields", b =>
                {
                    b.HasOne("MudSharp.Models.ForagableProfile", "ForagableProfile")
                        .WithMany("ForagableProfilesMaximumYields")
                        .HasForeignKey("ForagableProfileId", "ForagableProfileRevisionNumber")
                        .HasConstraintName("FK_ForagableProfiles_MaximumYields_ForagableProfiles")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.FutureProgsParameter", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "FutureProg")
                        .WithMany("FutureProgsParameters")
                        .HasForeignKey("FutureProgId")
                        .HasConstraintName("FK_FutureProgs_Parameters_FutureProgs")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.GameItem", b =>
                {
                    b.HasOne("MudSharp.Models.GameItem", "Container")
                        .WithMany("InverseContainer")
                        .HasForeignKey("ContainerId")
                        .HasConstraintName("FK_GameItems_GameItems_Containers")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("MudSharp.Models.GameItemComponent", b =>
                {
                    b.HasOne("MudSharp.Models.GameItem", "GameItem")
                        .WithMany("GameItemComponents")
                        .HasForeignKey("GameItemId")
                        .HasConstraintName("FK_GameItemComponents_GameItems")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.GameItemComponentProto", b =>
                {
                    b.HasOne("MudSharp.Models.EditableItem", "EditableItem")
                        .WithMany("GameItemComponentProtos")
                        .HasForeignKey("EditableItemId")
                        .HasConstraintName("FK_GameItemComponentProtos_EditableItems")
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.GameItemMagicResource", b =>
                {
                    b.HasOne("MudSharp.Models.GameItem", "GameItem")
                        .WithMany("GameItemsMagicResources")
                        .HasForeignKey("GameItemId")
                        .HasConstraintName("FK_GameItems_MagicResources_GameItems")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.MagicResource", "MagicResource")
                        .WithMany("GameItemsMagicResources")
                        .HasForeignKey("MagicResourceId")
                        .HasConstraintName("FK_GameItems_MagicResources_MagicResources")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.GameItemProto", b =>
                {
                    b.HasOne("MudSharp.Models.EditableItem", "EditableItem")
                        .WithMany("GameItemProtos")
                        .HasForeignKey("EditableItemId")
                        .HasConstraintName("FK_GameItemProtos_EditableItems")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.ItemGroup", "ItemGroup")
                        .WithMany("GameItemProtos")
                        .HasForeignKey("ItemGroupId")
                        .HasConstraintName("FK_GameItemProtos_ItemGroups")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("MudSharp.Models.GameItemProtosDefaultVariable", b =>
                {
                    b.HasOne("MudSharp.Models.GameItemProto", "GameItemProto")
                        .WithMany("GameItemProtosDefaultVariables")
                        .HasForeignKey("GameItemProtoId", "GameItemProtoRevNum")
                        .HasConstraintName("FK_GameItemProtos_DefaultValues_GameItemProtos")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.GameItemProtosGameItemComponentProtos", b =>
                {
                    b.HasOne("MudSharp.Models.GameItemComponentProto", "GameItemComponent")
                        .WithMany("GameItemProtosGameItemComponentProtos")
                        .HasForeignKey("GameItemComponentProtoId", "GameItemComponentRevision")
                        .HasConstraintName("FK_GIPGICP_GameItemComponentProtos")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.GameItemProto", "GameItemProto")
                        .WithMany("GameItemProtosGameItemComponentProtos")
                        .HasForeignKey("GameItemProtoId", "GameItemProtoRevision")
                        .HasConstraintName("FK_GIPGICP_GameItemProtos")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.GameItemProtosOnLoadProgs", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "FutureProg")
                        .WithMany("GameItemProtosOnLoadProgs")
                        .HasForeignKey("FutureProgId")
                        .HasConstraintName("FK_GameItemProtos_OnLoadProgs_FutureProgs")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.GameItemProto", "GameItemProto")
                        .WithMany("GameItemProtosOnLoadProgs")
                        .HasForeignKey("GameItemProtoId", "GameItemProtoRevisionNumber")
                        .HasConstraintName("FK_GameItemProtos_OnLoadProgs_GameItemProtos")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.GameItemProtosTags", b =>
                {
                    b.HasOne("MudSharp.Models.Tag", "Tag")
                        .WithMany("GameItemProtosTags")
                        .HasForeignKey("TagId")
                        .HasConstraintName("FK_GameItemProtos_Tags_Tags")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.GameItemProto", "GameItemProto")
                        .WithMany("GameItemProtosTags")
                        .HasForeignKey("GameItemProtoId", "GameItemProtoRevisionNumber")
                        .HasConstraintName("FK_GameItemProtos_Tags_GameItemProtos")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Gas", b =>
                {
                    b.HasOne("MudSharp.Models.Gas", "CountAs")
                        .WithMany("InverseCountAs")
                        .HasForeignKey("CountAsId")
                        .HasConstraintName("FK_Gases_Gases")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.Liquid", "Precipitate")
                        .WithMany("Gases")
                        .HasForeignKey("PrecipitateId")
                        .HasConstraintName("FK_Gases_Liquids")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("MudSharp.Models.GasesTags", b =>
                {
                    b.HasOne("MudSharp.Models.Gas", "Gas")
                        .WithMany("GasesTags")
                        .HasForeignKey("GasId")
                        .HasConstraintName("FK_Gases_Tags_Gases")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Tag", "Tag")
                        .WithMany("GasesTags")
                        .HasForeignKey("TagId")
                        .HasConstraintName("FK_Gases_Tags_Tags")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.GroupAi", b =>
                {
                    b.HasOne("MudSharp.Models.GroupAiTemplate", "GroupAiTemplate")
                        .WithMany("GroupAis")
                        .HasForeignKey("GroupAiTemplateId")
                        .HasConstraintName("FK_GroupAIs_GroupAITemplates")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Guest", b =>
                {
                    b.HasOne("MudSharp.Models.Character", "Character")
                        .WithOne("Guest")
                        .HasForeignKey("MudSharp.Models.Guest", "CharacterId")
                        .HasConstraintName("FK_Guests_Characters")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Helpfile", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "Rule")
                        .WithMany("Helpfiles")
                        .HasForeignKey("RuleId")
                        .HasConstraintName("FK_Helpfiles_FutureProgs");
                });

            modelBuilder.Entity("MudSharp.Models.HelpfilesExtraText", b =>
                {
                    b.HasOne("MudSharp.Models.Helpfile", "Helpfile")
                        .WithMany("HelpfilesExtraTexts")
                        .HasForeignKey("HelpfileId")
                        .HasConstraintName("FK_Helpfiles_ExtraTexts_Helpfiles")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.FutureProg", "Rule")
                        .WithMany("HelpfilesExtraTexts")
                        .HasForeignKey("RuleId")
                        .HasConstraintName("FK_Helpfiles_ExtraTexts_FutureProgs")
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.HooksPerceivable", b =>
                {
                    b.HasOne("MudSharp.Models.Body", "Body")
                        .WithMany("HooksPerceivables")
                        .HasForeignKey("BodyId")
                        .HasConstraintName("FK_Hooks_Perceivables_Bodies")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MudSharp.Models.Cell", "Cell")
                        .WithMany("HooksPerceivables")
                        .HasForeignKey("CellId")
                        .HasConstraintName("FK_Hooks_Perceivables_Cells")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MudSharp.Models.Character", "Character")
                        .WithMany("HooksPerceivables")
                        .HasForeignKey("CharacterId")
                        .HasConstraintName("FK_Hooks_Perceivables_Characters")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MudSharp.Models.GameItem", "GameItem")
                        .WithMany("HooksPerceivables")
                        .HasForeignKey("GameItemId")
                        .HasConstraintName("FK_Hooks_Perceivables_GameItems")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MudSharp.Models.Hooks", "Hook")
                        .WithMany("HooksPerceivables")
                        .HasForeignKey("HookId")
                        .HasConstraintName("FK_Hooks_Perceivables_Hooks")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Shard", "Shard")
                        .WithMany("HooksPerceivables")
                        .HasForeignKey("ShardId")
                        .HasConstraintName("FK_Hooks_Perceivables_Shards")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MudSharp.Models.Zone", "Zone")
                        .WithMany("HooksPerceivables")
                        .HasForeignKey("ZoneId")
                        .HasConstraintName("FK_Hooks_Perceivables_Zones")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MudSharp.Models.Infection", b =>
                {
                    b.HasOne("MudSharp.Models.BodypartProto", "Bodypart")
                        .WithMany("Infections")
                        .HasForeignKey("BodypartId")
                        .HasConstraintName("FK_Infections_Bodyparts")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MudSharp.Models.Body", "Owner")
                        .WithMany("Infections")
                        .HasForeignKey("OwnerId")
                        .HasConstraintName("FK_Infections_Bodies")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Wound", "Wound")
                        .WithMany("Infections")
                        .HasForeignKey("WoundId")
                        .HasConstraintName("FK_Infections_Wounds")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MudSharp.Models.ItemGroupForm", b =>
                {
                    b.HasOne("MudSharp.Models.ItemGroup", "ItemGroup")
                        .WithMany("ItemGroupForms")
                        .HasForeignKey("ItemGroupId")
                        .HasConstraintName("FK_ItemGroupForms_ItemGroups")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Knowledge", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "CanAcquireProg")
                        .WithMany("KnowledgesCanAcquireProg")
                        .HasForeignKey("CanAcquireProgId")
                        .HasConstraintName("FK_KNOWLEDGES_FUTUREPROGS_ACQUIRE")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.FutureProg", "CanLearnProg")
                        .WithMany("KnowledgesCanLearnProg")
                        .HasForeignKey("CanLearnProgId")
                        .HasConstraintName("FK_KNOWLEDGES_FUTUREPROGS_LEARN")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("MudSharp.Models.KnowledgesCosts", b =>
                {
                    b.HasOne("MudSharp.Models.ChargenResource", "ChargenResource")
                        .WithMany("KnowledgesCosts")
                        .HasForeignKey("ChargenResourceId")
                        .HasConstraintName("FK_KnowledgesCosts_ChargenResources")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Knowledge", "Knowledge")
                        .WithMany("KnowledgesCosts")
                        .HasForeignKey("KnowledgeId")
                        .HasConstraintName("FK_KnowledgesCosts_Knowledges")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Language", b =>
                {
                    b.HasOne("MudSharp.Models.Accent", "DefaultLearnerAccent")
                        .WithMany("Languages")
                        .HasForeignKey("DefaultLearnerAccentId")
                        .HasConstraintName("FK_Languages_Accents");

                    b.HasOne("MudSharp.Models.LanguageDifficultyModels", "DifficultyModelNavigation")
                        .WithMany("Languages")
                        .HasForeignKey("DifficultyModel")
                        .HasConstraintName("FK_Languages_LanguageDifficultyModels")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.TraitDefinition", "LinkedTrait")
                        .WithMany("Languages")
                        .HasForeignKey("LinkedTraitId")
                        .HasConstraintName("FK_Languages_TraitDefinitions")
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Law", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "LawAppliesProg")
                        .WithMany("Laws")
                        .HasForeignKey("LawAppliesProgId")
                        .HasConstraintName("FK_Laws_FutureProgs")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.LegalAuthority", "LegalAuthority")
                        .WithMany("Laws")
                        .HasForeignKey("LegalAuthorityId")
                        .HasConstraintName("FK_Laws_LegalAuthority")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.LawsOffenderClasses", b =>
                {
                    b.HasOne("MudSharp.Models.Law", "Law")
                        .WithMany("LawsOffenderClasses")
                        .HasForeignKey("LawId")
                        .HasConstraintName("FK_Laws_OffenderClasses_Laws")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.LegalClass", "LegalClass")
                        .WithMany("LawsOffenderClasses")
                        .HasForeignKey("LegalClassId")
                        .HasConstraintName("FK_Laws_OffenderClasses_LegalClasses")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.LawsVictimClasses", b =>
                {
                    b.HasOne("MudSharp.Models.Law", "Law")
                        .WithMany("LawsVictimClasses")
                        .HasForeignKey("LawId")
                        .HasConstraintName("FK_Laws_VictimClasses_Laws")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.LegalClass", "LegalClass")
                        .WithMany("LawsVictimClasses")
                        .HasForeignKey("LegalClassId")
                        .HasConstraintName("FK_Laws_VictimClasses_LegalClasses")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.LegalAuthoritiesZones", b =>
                {
                    b.HasOne("MudSharp.Models.LegalAuthority", "LegalAuthority")
                        .WithMany("LegalAuthoritiesZones")
                        .HasForeignKey("LegalAuthorityId")
                        .HasConstraintName("FK_LegalAuthorities_Zones_LegalAuthorities")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Zone", "Zone")
                        .WithMany("LegalAuthoritiesZones")
                        .HasForeignKey("ZoneId")
                        .HasConstraintName("FK_LegalAuthorities_Zones_Zones")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.LegalAuthority", b =>
                {
                    b.HasOne("MudSharp.Models.Currency", "Currency")
                        .WithMany("LegalAuthorities")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("FK_LegalAuthorities_Currencies")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.LegalClass", b =>
                {
                    b.HasOne("MudSharp.Models.LegalAuthority", "LegalAuthority")
                        .WithMany("LegalClasses")
                        .HasForeignKey("LegalAuthorityId")
                        .HasConstraintName("FK_LegalClasses_LegalAuthorities")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.FutureProg", "MembershipProg")
                        .WithMany("LegalClasses")
                        .HasForeignKey("MembershipProgId")
                        .HasConstraintName("FK_LegalClasses_FutureProgs")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Limb", b =>
                {
                    b.HasOne("MudSharp.Models.BodyProto", "RootBody")
                        .WithMany("Limbs")
                        .HasForeignKey("RootBodyId")
                        .HasConstraintName("FK_Limbs_BodyProtos")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.BodypartProto", "RootBodypart")
                        .WithMany("Limbs")
                        .HasForeignKey("RootBodypartId")
                        .HasConstraintName("FK_Limbs_BodypartProto")
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.LimbBodypartProto", b =>
                {
                    b.HasOne("MudSharp.Models.BodypartProto", "BodypartProto")
                        .WithMany("LimbsBodypartProto")
                        .HasForeignKey("BodypartProtoId")
                        .HasConstraintName("FK_Limbs_BodypartProto_BodypartProto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Limb", "Limb")
                        .WithMany("LimbsBodypartProto")
                        .HasForeignKey("LimbId")
                        .HasConstraintName("FK_Limbs_BodypartProto_Limbs")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.LimbsSpinalPart", b =>
                {
                    b.HasOne("MudSharp.Models.BodypartProto", "BodypartProto")
                        .WithMany("LimbsSpinalParts")
                        .HasForeignKey("BodypartProtoId")
                        .HasConstraintName("FK_Limbs_SpinalParts_BodypartProtos")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Limb", "Limb")
                        .WithMany("LimbsSpinalParts")
                        .HasForeignKey("LimbId")
                        .HasConstraintName("FK_Limbs_SpinalParts_Limbs")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.LineOfCreditAccount", b =>
                {
                    b.HasOne("MudSharp.Models.Character", "AccountOwner")
                        .WithMany()
                        .HasForeignKey("AccountOwnerId")
                        .HasConstraintName("FK_LineOfCreditAccounts_Characters")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Shop", "Shop")
                        .WithMany("LineOfCreditAccounts")
                        .HasForeignKey("ShopId")
                        .HasConstraintName("FK_LineOfCreditAccounts_Shops")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.LineOfCreditAccountUser", b =>
                {
                    b.HasOne("MudSharp.Models.Character", "AccountUser")
                        .WithMany()
                        .HasForeignKey("AccountUserId")
                        .HasConstraintName("FK_LineOfCreditAccountUsers_Characters")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.LineOfCreditAccount", "LineOfCreditAccount")
                        .WithMany("AccountUsers")
                        .HasForeignKey("LineOfCreditAccountId")
                        .HasConstraintName("FK_LineOfCreditAccountUsers_LineOfCreditAccounts")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Liquid", b =>
                {
                    b.HasOne("MudSharp.Models.Liquid", "CountAs")
                        .WithMany("InverseCountAs")
                        .HasForeignKey("CountAsId")
                        .HasConstraintName("FK_Liquids_Liquids_CountasAs")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.Material", "DriedResidue")
                        .WithMany("Liquids")
                        .HasForeignKey("DriedResidueId")
                        .HasConstraintName("FK_Liquids_Materials")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.Drug", "Drug")
                        .WithMany("Liquids")
                        .HasForeignKey("DrugId")
                        .HasConstraintName("FK_Liquids_Drugs")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.Liquid", "Solvent")
                        .WithMany("InverseSolvent")
                        .HasForeignKey("SolventId")
                        .HasConstraintName("FK_Liquids_Liquids")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("MudSharp.Models.LiquidsTags", b =>
                {
                    b.HasOne("MudSharp.Models.Liquid", "Liquid")
                        .WithMany("LiquidsTags")
                        .HasForeignKey("LiquidId")
                        .HasConstraintName("FK_Liquids_Tags_Liquids")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Tag", "Tag")
                        .WithMany("LiquidsTags")
                        .HasForeignKey("TagId")
                        .HasConstraintName("FK_Liquids_Tags_Tags")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.LoginIp", b =>
                {
                    b.HasOne("MudSharp.Models.Account", "Account")
                        .WithMany("LoginIps")
                        .HasForeignKey("AccountId")
                        .HasConstraintName("FK_LoginIPs_Accounts")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.MagicCapability", b =>
                {
                    b.HasOne("MudSharp.Models.MagicSchool", "MagicSchool")
                        .WithMany("MagicCapabilities")
                        .HasForeignKey("MagicSchoolId")
                        .HasConstraintName("FK_MagicCapabilities_MagicSchools")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.MagicPower", b =>
                {
                    b.HasOne("MudSharp.Models.MagicSchool", "MagicSchool")
                        .WithMany("MagicPowers")
                        .HasForeignKey("MagicSchoolId")
                        .HasConstraintName("FK_MagicPowers_MagicSchools")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.MagicSchool", b =>
                {
                    b.HasOne("MudSharp.Models.MagicSchool", "ParentSchool")
                        .WithMany("InverseParentSchool")
                        .HasForeignKey("ParentSchoolId")
                        .HasConstraintName("FK_MagicSchools_MagicSchools")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MudSharp.Models.MaterialsTags", b =>
                {
                    b.HasOne("MudSharp.Models.Material", "Material")
                        .WithMany("MaterialsTags")
                        .HasForeignKey("MaterialId")
                        .HasConstraintName("Materials_Tags_Materials")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Tag", "Tag")
                        .WithMany("MaterialsTags")
                        .HasForeignKey("TagId")
                        .HasConstraintName("Materials_Tags_Tags")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Merchandise", b =>
                {
                    b.HasOne("MudSharp.Models.GameItem", "PreferredDisplayContainer")
                        .WithMany("Merchandises")
                        .HasForeignKey("PreferredDisplayContainerId")
                        .HasConstraintName("FK_Merchandises_GameItems")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MudSharp.Models.Shop", "Shop")
                        .WithMany("Merchandises")
                        .HasForeignKey("ShopId")
                        .HasConstraintName("FK_Merchandises_Shops")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Merit", b =>
                {
                    b.HasOne("MudSharp.Models.Merit", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Merits_Merits")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("MudSharp.Models.MeritsChargenResources", b =>
                {
                    b.HasOne("MudSharp.Models.ChargenResource", "ChargenResource")
                        .WithMany("MeritsChargenResources")
                        .HasForeignKey("ChargenResourceId")
                        .HasConstraintName("FK_Merits_ChargenResources_ChargenResources")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Merit", "Merit")
                        .WithMany("MeritsChargenResources")
                        .HasForeignKey("MeritId")
                        .HasConstraintName("FK_Merits_ChargenResources_Merits")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.MoveSpeed", b =>
                {
                    b.HasOne("MudSharp.Models.BodyProto", "BodyProto")
                        .WithMany("MoveSpeeds")
                        .HasForeignKey("BodyProtoId")
                        .HasConstraintName("FK_MoveSpeeds_BodyPrototype")
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.MutualIntelligability", b =>
                {
                    b.HasOne("MudSharp.Models.Language", "ListenerLanguage")
                        .WithMany("MutualIntelligabilitiesListenerLanguage")
                        .HasForeignKey("ListenerLanguageId")
                        .HasConstraintName("FK_Languages_MutualIntelligabilities_Listener")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Language", "TargetLanguage")
                        .WithMany("MutualIntelligabilitiesTargetLanguage")
                        .HasForeignKey("TargetLanguageId")
                        .HasConstraintName("FK_Languages_MutualIntelligabilities_Target")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Npc", b =>
                {
                    b.HasOne("MudSharp.Models.Character", "BodyguardCharacter")
                        .WithMany("NpcsBodyguardCharacter")
                        .HasForeignKey("BodyguardCharacterId")
                        .HasConstraintName("FK_NPCs_Characters_Bodyguard")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.Character", "Character")
                        .WithMany("NpcsCharacter")
                        .HasForeignKey("CharacterId")
                        .HasConstraintName("FK_NPCs_Characters")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.NpcTemplate", "Template")
                        .WithMany("Npcs")
                        .HasForeignKey("TemplateId", "TemplateRevnum")
                        .HasConstraintName("FK_NPCs_NPCTemplates")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.NpcTemplate", b =>
                {
                    b.HasOne("MudSharp.Models.EditableItem", "EditableItem")
                        .WithMany("Npctemplates")
                        .HasForeignKey("EditableItemId")
                        .HasConstraintName("FK_NPCTemplates_EditableItems")
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.NpcTemplatesArtificalIntelligences", b =>
                {
                    b.HasOne("MudSharp.Models.ArtificialIntelligence", "Ai")
                        .WithMany("NpctemplatesArtificalIntelligences")
                        .HasForeignKey("AiId")
                        .HasConstraintName("FK_NTAI_ArtificalIntelligences")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.NpcTemplate", "Npctemplate")
                        .WithMany("NpctemplatesArtificalIntelligences")
                        .HasForeignKey("NpcTemplateId", "NpcTemplateRevisionNumber")
                        .HasConstraintName("FK_NTAI_NPCTemplates")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.NpcsArtificialIntelligences", b =>
                {
                    b.HasOne("MudSharp.Models.ArtificialIntelligence", "ArtificialIntelligence")
                        .WithMany("NpcsArtificialIntelligences")
                        .HasForeignKey("ArtificialIntelligenceId")
                        .HasConstraintName("FK_NPCs_ArtificialIntelligences_ArtificialIntelligences")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Npc", "Npc")
                        .WithMany("NpcsArtificialIntelligences")
                        .HasForeignKey("Npcid")
                        .HasConstraintName("FK_NPCs_ArtificialIntelligences_NPCs")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.PatrolRoute", b =>
                {
                    b.HasOne("MudSharp.Models.LegalAuthority", "LegalAuthority")
                        .WithMany("PatrolRoutes")
                        .HasForeignKey("LegalAuthorityId")
                        .HasConstraintName("FK_PatrolRoutes_LegalAuthorities")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.PatrolRouteNode", b =>
                {
                    b.HasOne("MudSharp.Models.Cell", "Cell")
                        .WithMany()
                        .HasForeignKey("CellId")
                        .HasConstraintName("FK_PatrolRoutesNodes_Cells")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.PatrolRoute", "PatrolRoute")
                        .WithMany("PatrolRouteNodes")
                        .HasForeignKey("PatrolRouteId")
                        .HasConstraintName("FK_PatrolRoutesNodes_PatrolRoutes")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.PatrolRouteNumbers", b =>
                {
                    b.HasOne("MudSharp.Models.EnforcementAuthority", "EnforcementAuthority")
                        .WithMany()
                        .HasForeignKey("EnforcementAuthorityId")
                        .HasConstraintName("FK_PatrolRoutesNumbers_EnforcementAuthorities")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.PatrolRoute", "PatrolRoute")
                        .WithMany("PatrolRouteNumbers")
                        .HasForeignKey("PatrolRouteId")
                        .HasConstraintName("FK_PatrolRoutesNumbers_PatrolRoutes")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.PatrolRouteTimeOfDay", b =>
                {
                    b.HasOne("MudSharp.Models.PatrolRoute", "PatrolRoute")
                        .WithMany("TimesOfDay")
                        .HasForeignKey("PatrolRouteId")
                        .HasConstraintName("FK_PatrolRoutesTimesOfDay_PatrolRoutes")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Paygrade", b =>
                {
                    b.HasOne("MudSharp.Models.Clan", "Clan")
                        .WithMany("Paygrades")
                        .HasForeignKey("ClanId")
                        .HasConstraintName("FK_Paygrades_Clans")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Currency", "Currency")
                        .WithMany("Paygrades")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("FK_Paygrades_Currencies")
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.PerceiverMerit", b =>
                {
                    b.HasOne("MudSharp.Models.Body", "Body")
                        .WithMany("PerceiverMerits")
                        .HasForeignKey("BodyId")
                        .HasConstraintName("FK_PerceiverMerits_Bodies")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MudSharp.Models.Character", "Character")
                        .WithMany("PerceiverMerits")
                        .HasForeignKey("CharacterId")
                        .HasConstraintName("FK_PerceiverMerits_Characters")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MudSharp.Models.Merit", "Merit")
                        .WithMany("PerceiverMerits")
                        .HasForeignKey("MeritId")
                        .HasConstraintName(" FK_PerceiverMerits_Merits")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.PopulationBloodModelsBloodtype", b =>
                {
                    b.HasOne("MudSharp.Models.Bloodtype", "Bloodtype")
                        .WithMany("PopulationBloodModelsBloodtypes")
                        .HasForeignKey("BloodtypeId")
                        .HasConstraintName("FK_PopulationBloodModels_Bloodtypes_Bloodtypes")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.PopulationBloodModel", "PopulationBloodModel")
                        .WithMany("PopulationBloodModelsBloodtypes")
                        .HasForeignKey("PopulationBloodModelId")
                        .HasConstraintName("FK_PopulationBloodModels_Bloodtypes_PopulationBloodModels")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ProgSchedule", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "FutureProg")
                        .WithMany("ProgSchedules")
                        .HasForeignKey("FutureProgId")
                        .HasConstraintName("FK_ProgSchedules_FutureProgs")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Project", b =>
                {
                    b.HasOne("MudSharp.Models.EditableItem", "EditableItem")
                        .WithMany("Projects")
                        .HasForeignKey("EditableItemId")
                        .HasConstraintName("FK_Projects_EditableItems")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ProjectAction", b =>
                {
                    b.HasOne("MudSharp.Models.ProjectPhase", "ProjectPhase")
                        .WithMany("ProjectActions")
                        .HasForeignKey("ProjectPhaseId")
                        .HasConstraintName("FK_ProjectActions_ProjectPhases")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ProjectLabourImpact", b =>
                {
                    b.HasOne("MudSharp.Models.ProjectLabourRequirement", "ProjectLabourRequirement")
                        .WithMany("ProjectLabourImpacts")
                        .HasForeignKey("ProjectLabourRequirementId")
                        .HasConstraintName("FK_ProjectLabourImpacts_ProjectLabourRequirements")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ProjectLabourRequirement", b =>
                {
                    b.HasOne("MudSharp.Models.ProjectPhase", "ProjectPhase")
                        .WithMany("ProjectLabourRequirements")
                        .HasForeignKey("ProjectPhaseId")
                        .HasConstraintName("FK_ProjectLabourRequirements_ProjectPhases")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ProjectMaterialRequirement", b =>
                {
                    b.HasOne("MudSharp.Models.ProjectPhase", "ProjectPhase")
                        .WithMany("ProjectMaterialRequirements")
                        .HasForeignKey("ProjectPhaseId")
                        .HasConstraintName("FK_ProjectMaterialRequirements_ProjectPhases")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ProjectPhase", b =>
                {
                    b.HasOne("MudSharp.Models.Project", "Project")
                        .WithMany("ProjectPhases")
                        .HasForeignKey("ProjectId", "ProjectRevisionNumber")
                        .HasConstraintName("FK_ProjectPhases_Projects")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Race", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "AttributeBonusProg")
                        .WithMany("RacesAttributeBonusProg")
                        .HasForeignKey("AttributeBonusProgId")
                        .HasConstraintName("FK_Races_AttributeBonusProg")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.FutureProg", "AvailabilityProg")
                        .WithMany("RacesAvailabilityProg")
                        .HasForeignKey("AvailabilityProgId")
                        .HasConstraintName("FK_Races_AvailabilityProg")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.BodyProto", "BaseBody")
                        .WithMany("Races")
                        .HasForeignKey("BaseBodyId")
                        .HasConstraintName("FK_Races_BodyProtos")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Liquid", "BloodLiquid")
                        .WithMany("RacesBloodLiquid")
                        .HasForeignKey("BloodLiquidId")
                        .HasConstraintName("FK_Races_Liquids_Blood");

                    b.HasOne("MudSharp.Models.BloodModel", "BloodModel")
                        .WithMany("Races")
                        .HasForeignKey("BloodModelId")
                        .HasConstraintName("FK_Races_BloodModels")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.CorpseModel", "CorpseModel")
                        .WithMany("Races")
                        .HasForeignKey("CorpseModelId")
                        .HasConstraintName("FK_Races_CorpseModels")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.HealthStrategy", "DefaultHealthStrategy")
                        .WithMany("Races")
                        .HasForeignKey("DefaultHealthStrategyId")
                        .HasConstraintName("FK_Races_HealthStrategies")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Material", "NaturalArmourMaterial")
                        .WithMany("Races")
                        .HasForeignKey("NaturalArmourMaterialId")
                        .HasConstraintName("FK_Races_Materials")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.ArmourType", "NaturalArmourType")
                        .WithMany("Races")
                        .HasForeignKey("NaturalArmourTypeId")
                        .HasConstraintName("FK_Races_ArmourTypes")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.Race", "ParentRace")
                        .WithMany("InverseParentRace")
                        .HasForeignKey("ParentRaceId")
                        .HasConstraintName("FK_Races_Races");

                    b.HasOne("MudSharp.Models.RaceButcheryProfile", "RaceButcheryProfile")
                        .WithMany("Races")
                        .HasForeignKey("RaceButcheryProfileId")
                        .HasConstraintName("FK_Races_RaceButcheryProfiles")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.Liquid", "SweatLiquid")
                        .WithMany("RacesSweatLiquid")
                        .HasForeignKey("SweatLiquidId")
                        .HasConstraintName("FK_Races_Liqiuds_Sweat")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("MudSharp.Models.RaceButcheryProfile", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "CanButcherProg")
                        .WithMany("RaceButcheryProfilesCanButcherProg")
                        .HasForeignKey("CanButcherProgId")
                        .HasConstraintName("FK_RaceButcheryProfiles_FutureProgs_Can")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.Tag", "RequiredToolTag")
                        .WithMany("RaceButcheryProfiles")
                        .HasForeignKey("RequiredToolTagId")
                        .HasConstraintName("FK_RaceButcheryProfiles_Tags")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.FutureProg", "WhyCannotButcherProg")
                        .WithMany("RaceButcheryProfilesWhyCannotButcherProg")
                        .HasForeignKey("WhyCannotButcherProgId")
                        .HasConstraintName("FK_RaceButcheryProfiles_FutureProgs_Why")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("MudSharp.Models.RaceButcheryProfilesBreakdownChecks", b =>
                {
                    b.HasOne("MudSharp.Models.RaceButcheryProfile", "RaceButcheryProfile")
                        .WithMany("RaceButcheryProfilesBreakdownChecks")
                        .HasForeignKey("RaceButcheryProfileId")
                        .HasConstraintName("FK_RaceButcheryProfiles_BreakdownChecks_RaceButcheryProfiles")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.TraitDefinition", "TraitDefinition")
                        .WithMany("RaceButcheryProfilesBreakdownChecks")
                        .HasForeignKey("TraitDefinitionId")
                        .HasConstraintName("FK_RaceButcheryProfiles_BreakdownChecks_TraitDefinitions")
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.RaceButcheryProfilesBreakdownEmotes", b =>
                {
                    b.HasOne("MudSharp.Models.RaceButcheryProfile", "RaceButcheryProfile")
                        .WithMany("RaceButcheryProfilesBreakdownEmotes")
                        .HasForeignKey("RaceButcheryProfileId")
                        .HasConstraintName("FK_RaceButcheryProfiles_BreakdownEmotes_RaceButcheryProfiles")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.RaceButcheryProfilesButcheryProducts", b =>
                {
                    b.HasOne("MudSharp.Models.ButcheryProducts", "ButcheryProduct")
                        .WithMany("RaceButcheryProfilesButcheryProducts")
                        .HasForeignKey("ButcheryProductId")
                        .HasConstraintName("FK_RaceButcheryProfiles_ButcheryProducts_ButcheryProducts")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.RaceButcheryProfile", "RaceButcheryProfile")
                        .WithMany("RaceButcheryProfilesButcheryProducts")
                        .HasForeignKey("RaceButcheryProfileId")
                        .HasConstraintName("FK_RaceButcheryProfiles_ButcheryProducts_RaceButcheryProfiles")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.RaceButcheryProfilesSkinningEmotes", b =>
                {
                    b.HasOne("MudSharp.Models.RaceButcheryProfile", "RaceButcheryProfile")
                        .WithMany("RaceButcheryProfilesSkinningEmotes")
                        .HasForeignKey("RaceButcheryProfileId")
                        .HasConstraintName("FK_RaceButcheryProfiles_SkinningEmotes_RaceButcheryProfiles")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.RaceEdibleForagableYields", b =>
                {
                    b.HasOne("MudSharp.Models.Race", "Race")
                        .WithMany("RaceEdibleForagableYields")
                        .HasForeignKey("RaceId")
                        .HasConstraintName("FK_RaceEdibleForagableYields_Races")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.RacesAdditionalBodyparts", b =>
                {
                    b.HasOne("MudSharp.Models.BodypartProto", "Bodypart")
                        .WithMany("RacesAdditionalBodyparts")
                        .HasForeignKey("BodypartId")
                        .HasConstraintName("FK_Races_AdditionalBodyparts_BodypartProto")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Race", "Race")
                        .WithMany("RacesAdditionalBodyparts")
                        .HasForeignKey("RaceId")
                        .HasConstraintName("FK_Races_AdditionalBodyparts_Races")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.RacesAdditionalCharacteristics", b =>
                {
                    b.HasOne("MudSharp.Models.CharacteristicDefinition", "CharacteristicDefinition")
                        .WithMany("RacesAdditionalCharacteristics")
                        .HasForeignKey("CharacteristicDefinitionId")
                        .HasConstraintName("FK_RAC_CharacteristicDefinitions")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Race", "Race")
                        .WithMany("RacesAdditionalCharacteristics")
                        .HasForeignKey("RaceId")
                        .HasConstraintName("FK_RAC_Races")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.RacesAttributes", b =>
                {
                    b.HasOne("MudSharp.Models.TraitDefinition", "Attribute")
                        .WithMany("RacesAttributes")
                        .HasForeignKey("AttributeId")
                        .HasConstraintName("FK_Races_Attributes_TraitDefinitions")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Race", "Race")
                        .WithMany("RacesAttributes")
                        .HasForeignKey("RaceId")
                        .HasConstraintName("FK_Races_Attributes_Races")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.RacesBreathableGases", b =>
                {
                    b.HasOne("MudSharp.Models.Gas", "Gas")
                        .WithMany("RacesBreathableGases")
                        .HasForeignKey("GasId")
                        .HasConstraintName("FK_Races_BreathableGases_Gases")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Race", "Race")
                        .WithMany("RacesBreathableGases")
                        .HasForeignKey("RaceId")
                        .HasConstraintName("FK_Races_BreathableGases_Races")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.RacesBreathableLiquids", b =>
                {
                    b.HasOne("MudSharp.Models.Liquid", "Liquid")
                        .WithMany("RacesBreathableLiquids")
                        .HasForeignKey("LiquidId")
                        .HasConstraintName("FK_Races_BreathableLiquids_Liquids")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Race", "Race")
                        .WithMany("RacesBreathableLiquids")
                        .HasForeignKey("RaceId")
                        .HasConstraintName("FK_Races_BreathableLiquids_Races")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.RacesChargenResources", b =>
                {
                    b.HasOne("MudSharp.Models.ChargenResource", "ChargenResource")
                        .WithMany("RacesChargenResources")
                        .HasForeignKey("ChargenResourceId")
                        .HasConstraintName("FK_Races_ChargenResources_ChargenResources")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Race", "Race")
                        .WithMany("RacesChargenResources")
                        .HasForeignKey("RaceId")
                        .HasConstraintName("FK_Races_ChargenResources_Races")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.RacesEdibleMaterials", b =>
                {
                    b.HasOne("MudSharp.Models.Material", "Material")
                        .WithMany("RacesEdibleMaterials")
                        .HasForeignKey("MaterialId")
                        .HasConstraintName("FK_Races_EdibleMaterials_Materials")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Race", "Race")
                        .WithMany("RacesEdibleMaterials")
                        .HasForeignKey("RaceId")
                        .HasConstraintName("FK_Races_EdibleMaterials_Races")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.RacesWeaponAttacks", b =>
                {
                    b.HasOne("MudSharp.Models.BodypartProto", "Bodypart")
                        .WithMany("RacesWeaponAttacks")
                        .HasForeignKey("BodypartId")
                        .HasConstraintName("FK_Races_WeaponAttacks_BodypartProto")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Race", "Race")
                        .WithMany("RacesWeaponAttacks")
                        .HasForeignKey("RaceId")
                        .HasConstraintName("FK_Races_WeaponAttacks_Races")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.WeaponAttack", "WeaponAttack")
                        .WithMany("RacesWeaponAttacks")
                        .HasForeignKey("WeaponAttackId")
                        .HasConstraintName("FK_Races_WeaponAttacks_WeaponAttacks")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.RandomNameProfile", b =>
                {
                    b.HasOne("MudSharp.Models.NameCulture", "NameCulture")
                        .WithMany("RandomNameProfiles")
                        .HasForeignKey("NameCultureId")
                        .HasConstraintName("FK_RandomNameProfiles_NameCulture")
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.RandomNameProfilesDiceExpressions", b =>
                {
                    b.HasOne("MudSharp.Models.RandomNameProfile", "RandomNameProfile")
                        .WithMany("RandomNameProfilesDiceExpressions")
                        .HasForeignKey("RandomNameProfileId")
                        .HasConstraintName("FK_RandomNameProfiles_DiceExpressions_RandomNameProfiles")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.RandomNameProfilesElements", b =>
                {
                    b.HasOne("MudSharp.Models.RandomNameProfile", "RandomNameProfile")
                        .WithMany("RandomNameProfilesElements")
                        .HasForeignKey("RandomNameProfileId")
                        .HasConstraintName("FK_RandomNameProfiles_Elements_RandomNameProfiles")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.RangedWeaponTypes", b =>
                {
                    b.HasOne("MudSharp.Models.TraitDefinition", "FireTrait")
                        .WithMany("RangedWeaponTypesFireTrait")
                        .HasForeignKey("FireTraitId")
                        .HasConstraintName("FK_RangedWeaponTypes_TraitDefinitions_Fire")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.TraitDefinition", "OperateTrait")
                        .WithMany("RangedWeaponTypesOperateTrait")
                        .HasForeignKey("OperateTraitId")
                        .HasConstraintName("FK_RangedWeaponTypes_TraitDefinitions_Operate")
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Rank", b =>
                {
                    b.HasOne("MudSharp.Models.Clan", "Clan")
                        .WithMany("Ranks")
                        .HasForeignKey("ClanId")
                        .HasConstraintName("FK_Ranks_Clans")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.GameItemProto", "InsigniaGameItem")
                        .WithMany("Ranks")
                        .HasForeignKey("InsigniaGameItemId", "InsigniaGameItemRevnum")
                        .HasConstraintName("FK_Ranks_GameItemProtos");
                });

            modelBuilder.Entity("MudSharp.Models.RanksAbbreviations", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "FutureProg")
                        .WithMany("RanksAbbreviations")
                        .HasForeignKey("FutureProgId")
                        .HasConstraintName("FK_Ranks_Abbreviations_FutureProgs")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.Rank", "Rank")
                        .WithMany("RanksAbbreviations")
                        .HasForeignKey("RankId")
                        .HasConstraintName("FK_Ranks_Abbreviations_Ranks")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.RanksPaygrade", b =>
                {
                    b.HasOne("MudSharp.Models.Paygrade", "Paygrade")
                        .WithMany("RanksPaygrades")
                        .HasForeignKey("PaygradeId")
                        .HasConstraintName("FK_Ranks_Paygrades_Paygrades")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Rank", "Rank")
                        .WithMany("RanksPaygrades")
                        .HasForeignKey("RankId")
                        .HasConstraintName("FK_Ranks_Paygrades_Ranks")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.RanksTitle", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "FutureProg")
                        .WithMany("RanksTitles")
                        .HasForeignKey("FutureProgId")
                        .HasConstraintName("FK_Ranks_Titles_FutureProgs")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.Rank", "Rank")
                        .WithMany("RanksTitles")
                        .HasForeignKey("RankId")
                        .HasConstraintName("FK_Ranks_Titles_Ranks")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.RegionalClimatesSeason", b =>
                {
                    b.HasOne("MudSharp.Models.RegionalClimate", "RegionalClimate")
                        .WithMany("RegionalClimatesSeasons")
                        .HasForeignKey("RegionalClimateId")
                        .HasConstraintName("FK_RegionalClimates_Seasons_RegionalClimates")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Season", "Season")
                        .WithMany("RegionalClimatesSeasons")
                        .HasForeignKey("SeasonId")
                        .HasConstraintName("FK_RegionalClimates_Seasons_Seasons")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Room", b =>
                {
                    b.HasOne("MudSharp.Models.Zone", "Zone")
                        .WithMany("Rooms")
                        .HasForeignKey("ZoneId")
                        .HasConstraintName("FK_Rooms_Zones")
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Script", b =>
                {
                    b.HasOne("MudSharp.Models.Knowledge", "Knowledge")
                        .WithMany("Scripts")
                        .HasForeignKey("KnowledgeId")
                        .HasConstraintName("FK_Scripts_Knowledges")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ScriptsDesignedLanguage", b =>
                {
                    b.HasOne("MudSharp.Models.Language", "Language")
                        .WithMany("ScriptsDesignedLanguages")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_Scripts_DesignedLanguages_Languages")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Script", "Script")
                        .WithMany("ScriptsDesignedLanguages")
                        .HasForeignKey("ScriptId")
                        .HasConstraintName("FK_Scripts_DesignedLanguages_Scripts")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Season", b =>
                {
                    b.HasOne("MudSharp.Models.Celestial", "Celestial")
                        .WithMany("Seasons")
                        .HasForeignKey("CelestialId")
                        .HasConstraintName("FK_Seasons_Celestials")
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Shard", b =>
                {
                    b.HasOne("MudSharp.Models.SkyDescriptionTemplate", "SkyDescriptionTemplate")
                        .WithMany("Shards")
                        .HasForeignKey("SkyDescriptionTemplateId")
                        .HasConstraintName("FK_Shards_SkyDescriptionTemplates")
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ShardsCalendars", b =>
                {
                    b.HasOne("MudSharp.Models.Shard", "Shard")
                        .WithMany("ShardsCalendars")
                        .HasForeignKey("ShardId")
                        .HasConstraintName("FK_Shards_Calendars_Shards")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ShardsCelestials", b =>
                {
                    b.HasOne("MudSharp.Models.Shard", "Shard")
                        .WithMany("ShardsCelestials")
                        .HasForeignKey("ShardId")
                        .HasConstraintName("FK_Shards_Celestials_Shards")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ShardsClocks", b =>
                {
                    b.HasOne("MudSharp.Models.Shard", "Shard")
                        .WithMany("ShardsClocks")
                        .HasForeignKey("ShardId")
                        .HasConstraintName("FK_Shards_Clocks_Shards")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ShieldType", b =>
                {
                    b.HasOne("MudSharp.Models.TraitDefinition", "BlockTrait")
                        .WithMany("ShieldTypes")
                        .HasForeignKey("BlockTraitId")
                        .HasConstraintName("FK_ShieldTypes_TraitDefinitions")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.ArmourType", "EffectiveArmourType")
                        .WithMany("ShieldTypes")
                        .HasForeignKey("EffectiveArmourTypeId")
                        .HasConstraintName("FK_ShieldTypes_ArmourTypes")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("MudSharp.Models.Shop", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "CanShopProg")
                        .WithMany("ShopsCanShopProg")
                        .HasForeignKey("CanShopProgId")
                        .HasConstraintName("FK_Shops_FutureProgs_Can")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.Currency", "Currency")
                        .WithMany("Shops")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("FK_Shops_Currencies")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.EconomicZone", "EconomicZone")
                        .WithMany("Shops")
                        .HasForeignKey("EconomicZoneId")
                        .HasConstraintName("FK_Shops_EconomicZones")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Cell", "StockroomCell")
                        .WithMany("ShopsStockroomCell")
                        .HasForeignKey("StockroomCellId")
                        .HasConstraintName("FK_Shops_Cells_Stockroom")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.FutureProg", "WhyCannotShopProg")
                        .WithMany("ShopsWhyCannotShopProg")
                        .HasForeignKey("WhyCannotShopProgId")
                        .HasConstraintName("FK_Shops_FutureProgs_WhyCant")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.Cell", "WorkshopCell")
                        .WithMany("ShopsWorkshopCell")
                        .HasForeignKey("WorkshopCellId")
                        .HasConstraintName("FK_Shops_Cells_Workshop")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("MudSharp.Models.ShopFinancialPeriodResult", b =>
                {
                    b.HasOne("MudSharp.Models.EconomicZone", "EconomicZone")
                        .WithMany("ShopFinancialPeriodResults")
                        .HasForeignKey("EconomicZoneId")
                        .HasConstraintName("FK_ShopFinancialPeriodResults_EconomicZones")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.FinancialPeriod", "FinancialPeriod")
                        .WithMany("ShopFinancialPeriodResults")
                        .HasForeignKey("FinancialPeriodId")
                        .HasConstraintName("FK_ShopFinancialPeriodResults_FinancialPeriods")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Shop", "Shop")
                        .WithMany("ShopFinancialPeriodResults")
                        .HasForeignKey("ShopId")
                        .HasConstraintName("FK_ShopFinancialPeriodResults_Shops")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ShopTransactionRecord", b =>
                {
                    b.HasOne("MudSharp.Models.Currency", "Currency")
                        .WithMany("ShopTransactionRecords")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("FK_ShopTransactionRecords_Currencies")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Shop", "Shop")
                        .WithMany("ShopTransactionRecords")
                        .HasForeignKey("ShopId")
                        .HasConstraintName("FK_ShopTransactionRecords_Shops")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ShopsStoreroomCell", b =>
                {
                    b.HasOne("MudSharp.Models.Cell", "Cell")
                        .WithMany("ShopsStoreroomCells")
                        .HasForeignKey("CellId")
                        .HasConstraintName("FK_Shops_StoreroomCells_Cells")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Shop", "Shop")
                        .WithMany("ShopsStoreroomCells")
                        .HasForeignKey("ShopId")
                        .HasConstraintName("FK_Shops_StoreroomCells_Shops")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.ShopsTill", b =>
                {
                    b.HasOne("MudSharp.Models.GameItem", "GameItem")
                        .WithMany("ShopsTills")
                        .HasForeignKey("GameItemId")
                        .HasConstraintName("FK_ShopTills_GameItems")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Shop", "Shop")
                        .WithMany("ShopsTills")
                        .HasForeignKey("ShopId")
                        .HasConstraintName("FK_ShopTills_Shops")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.SkyDescriptionTemplatesValue", b =>
                {
                    b.HasOne("MudSharp.Models.SkyDescriptionTemplate", "SkyDescriptionTemplate")
                        .WithMany("SkyDescriptionTemplatesValues")
                        .HasForeignKey("SkyDescriptionTemplateId")
                        .HasConstraintName("FK_SkyDescriptionTemplates_Values_SkyDescriptionTemplates")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Social", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "FutureProg")
                        .WithMany("Socials")
                        .HasForeignKey("FutureProgId")
                        .HasConstraintName("FK_Socials_FutureProgs")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("MudSharp.Models.SurgicalProcedure", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "AbortProg")
                        .WithMany("SurgicalProceduresAbortProg")
                        .HasForeignKey("AbortProgId")
                        .HasConstraintName("FK_SurgicalProcedures_FutureProgs_AbortProg")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.FutureProg", "CompletionProg")
                        .WithMany("SurgicalProceduresCompletionProg")
                        .HasForeignKey("CompletionProgId")
                        .HasConstraintName("FK_SurgicalProcedures_FutureProgs_CompletionProg")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.Knowledge", "KnowledgeRequired")
                        .WithMany("SurgicalProcedures")
                        .HasForeignKey("KnowledgeRequiredId")
                        .HasConstraintName("FK_SurgicalProcedures_Knowledges")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.FutureProg", "UsabilityProg")
                        .WithMany("SurgicalProceduresUsabilityProg")
                        .HasForeignKey("UsabilityProgId")
                        .HasConstraintName("FK_SurgicalProcedures_FutureProgs_Usability")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.FutureProg", "WhyCannotUseProg")
                        .WithMany("SurgicalProceduresWhyCannotUseProg")
                        .HasForeignKey("WhyCannotUseProgId")
                        .HasConstraintName("FK_SurgicalProcedures_FutureProgs_WhyCannotUseProg")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("MudSharp.Models.SurgicalProcedurePhase", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "OnPhaseProg")
                        .WithMany("SurgicalProcedurePhases")
                        .HasForeignKey("OnPhaseProgId")
                        .HasConstraintName("FK_SurgicalProcedurePhases_FutureProgs_OnPhaseProg")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.SurgicalProcedure", "SurgicalProcedure")
                        .WithMany("SurgicalProcedurePhases")
                        .HasForeignKey("SurgicalProcedureId")
                        .HasConstraintName("FK_SurgicalProcedurePhases_SurgicalProcudres")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Tag", b =>
                {
                    b.HasOne("MudSharp.Models.Tag", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_Tags_Parent")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.FutureProg", "ShouldSeeProg")
                        .WithMany("Tags")
                        .HasForeignKey("ShouldSeeProgId")
                        .HasConstraintName("FK_Tags_Futureprogs")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("MudSharp.Models.Terrain", b =>
                {
                    b.HasOne("MudSharp.Models.WeatherController", "WeatherController")
                        .WithMany("Terrains")
                        .HasForeignKey("WeatherControllerId")
                        .HasConstraintName("FK_Terrains_WeatherControllers")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("MudSharp.Models.TerrainsRangedCovers", b =>
                {
                    b.HasOne("MudSharp.Models.RangedCover", "RangedCover")
                        .WithMany("TerrainsRangedCovers")
                        .HasForeignKey("RangedCoverId")
                        .HasConstraintName("FK_Terrains_RangedCovers_RangedCovers")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Terrain", "Terrain")
                        .WithMany("TerrainsRangedCovers")
                        .HasForeignKey("TerrainId")
                        .HasConstraintName("FK_Terrains_RangedCovers_Terrains")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Timezone", b =>
                {
                    b.HasOne("MudSharp.Models.Clock", "Clock")
                        .WithMany("Timezones")
                        .HasForeignKey("ClockId")
                        .HasConstraintName("FK_Timezones_Clocks")
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Trait", b =>
                {
                    b.HasOne("MudSharp.Models.Body", "Body")
                        .WithMany("Traits")
                        .HasForeignKey("BodyId")
                        .HasConstraintName("FK_Traits_Bodies")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.TraitDefinition", "TraitDefinition")
                        .WithMany("Traits")
                        .HasForeignKey("TraitDefinitionId")
                        .HasConstraintName("FK_Traits_TraitDefinitions")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.TraitDefinition", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "AvailabilityProg")
                        .WithMany("TraitDefinitionsAvailabilityProg")
                        .HasForeignKey("AvailabilityProgId")
                        .HasConstraintName("FK_TraitDefinitions_AvailabilityProg")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.TraitExpression", "Expression")
                        .WithMany("TraitDefinitions")
                        .HasForeignKey("ExpressionId")
                        .HasConstraintName("FK_TraitDefinitions_TraitExpression");

                    b.HasOne("MudSharp.Models.FutureProg", "LearnableProg")
                        .WithMany("TraitDefinitionsLearnableProg")
                        .HasForeignKey("LearnableProgId")
                        .HasConstraintName("FK_TraitDefinitions_LearnableProg")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.FutureProg", "TeachableProg")
                        .WithMany("TraitDefinitionsTeachableProg")
                        .HasForeignKey("TeachableProgId")
                        .HasConstraintName("FK_TraitDefinitions_TeachableProg")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("MudSharp.Models.TraitDefinitionsChargenResources", b =>
                {
                    b.HasOne("MudSharp.Models.ChargenResource", "ChargenResource")
                        .WithMany("TraitDefinitionsChargenResources")
                        .HasForeignKey("ChargenResourceId")
                        .HasConstraintName("FK_TraitDefinitions_ChargenResources_ChargenResources")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.TraitDefinition", "TraitDefinition")
                        .WithMany("TraitDefinitionsChargenResources")
                        .HasForeignKey("TraitDefinitionId")
                        .HasConstraintName("FK_TraitDefinitions_ChargenResources_Races")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.TraitExpressionParameters", b =>
                {
                    b.HasOne("MudSharp.Models.TraitDefinition", "TraitDefinition")
                        .WithMany("TraitExpressionParameters")
                        .HasForeignKey("TraitDefinitionId")
                        .HasConstraintName("FK_TraitExpressionParameters_TraitDefinitions")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.TraitExpression", "TraitExpression")
                        .WithMany("TraitExpressionParameters")
                        .HasForeignKey("TraitExpressionId")
                        .HasConstraintName("FK_TraitExpressionParameters_TraitExpression")
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.WeaponAttack", b =>
                {
                    b.HasOne("MudSharp.Models.TraitExpression", "DamageExpression")
                        .WithMany("WeaponAttacksDamageExpression")
                        .HasForeignKey("DamageExpressionId")
                        .HasConstraintName("FK_WeaponAttacks_TraitExpression_Damage")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.FutureProg", "FutureProg")
                        .WithMany("WeaponAttacks")
                        .HasForeignKey("FutureProgId")
                        .HasConstraintName("FK_WeaponAttacks_FutureProgs")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.TraitExpression", "PainExpression")
                        .WithMany("WeaponAttacksPainExpression")
                        .HasForeignKey("PainExpressionId")
                        .HasConstraintName("FK_WeaponAttacks_TraitExpression_Pain")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.TraitExpression", "StunExpression")
                        .WithMany("WeaponAttacksStunExpression")
                        .HasForeignKey("StunExpressionId")
                        .HasConstraintName("FK_WeaponAttacks_TraitExpression_Stun")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.WeaponType", "WeaponType")
                        .WithMany("WeaponAttacks")
                        .HasForeignKey("WeaponTypeId")
                        .HasConstraintName("FK_WeaponAttacks_WeaponTypes")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("MudSharp.Models.WeaponType", b =>
                {
                    b.HasOne("MudSharp.Models.TraitDefinition", "AttackTrait")
                        .WithMany("WeaponTypesAttackTrait")
                        .HasForeignKey("AttackTraitId")
                        .HasConstraintName("FK_WeaponTypes_TraitDefinitions_Attack")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.TraitDefinition", "ParryTrait")
                        .WithMany("WeaponTypesParryTrait")
                        .HasForeignKey("ParryTraitId")
                        .HasConstraintName("FK_WeaponTypes_TraitDefinitions_Parry")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("MudSharp.Models.WearableSizeParameterRule", b =>
                {
                    b.HasOne("MudSharp.Models.TraitDefinition", "Trait")
                        .WithMany("WearableSizeParameterRule")
                        .HasForeignKey("TraitId")
                        .HasConstraintName("FK_WearableSizeParameterRule_TraitDefinitions");
                });

            modelBuilder.Entity("MudSharp.Models.WeatherController", b =>
                {
                    b.HasOne("MudSharp.Models.Celestial", "Celestial")
                        .WithMany("WeatherControllers")
                        .HasForeignKey("CelestialId")
                        .HasConstraintName("FK_WeatherControllers_Celestials");

                    b.HasOne("MudSharp.Models.Season", "CurrentSeason")
                        .WithMany("WeatherControllers")
                        .HasForeignKey("CurrentSeasonId")
                        .HasConstraintName("FK_WeatherControllers_Seasons")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.WeatherEvent", "CurrentWeatherEvent")
                        .WithMany("WeatherControllers")
                        .HasForeignKey("CurrentWeatherEventId")
                        .HasConstraintName("FK_WeatherControllers_WeatherEvents")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Clock", "FeedClock")
                        .WithMany("WeatherControllers")
                        .HasForeignKey("FeedClockId")
                        .HasConstraintName("FK_WeatherControllers_Clocks")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Timezone", "FeedClockTimeZone")
                        .WithMany("WeatherControllers")
                        .HasForeignKey("FeedClockTimeZoneId")
                        .HasConstraintName("FK_WeatherControllers_TimeZones")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.RegionalClimate", "RegionalClimate")
                        .WithMany("WeatherControllers")
                        .HasForeignKey("RegionalClimateId")
                        .HasConstraintName("FK_WeatherControllers_RegionalClimates")
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.WeatherEvent", b =>
                {
                    b.HasOne("MudSharp.Models.WeatherEvent", "CountsAs")
                        .WithMany("InverseCountsAs")
                        .HasForeignKey("CountsAsId")
                        .HasConstraintName("FK_WeatherEvents_WeatherEvents")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("MudSharp.Models.WitnessProfile", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "IdentityKnownProg")
                        .WithMany("WitnessProfilesIdentityKnownProg")
                        .HasForeignKey("IdentityKnownProgId")
                        .HasConstraintName("FK_WitnessProfiles_IdentityProg")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.FutureProg", "ReportingMultiplierProg")
                        .WithMany("WitnessProfilesReportingMultiplierProg")
                        .HasForeignKey("ReportingMultiplierProgId")
                        .HasConstraintName("FK_WitnessProfiles_MultiplierProg")
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.WitnessProfilesCooperatingAuthorities", b =>
                {
                    b.HasOne("MudSharp.Models.LegalAuthority", "LegalAuthority")
                        .WithMany("WitnessProfilesCooperatingAuthorities")
                        .HasForeignKey("LegalAuthorityId")
                        .HasConstraintName("FK_WitnessProfiles_CooperatingAuthorities_LegalAuthorities")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.WitnessProfile", "WitnessProfile")
                        .WithMany("WitnessProfilesCooperatingAuthorities")
                        .HasForeignKey("WitnessProfileId")
                        .HasConstraintName("FK_WitnessProfiles_CooperatingAuthorities_WitnessProfiles")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.WitnessProfilesIgnoredCriminalClasses", b =>
                {
                    b.HasOne("MudSharp.Models.LegalClass", "LegalClass")
                        .WithMany("WitnessProfilesIgnoredCriminalClasses")
                        .HasForeignKey("LegalClassId")
                        .HasConstraintName("FK_WitnessProfiles_IgnoredCriminalClasses_LegalClasses")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.WitnessProfile", "WitnessProfile")
                        .WithMany("WitnessProfilesIgnoredCriminalClasses")
                        .HasForeignKey("WitnessProfileId")
                        .HasConstraintName("FK_WitnessProfiles_IgnoredCriminalClasses_WitnessProfiles")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.WitnessProfilesIgnoredVictimClasses", b =>
                {
                    b.HasOne("MudSharp.Models.LegalClass", "LegalClass")
                        .WithMany("WitnessProfilesIgnoredVictimClasses")
                        .HasForeignKey("LegalClassId")
                        .HasConstraintName("FK_WitnessProfiles_IgnoredVictimClasses_LegalClasses")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.WitnessProfile", "WitnessProfile")
                        .WithMany("WitnessProfilesIgnoredVictimClasses")
                        .HasForeignKey("WitnessProfileId")
                        .HasConstraintName("FK_WitnessProfiles_IgnoredVictimClasses_WitnessProfiles")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Wound", b =>
                {
                    b.HasOne("MudSharp.Models.Character", "ActorOrigin")
                        .WithMany("Wounds")
                        .HasForeignKey("ActorOriginId")
                        .HasConstraintName("FK_Wounds_Characters")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.Body", "Body")
                        .WithMany("Wounds")
                        .HasForeignKey("BodyId")
                        .HasConstraintName("FK_Wounds_Bodies")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MudSharp.Models.GameItem", "GameItem")
                        .WithMany("WoundsGameItem")
                        .HasForeignKey("GameItemId")
                        .HasConstraintName("FK_Wounds_GameItemOwner")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("MudSharp.Models.GameItem", "LodgedItem")
                        .WithMany("WoundsLodgedItem")
                        .HasForeignKey("LodgedItemId")
                        .HasConstraintName("FK_Wounds_GameItems")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MudSharp.Models.GameItem", "ToolOrigin")
                        .WithMany("WoundsToolOrigin")
                        .HasForeignKey("ToolOriginId")
                        .HasConstraintName("FK_Wounds_GameItems_Tool")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("MudSharp.Models.Writing", b =>
                {
                    b.HasOne("MudSharp.Models.Character", "Author")
                        .WithMany("WritingsAuthor")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK_Writings_Characters_Author")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Language", "Language")
                        .WithMany("Writings")
                        .HasForeignKey("LanguageId")
                        .HasConstraintName("FK_Writings_Languages")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Script", "Script")
                        .WithMany("Writings")
                        .HasForeignKey("ScriptId")
                        .HasConstraintName("FK_Writings_Scripts")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Character", "TrueAuthor")
                        .WithMany("WritingsTrueAuthor")
                        .HasForeignKey("TrueAuthorId")
                        .HasConstraintName("FK_Writings_Characters_TrueAuthor")
                        .OnDelete(DeleteBehavior.SetNull);
                });

            modelBuilder.Entity("MudSharp.Models.Zone", b =>
                {
                    b.HasOne("MudSharp.Models.Cell", "DefaultCell")
                        .WithMany("Zones")
                        .HasForeignKey("DefaultCellId")
                        .HasConstraintName("FK_Zones_Cells");

                    b.HasOne("MudSharp.Models.Shard", "Shard")
                        .WithMany("Zones")
                        .HasForeignKey("ShardId")
                        .HasConstraintName("FK_Zones_Shards")
                        .IsRequired();

                    b.HasOne("MudSharp.Models.WeatherController", "WeatherController")
                        .WithMany("Zones")
                        .HasForeignKey("WeatherControllerId")
                        .HasConstraintName("FK_Zones_WeatherControllers");
                });

            modelBuilder.Entity("MudSharp.Models.ZonesTimezones", b =>
                {
                    b.HasOne("MudSharp.Models.Zone", "Zone")
                        .WithMany("ZonesTimezones")
                        .HasForeignKey("ZoneId")
                        .HasConstraintName("FK_Zones_Timezones_Zones")
                        .IsRequired();
                });
#pragma warning restore 612, 618
        }
    }
}
