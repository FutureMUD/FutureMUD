// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MudSharp.Database;

#nullable disable

namespace MudSharp.Migrations
{
    [DbContext(typeof(FuturemudDatabaseContext))]
    [Migration("20240601141550_DiscordOutputForChannels")]
    partial class DiscordOutputForChannels
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Proxies:ChangeTracking", false)
                .HasAnnotation("Proxies:CheckEquality", false)
                .HasAnnotation("Proxies:LazyLoading", true)
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("MarketMarketCategory", b =>
                {
                    b.Property<long>("MarketCategoriesId")
                        .HasColumnType("bigint");

                    b.Property<long>("MarketsId")
                        .HasColumnType("bigint");

                    b.HasKey("MarketCategoriesId", "MarketsId");

                    b.HasIndex("MarketsId");

                    b.ToTable("MarketMarketCategory");
                });

            modelBuilder.Entity("MudSharp.Models.Accent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ChargenAvailabilityProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Description"), "utf8");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int(11)");

                    b.Property<string>("Group")
                        .HasColumnType("varchar(50)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Group"), "utf8");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<string>("Suffix")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Suffix"), "utf8");

                    b.Property<string>("VagueSuffix")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("VagueSuffix"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex("LanguageId")
                        .HasDatabaseName("FK_Accents_Languages");

                    b.ToTable("Accents");
                });

            modelBuilder.Entity("MudSharp.Models.Account", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AccessStatus")
                        .HasColumnType("int(11)");

                    b.Property<ulong>("ActLawfully")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<int>("ActiveCharactersAllowed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'1'");

                    b.Property<ulong>("AppendNewlinesBetweenMultipleEchoesPerPrompt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<long?>("AuthorityGroupId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasDefaultValueSql("'0'");

                    b.Property<int>("CharacterNameOverlaySetting")
                        .HasColumnType("int(11)");

                    b.Property<ulong>("CodedRoomDescriptionAdditionsOnNewLine")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<DateTime>("CreationDate")
                        .HasColumnType("datetime");

                    b.Property<string>("CultureName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("CultureName"), "utf8");

                    b.Property<string>("Email")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Email"), "utf8");

                    b.Property<int>("FormatLength")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'110'");

                    b.Property<ulong>("HasBeenActiveInWeek")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<ulong>("HintsEnabled")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<int>("InnerFormatLength")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'80'");

                    b.Property<ulong>("IsRegistered")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<string>("LastLoginIp")
                        .HasColumnType("varchar(50)")
                        .HasColumnName("LastLoginIP")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("LastLoginIp"), "utf8");

                    b.Property<DateTime?>("LastLoginTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<int>("PageLength")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'22'");

                    b.Property<string>("Password")
                        .HasColumnType("varchar(1000)")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Password"), "utf8mb4");

                    b.Property<int>("PromptType")
                        .HasColumnType("int(11)");

                    b.Property<string>("RecoveryCode")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("RecoveryCode"), "utf8");

                    b.Property<string>("RegistrationCode")
                        .HasColumnType("varchar(50)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("RegistrationCode"), "utf8");

                    b.Property<long>("Salt")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("TabRoomDescriptions")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<string>("TimeZoneId")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("TimeZoneId"), "utf8");

                    b.Property<string>("UnitPreference")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("UnitPreference"), "utf8");

                    b.Property<ulong>("UseMccp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasColumnName("UseMCCP")
                        .HasDefaultValueSql("b'0'");

                    b.Property<ulong>("UseMsp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasColumnName("UseMSP")
                        .HasDefaultValueSql("b'0'");

                    b.Property<ulong>("UseMxp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasColumnName("UseMXP")
                        .HasDefaultValueSql("b'0'");

                    b.Property<ulong>("UseUnicode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.HasKey("Id");

                    b.HasIndex("AuthorityGroupId")
                        .HasDatabaseName("FK_Accounts_AuthorityGroups");

                    b.ToTable("Accounts");
                });

            modelBuilder.Entity("MudSharp.Models.AccountNote", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("AuthorId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("InGameTimeStamp")
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("InGameTimeStamp"), "utf8");

                    b.Property<ulong>("IsJournalEntry")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Subject"), "utf8");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Text"), "utf8");

                    b.Property<DateTime>("TimeStamp")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("FK_AccountNotes_Accounts");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("FK_AccountNotes_Author");

                    b.HasIndex("CharacterId")
                        .HasDatabaseName("FK_AccountNotes_Characters_idx");

                    b.ToTable("AccountNotes");
                });

            modelBuilder.Entity("MudSharp.Models.AccountsChargenResources", b =>
                {
                    b.Property<long>("AccountId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ChargenResourceId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<DateTime>("LastAwardDate")
                        .HasColumnType("datetime");

                    b.HasKey("AccountId", "ChargenResourceId")
                        .HasName("PRIMARY");

                    b.HasIndex("ChargenResourceId")
                        .HasDatabaseName("FK_Accounts_ChargenResources_ChargenResources");

                    b.ToTable("Accounts_ChargenResources", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.ActiveJob", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ActiveProjectId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("AlreadyHadClanPosition")
                        .HasColumnType("bit(1)");

                    b.Property<string>("BackpayOwed")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("BackpayOwed"), "utf8");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("CurrentPerformance")
                        .HasColumnType("double");

                    b.Property<ulong>("IsJobComplete")
                        .HasColumnType("bit(1)");

                    b.Property<string>("JobCommenced")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("JobCommenced"), "utf8");

                    b.Property<string>("JobDueToEnd")
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("JobDueToEnd"), "utf8");

                    b.Property<string>("JobEnded")
                        .HasColumnType("longtext");

                    b.Property<long>("JobListingId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("RevenueEarned")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("RevenueEarned"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex("ActiveProjectId");

                    b.HasIndex("CharacterId");

                    b.HasIndex("JobListingId");

                    b.ToTable("ActiveJobs", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.ActiveProject", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CellId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CurrentPhaseId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("ProjectRevisionNumber")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("CellId")
                        .HasDatabaseName("FK_ActiveProjects_Cells_idx");

                    b.HasIndex("CharacterId")
                        .HasDatabaseName("FK_ActiveProjects_Characters_idx");

                    b.HasIndex("CurrentPhaseId")
                        .HasDatabaseName("FK_ActiveProjects_ProjectPhases_idx");

                    b.HasIndex("ProjectId", "ProjectRevisionNumber")
                        .HasDatabaseName("FK_ActiveProjects_Projects_idx");

                    b.ToTable("ActiveProjects");
                });

            modelBuilder.Entity("MudSharp.Models.ActiveProjectLabour", b =>
                {
                    b.Property<long>("ActiveProjectId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ProjectLabourRequirementsId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("Progress")
                        .HasColumnType("double");

                    b.HasKey("ActiveProjectId", "ProjectLabourRequirementsId")
                        .HasName("PRIMARY");

                    b.HasIndex("ProjectLabourRequirementsId")
                        .HasDatabaseName("FK_ActiveProjectLabours_ProjectLabourRequirements_idx");

                    b.ToTable("ActiveProjectLabours");
                });

            modelBuilder.Entity("MudSharp.Models.ActiveProjectMaterial", b =>
                {
                    b.Property<long>("ActiveProjectId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ProjectMaterialRequirementsId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("Progress")
                        .HasColumnType("double");

                    b.HasKey("ActiveProjectId", "ProjectMaterialRequirementsId")
                        .HasName("PRIMARY");

                    b.HasIndex("ProjectMaterialRequirementsId")
                        .HasDatabaseName("FK_ActiveProjectMaterials_ProjectMaterialRequirements_idx");

                    b.ToTable("ActiveProjectMaterials");
                });

            modelBuilder.Entity("MudSharp.Models.Ally", b =>
                {
                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("AllyId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("Trusted")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.HasKey("CharacterId", "AllyId")
                        .HasName("PRIMARY");

                    b.HasIndex("AllyId")
                        .HasDatabaseName("FK_Allies_Characters_Target_idx");

                    b.ToTable("Allies");
                });

            modelBuilder.Entity("MudSharp.Models.AmmunitionTypes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("BaseAccuracy")
                        .HasColumnType("double");

                    b.Property<int>("BaseBlockDifficulty")
                        .HasColumnType("int(11)");

                    b.Property<int>("BaseDodgeDifficulty")
                        .HasColumnType("int(11)");

                    b.Property<double>("BreakChanceOnHit")
                        .HasColumnType("double");

                    b.Property<double>("BreakChanceOnMiss")
                        .HasColumnType("double");

                    b.Property<string>("DamageExpression")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("DamageExpression"), "utf8mb4");

                    b.Property<int>("DamageType")
                        .HasColumnType("int(11)");

                    b.Property<int>("Loudness")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8mb4");

                    b.Property<string>("PainExpression")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("PainExpression"), "utf8mb4");

                    b.Property<string>("RangedWeaponTypes")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("RangedWeaponTypes"), "utf8mb4");

                    b.Property<string>("SpecificType")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("SpecificType"), "utf8mb4");

                    b.Property<string>("StunExpression")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("StunExpression"), "utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("AmmunitionTypes");
                });

            modelBuilder.Entity("MudSharp.Models.Appointment", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CanNominateProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ClanId")
                        .HasColumnType("bigint(20)");

                    b.Property<double?>("ElectionLeadTimeMinutes")
                        .HasColumnType("double");

                    b.Property<double?>("ElectionTermMinutes")
                        .HasColumnType("double");

                    b.Property<int>("FameType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("0");

                    b.Property<long?>("InsigniaGameItemId")
                        .HasColumnType("bigint(20)");

                    b.Property<int?>("InsigniaGameItemRevnum")
                        .HasColumnType("int(11)");

                    b.Property<ulong>("IsAppointedByElection")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValue(0ul);

                    b.Property<ulong?>("IsSecretBallot")
                        .HasColumnType("bit(1)");

                    b.Property<int?>("MaximumConsecutiveTerms")
                        .HasColumnType("int(11)");

                    b.Property<int>("MaximumSimultaneousHolders")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'1'");

                    b.Property<int?>("MaximumTotalTerms")
                        .HasColumnType("int(11)");

                    b.Property<long?>("MinimumRankId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("MinimumRankToAppointId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<double?>("NominationPeriodMinutes")
                        .HasColumnType("double");

                    b.Property<long?>("NumberOfVotesProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("ParentAppointmentId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("PaygradeId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("Privileges")
                        .HasColumnType("bigint(20)");

                    b.Property<double?>("VotingPeriodMinutes")
                        .HasColumnType("double");

                    b.Property<long?>("WhyCantNominateProgId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("CanNominateProgId")
                        .HasDatabaseName("FK_Appointments_CanNominateProg_idx");

                    b.HasIndex("ClanId")
                        .HasDatabaseName("FK_Appointments_Clans");

                    b.HasIndex("MinimumRankId")
                        .HasDatabaseName("FK_Appointments_Ranks");

                    b.HasIndex("MinimumRankToAppointId")
                        .HasDatabaseName("FK_Appointments_Ranks_2");

                    b.HasIndex("NumberOfVotesProgId")
                        .HasDatabaseName("FK_Appointments_NumberOfVotesProg_idx");

                    b.HasIndex("ParentAppointmentId")
                        .HasDatabaseName("FK_Appointments_ParentAppointment");

                    b.HasIndex("PaygradeId")
                        .HasDatabaseName("FK_Appointments_Paygrades");

                    b.HasIndex("WhyCantNominateProgId")
                        .HasDatabaseName("FK_Appointments_WhyCantNominateProg_idx");

                    b.HasIndex("InsigniaGameItemId", "InsigniaGameItemRevnum")
                        .HasDatabaseName("FK_Appointments_GameItemProtos");

                    b.ToTable("Appointments");
                });

            modelBuilder.Entity("MudSharp.Models.AppointmentsAbbreviations", b =>
                {
                    b.Property<string>("Abbreviation")
                        .HasColumnType("varchar(50)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Abbreviation"), "utf8");

                    b.Property<long>("AppointmentId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("FutureProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Order")
                        .HasColumnType("int(11)");

                    b.HasKey("Abbreviation", "AppointmentId")
                        .HasName("PRIMARY");

                    b.HasIndex("AppointmentId")
                        .HasDatabaseName("FK_Appointments_Abbreviations_Appointments");

                    b.HasIndex("FutureProgId")
                        .HasDatabaseName("FK_Appointments_Abbreviations_FutureProgs");

                    b.ToTable("Appointments_Abbreviations", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.AppointmentsTitles", b =>
                {
                    b.Property<string>("Title")
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Title"), "utf8");

                    b.Property<long>("AppointmentId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("FutureProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<int?>("Order")
                        .HasColumnType("int(11)");

                    b.HasKey("Title", "AppointmentId")
                        .HasName("PRIMARY");

                    b.HasIndex("AppointmentId")
                        .HasDatabaseName("FK_Appointments_Titles_Appointments");

                    b.HasIndex("FutureProgId")
                        .HasDatabaseName("FK_Appointments_Titles_FutureProgs");

                    b.ToTable("Appointments_Titles", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.Areas", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<long?>("WeatherControllerId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("WeatherControllerId")
                        .HasDatabaseName("FK_Areas_WeatherControllers_idx");

                    b.ToTable("Areas");
                });

            modelBuilder.Entity("MudSharp.Models.AreasRooms", b =>
                {
                    b.Property<long>("AreaId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("RoomId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("AreaId", "RoomId")
                        .HasName("PRIMARY");

                    b.HasIndex("RoomId")
                        .HasDatabaseName("FK_Areas_Rooms_Rooms_idx");

                    b.ToTable("Areas_Rooms", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.ArmourType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("BaseDifficultyDegrees")
                        .HasColumnType("int(11)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8mb4");

                    b.Property<int>("MinimumPenetrationDegree")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8mb4");

                    b.Property<int>("StackedDifficultyDegrees")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.ToTable("ArmourTypes");
                });

            modelBuilder.Entity("MudSharp.Models.ArtificialIntelligence", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Type"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("ArtificialIntelligences");
                });

            modelBuilder.Entity("MudSharp.Models.AuctionHouse", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AuctionHouseCellId")
                        .HasColumnType("bigint(20)");

                    b.Property<decimal>("AuctionListingFeeFlat")
                        .HasColumnType("decimal(58,29)");

                    b.Property<decimal>("AuctionListingFeeRate")
                        .HasColumnType("decimal(58,29)");

                    b.Property<double>("DefaultListingTime")
                        .HasColumnType("double");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8");

                    b.Property<long>("EconomicZoneId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<long>("ProfitsBankAccountId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("AuctionHouseCellId");

                    b.HasIndex("EconomicZoneId");

                    b.HasIndex("ProfitsBankAccountId");

                    b.ToTable("AuctionHouses", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.AuthorityGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AccountsLevel")
                        .HasColumnType("int(11)");

                    b.Property<int>("AuthorityLevel")
                        .HasColumnType("int(11)");

                    b.Property<int>("CharacterApprovalLevel")
                        .HasColumnType("int(11)");

                    b.Property<int>("CharacterApprovalRisk")
                        .HasColumnType("int(11)");

                    b.Property<int>("CharactersLevel")
                        .HasColumnType("int(11)");

                    b.Property<int>("InformationLevel")
                        .HasColumnType("int(11)");

                    b.Property<int>("ItemsLevel")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<int>("PlanesLevel")
                        .HasColumnType("int(11)");

                    b.Property<int>("RoomsLevel")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.ToTable("AuthorityGroups");
                });

            modelBuilder.Entity("MudSharp.Models.AutobuilderAreaTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<string>("TemplateType")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("TemplateType"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("AutobuilderAreaTemplates");
                });

            modelBuilder.Entity("MudSharp.Models.AutobuilderRoomTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasColumnName("ID");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<string>("TemplateType")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("TemplateType"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("AutobuilderRoomTemplates");
                });

            modelBuilder.Entity("MudSharp.Models.Ban", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("BannerAccountId")
                        .HasColumnType("bigint(20)");

                    b.Property<DateTime?>("Expiry")
                        .HasColumnType("datetime");

                    b.Property<string>("IpMask")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("IpMask"), "utf8");

                    b.Property<string>("Reason")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Reason"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex("BannerAccountId")
                        .HasDatabaseName("FK_Bans_Accounts");

                    b.ToTable("Bans");
                });

            modelBuilder.Entity("MudSharp.Models.Bank", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Code")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Code"), "utf8");

                    b.Property<long>("EconomicZoneId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("MaximumBankAccountsPerCustomer")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<long>("PrimaryCurrencyId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("EconomicZoneId");

                    b.HasIndex("PrimaryCurrencyId");

                    b.ToTable("Banks", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.BankAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AccountCreationDate")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("AccountCreationDate"), "utf8");

                    b.Property<int>("AccountNumber")
                        .HasColumnType("int(11)");

                    b.Property<long?>("AccountOwnerCharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("AccountOwnerClanId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("AccountOwnerShopId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("AccountStatus")
                        .HasColumnType("int(11)");

                    b.Property<string>("AuthorisedBankPaymentItems")
                        .HasColumnType("longtext");

                    b.Property<long>("BankAccountTypeId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("BankId")
                        .HasColumnType("bigint(20)");

                    b.Property<decimal>("CurrentBalance")
                        .HasColumnType("decimal(58,29)");

                    b.Property<decimal>("CurrentMonthFees")
                        .HasColumnType("decimal(58,29)");

                    b.Property<decimal>("CurrentMonthInterest")
                        .HasColumnType("decimal(58,29)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<long?>("NominatedBenefactorAccountId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("AccountOwnerCharacterId");

                    b.HasIndex("AccountOwnerClanId");

                    b.HasIndex("AccountOwnerShopId");

                    b.HasIndex("BankAccountTypeId");

                    b.HasIndex("BankId");

                    b.HasIndex("NominatedBenefactorAccountId");

                    b.ToTable("BankAccounts", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.BankAccountTransaction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("AccountBalanceAfter")
                        .HasColumnType("decimal(58,29)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(58,29)");

                    b.Property<long>("BankAccountId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("TransactionDescription")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("TransactionDescription"), "utf8");

                    b.Property<string>("TransactionTime")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("TransactionTime"), "utf8");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int(11)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("BankAccountId");

                    b.ToTable("BankAccountTransactions", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.BankAccountType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BankId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CanCloseAccountProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CanOpenAccountProgCharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CanOpenAccountProgClanId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CanOpenAccountProgShopId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("CustomerDescription")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("CustomerDescription"), "utf8");

                    b.Property<decimal>("DailyFee")
                        .HasColumnType("decimal(58,29)");

                    b.Property<decimal>("DailyInterestRate")
                        .HasColumnType("decimal(58,29)");

                    b.Property<decimal>("DailyOverdrawnFee")
                        .HasColumnType("decimal(58,29)");

                    b.Property<decimal>("DailyOverdrawnInterestRate")
                        .HasColumnType("decimal(58,29)");

                    b.Property<decimal>("DepositFeeFlat")
                        .HasColumnType("decimal(58,29)");

                    b.Property<decimal>("DepositFeeRate")
                        .HasColumnType("decimal(58,29)");

                    b.Property<decimal>("MaximumOverdrawAmount")
                        .HasColumnType("decimal(58,29)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<int>("NumberOfPermittedPaymentItems")
                        .HasColumnType("int");

                    b.Property<decimal>("OverdrawFeeFlat")
                        .HasColumnType("decimal(58,29)");

                    b.Property<decimal>("OverdrawFeeRate")
                        .HasColumnType("decimal(58,29)");

                    b.Property<long?>("PaymentItemPrototypeId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("TransferFeeFlat")
                        .HasColumnType("decimal(58,29)");

                    b.Property<decimal>("TransferFeeOtherBankFlat")
                        .HasColumnType("decimal(58,29)");

                    b.Property<decimal>("TransferFeeOtherBankRate")
                        .HasColumnType("decimal(58,29)");

                    b.Property<decimal>("TransferFeeRate")
                        .HasColumnType("decimal(58,29)");

                    b.Property<decimal>("WithdrawalFleeFlat")
                        .HasColumnType("decimal(58,29)");

                    b.Property<decimal>("WithdrawalFleeRate")
                        .HasColumnType("decimal(58,29)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("BankId");

                    b.HasIndex("CanCloseAccountProgId");

                    b.HasIndex("CanOpenAccountProgCharacterId");

                    b.HasIndex("CanOpenAccountProgClanId");

                    b.HasIndex("CanOpenAccountProgShopId");

                    b.ToTable("BankAccountTypes", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.BankBranch", b =>
                {
                    b.Property<long>("BankId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CellId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("BankId", "CellId")
                        .HasName("PRIMARY");

                    b.HasIndex("CellId");

                    b.ToTable("BankBranches", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.BankCurrencyReserve", b =>
                {
                    b.Property<long>("BankId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint(20)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(58,29)");

                    b.HasKey("BankId", "CurrencyId")
                        .HasName("PRIMARY");

                    b.HasIndex("CurrencyId");

                    b.ToTable("BankCurrencyReserves", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.BankExchangeRate", b =>
                {
                    b.Property<long>("BankId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("FromCurrencyId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ToCurrencyId")
                        .HasColumnType("bigint(20)");

                    b.Property<decimal>("ExchangeRate")
                        .HasColumnType("decimal(58,29)");

                    b.HasKey("BankId", "FromCurrencyId", "ToCurrencyId")
                        .HasName("PRIMARY");

                    b.HasIndex("FromCurrencyId");

                    b.HasIndex("ToCurrencyId");

                    b.ToTable("BankExchangeRates", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.BankManager", b =>
                {
                    b.Property<long>("BankId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("BankId", "CharacterId")
                        .HasName("PRIMARY");

                    b.HasIndex("CharacterId");

                    b.ToTable("BankManagers", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.BankManagerAuditLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BankId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("DateTime")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("DateTime"), "utf8");

                    b.Property<string>("Detail")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Detail"), "utf8");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex("BankId");

                    b.HasIndex("CharacterId");

                    b.ToTable("BankManagerAuditLogs", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.BloodModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("BloodModels");
                });

            modelBuilder.Entity("MudSharp.Models.BloodModelsBloodtypes", b =>
                {
                    b.Property<long>("BloodModelId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("BloodtypeId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("BloodModelId", "BloodtypeId")
                        .HasName("PRIMARY");

                    b.HasIndex("BloodtypeId")
                        .HasDatabaseName("FK_BloodModels_Bloodtypes_Bloodtypes_idx");

                    b.ToTable("BloodModels_Bloodtypes", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.Bloodtype", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("Bloodtypes");
                });

            modelBuilder.Entity("MudSharp.Models.BloodtypeAntigen", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("BloodtypeAntigens");
                });

            modelBuilder.Entity("MudSharp.Models.BloodtypesBloodtypeAntigens", b =>
                {
                    b.Property<long>("BloodtypeId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("BloodtypeAntigenId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("BloodtypeId", "BloodtypeAntigenId")
                        .HasName("PRIMARY");

                    b.HasIndex("BloodtypeAntigenId")
                        .HasDatabaseName("FK_Bloodtypes_BloodtypeAntigens_BloodtypeAntigens_idx");

                    b.ToTable("Bloodtypes_BloodtypeAntigens", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.Board", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CalendarId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<ulong>("ShowOnLogin")
                        .HasColumnType("bit(1)");

                    b.HasKey("Id");

                    b.HasIndex("CalendarId");

                    b.ToTable("Boards");
                });

            modelBuilder.Entity("MudSharp.Models.BoardPost", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AuthorFullDescription")
                        .HasColumnType("varchar(8000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("AuthorFullDescription"), "utf8");

                    b.Property<long?>("AuthorId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("AuthorIsCharacter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValue(0ul);

                    b.Property<string>("AuthorName")
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("AuthorName"), "utf8");

                    b.Property<string>("AuthorShortDescription")
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("AuthorShortDescription"), "utf8");

                    b.Property<long>("BoardId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Content"), "utf8");

                    b.Property<string>("InGameDateTime")
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("InGameDateTime"), "utf8");

                    b.Property<DateTime>("PostTime")
                        .HasColumnType("datetime");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Title"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("FK_BoardsPosts_Accounts_idx");

                    b.HasIndex("BoardId")
                        .HasDatabaseName("FK_BoardPosts_Boards_idx");

                    b.ToTable("BoardPosts");
                });

            modelBuilder.Entity("MudSharp.Models.BodiesGameItems", b =>
                {
                    b.Property<long>("BodyId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("GameItemId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("EquippedOrder")
                        .HasColumnType("int(11)");

                    b.Property<long?>("WearProfile")
                        .HasColumnType("bigint(20)");

                    b.Property<int?>("Wielded")
                        .HasColumnType("int(11)");

                    b.HasKey("BodyId", "GameItemId")
                        .HasName("PRIMARY");

                    b.HasIndex("GameItemId")
                        .HasDatabaseName("FK_Bodies_GameItems_GameItems");

                    b.ToTable("Bodies_GameItems", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.BodiesImplants", b =>
                {
                    b.Property<long>("BodyId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ImplantId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("BodyId", "ImplantId")
                        .HasName("PRIMARY");

                    b.HasIndex("ImplantId")
                        .HasDatabaseName("FK_Bodies_Implants_GameItems_idx");

                    b.ToTable("Bodies_Implants", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.BodiesProsthetics", b =>
                {
                    b.Property<long>("BodyId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ProstheticId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("BodyId", "ProstheticId")
                        .HasName("PRIMARY");

                    b.HasIndex("ProstheticId")
                        .HasDatabaseName("FK_Bodies_Prosthetics_GameItems_idx");

                    b.ToTable("Bodies_Prosthetics", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.BodiesSeveredParts", b =>
                {
                    b.Property<long>("BodiesId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("BodypartProtoId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("BodiesId", "BodypartProtoId")
                        .HasName("PRIMARY");

                    b.HasIndex("BodypartProtoId")
                        .HasDatabaseName("FK_Bodies_SeveredParts_BodypartProtos_idx");

                    b.ToTable("Bodies_SeveredParts", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.Body", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("BloodtypeId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("BodyPrototypeId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("BodyPrototypeID");

                    b.Property<double>("CurrentBloodVolume")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'-1'");

                    b.Property<long?>("CurrentSpeed")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("CurrentStamina")
                        .HasColumnType("double");

                    b.Property<string>("EffectData")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("EffectData"), "utf8");

                    b.Property<long>("EthnicityId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("FullDescription")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("FullDescription"), "utf8");

                    b.Property<long?>("FullDescriptionPatternId")
                        .HasColumnType("bigint(20)");

                    b.Property<short>("Gender")
                        .HasColumnType("smallint(6)");

                    b.Property<double>("Height")
                        .HasColumnType("double");

                    b.Property<int>("HeldBreathLength")
                        .HasColumnType("int(11)");

                    b.Property<long>("Position")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("RaceId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Scars")
                        .HasColumnType("mediumtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Scars"), "utf8");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("varchar(1000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ShortDescription"), "utf8");

                    b.Property<long?>("ShortDescriptionPatternId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Tattoos")
                        .HasColumnType("mediumtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Tattoos"), "utf8");

                    b.Property<double>("Weight")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("BloodtypeId")
                        .HasDatabaseName("FK_Bodies_Bloodtypes_idx");

                    b.HasIndex("EthnicityId")
                        .HasDatabaseName("FK_Bodies_Ethnicities_idx");

                    b.HasIndex("FullDescriptionPatternId")
                        .HasDatabaseName("FK_Bodies_EntityDescriptionPatterns_Full_idx");

                    b.HasIndex("RaceId")
                        .HasDatabaseName("FK_Bodies_Races");

                    b.HasIndex("ShortDescriptionPatternId")
                        .HasDatabaseName("FK_Bodies_EntityDescriptionPatterns_Short_idx");

                    b.ToTable("Bodies");
                });

            modelBuilder.Entity("MudSharp.Models.BodyDrugDose", b =>
                {
                    b.Property<long>("BodyId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("DrugId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("Active")
                        .HasColumnType("bit(1)");

                    b.Property<double>("Grams")
                        .HasColumnType("double");

                    b.Property<int>("OriginalVector")
                        .HasColumnType("int(11)");

                    b.HasKey("BodyId", "DrugId", "Active")
                        .HasName("PRIMARY");

                    b.HasIndex("DrugId")
                        .HasDatabaseName("FK_Bodies_DrugDoses_Drugs_idx");

                    b.ToTable("Bodies_DrugDoses", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.BodyProto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ConsiderString")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ConsiderString"), "utf8");

                    b.Property<long?>("CountsAsId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("DefaultSmashingBodypartId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("LegDescriptionPlural")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1000)")
                        .HasDefaultValueSql("'legs'")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("LegDescriptionPlural"), "utf8");

                    b.Property<string>("LegDescriptionSingular")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1000)")
                        .HasDefaultValueSql("'leg'")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("LegDescriptionSingular"), "utf8");

                    b.Property<int>("MinimumLegsToStand")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'2'");

                    b.Property<int>("MinimumWingsToFly")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'2'");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<long?>("StaminaRecoveryProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("WearSizeParameterId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("WielderDescriptionPlural")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(4000)")
                        .HasDefaultValueSql("'hands'")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("WielderDescriptionPlural"), "utf8");

                    b.Property<string>("WielderDescriptionSingle")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(4000)")
                        .HasDefaultValueSql("'hand'")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("WielderDescriptionSingle"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex("CountsAsId")
                        .HasDatabaseName("FK_BodyPrototype_BodyPrototype_idx");

                    b.HasIndex("DefaultSmashingBodypartId")
                        .HasDatabaseName("FK_BodyPrototype_Bodyparts_idx");

                    b.HasIndex("WearSizeParameterId")
                        .HasDatabaseName("FK_BodyPrototype_WearableSizeParameterRule");

                    b.ToTable("BodyProtos");
                });

            modelBuilder.Entity("MudSharp.Models.BodyProtosAdditionalBodyparts", b =>
                {
                    b.Property<long>("BodyProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("BodypartId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Usage")
                        .HasColumnType("varchar(50)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Usage"), "utf8");

                    b.HasKey("BodyProtoId", "BodypartId", "Usage")
                        .HasName("PRIMARY");

                    b.HasIndex("BodyProtoId")
                        .HasDatabaseName("FK_BodyProtos_AdditionalBodyparts_BodyProtos_idx");

                    b.HasIndex("BodypartId")
                        .HasDatabaseName("FK_BodyProtos_AdditionalBodyparts_BodypartProto_idx");

                    b.ToTable("BodyProtos_AdditionalBodyparts", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.BodyProtosPositions", b =>
                {
                    b.Property<long>("BodyProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Position")
                        .HasColumnType("int(11)");

                    b.HasKey("BodyProtoId", "Position");

                    b.HasIndex("BodyProtoId")
                        .HasDatabaseName("FK_BodyProtosPositions_BodyProtos_idx");

                    b.ToTable("BodyProtosPositions");
                });

            modelBuilder.Entity("MudSharp.Models.BodypartGroupDescriber", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Comment")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Comment"), "utf8");

                    b.Property<string>("DescribedAs")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("DescribedAs"), "utf8");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Type"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("BodypartGroupDescribers");
                });

            modelBuilder.Entity("MudSharp.Models.BodypartGroupDescribersBodyProtos", b =>
                {
                    b.Property<long>("BodypartGroupDescriberId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("BodyProtoId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("BodypartGroupDescriberId", "BodyProtoId")
                        .HasName("PRIMARY");

                    b.HasIndex("BodyProtoId")
                        .HasDatabaseName("FK_BGD_BodyProtos_BodyProtos");

                    b.ToTable("BodypartGroupDescribers_BodyProtos", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.BodypartGroupDescribersBodypartProtos", b =>
                {
                    b.Property<long>("BodypartGroupDescriberId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("BodypartProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("Mandatory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.HasKey("BodypartGroupDescriberId", "BodypartProtoId")
                        .HasName("PRIMARY");

                    b.HasIndex("BodypartProtoId")
                        .HasDatabaseName("FK_BGD_BodypartProtos_BodypartProto");

                    b.ToTable("BodypartGroupDescribers_BodypartProtos", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.BodypartGroupDescribersShapeCount", b =>
                {
                    b.Property<long>("BodypartGroupDescriptionRuleId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("MaxCount")
                        .HasColumnType("int(11)");

                    b.Property<int>("MinCount")
                        .HasColumnType("int(11)");

                    b.HasKey("BodypartGroupDescriptionRuleId", "TargetId")
                        .HasName("PRIMARY");

                    b.HasIndex("TargetId")
                        .HasDatabaseName("FK_BGD_ShapeCount_BodypartShape");

                    b.ToTable("BodypartGroupDescribers_ShapeCount", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.BodypartInternalInfos", b =>
                {
                    b.Property<long>("BodypartProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("InternalPartId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("HitChance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'5'");

                    b.Property<ulong>("IsPrimaryOrganLocation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<string>("ProximityGroup")
                        .HasColumnType("varchar(45)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ProximityGroup"), "utf8");

                    b.HasKey("BodypartProtoId", "InternalPartId")
                        .HasName("PRIMARY");

                    b.HasIndex("BodypartProtoId")
                        .HasDatabaseName("FK_BodypartInternalInfos_BodypartProtos_idx");

                    b.HasIndex("InternalPartId")
                        .HasDatabaseName("FK_BodypartInternalInfos_BodypartProtos_Internal_idx");

                    b.ToTable("BodypartInternalInfos");
                });

            modelBuilder.Entity("MudSharp.Models.BodypartProto", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Alignment")
                        .HasColumnType("int(11)");

                    b.Property<long?>("ArmourTypeId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("BleedModifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'0.1'");

                    b.Property<long>("BodyId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("BodypartShapeId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("BodypartType")
                        .HasColumnType("int(11)");

                    b.Property<long?>("CountAsId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("DamageModifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.Property<long>("DefaultMaterialId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Description"), "utf8");

                    b.Property<int?>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<double>("HypoxiaDamagePerTick")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'0.2'");

                    b.Property<double>("ImplantSpace")
                        .HasColumnType("double");

                    b.Property<double>("ImplantSpaceOccupied")
                        .HasColumnType("double");

                    b.Property<ulong>("IsCore")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<int>("IsOrgan")
                        .HasColumnType("int(11)");

                    b.Property<ulong>("IsVital")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<int>("Location")
                        .HasColumnType("int(11)");

                    b.Property<int>("MaxLife")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'100'");

                    b.Property<int?>("MaxSingleSize")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<double>("PainModifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("RelativeHitChance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'100'");

                    b.Property<double>("RelativeInfectability")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("SeveredThreshold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'100'");

                    b.Property<ulong>("Significant")
                        .HasColumnType("bit(1)");

                    b.Property<int>("Size")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'5'");

                    b.Property<double>("StunModifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.Property<ulong?>("Unary")
                        .HasColumnType("bit(1)");

                    b.Property<double>("WeightLimit")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("ArmourTypeId")
                        .HasDatabaseName("FK_BodypartProto_ArmourTypes_idx");

                    b.HasIndex("BodyId")
                        .HasDatabaseName("FK_BodypartProto_BodyPrototype");

                    b.HasIndex("BodypartShapeId")
                        .HasDatabaseName("FK_BodypartProto_BodypartShape");

                    b.HasIndex("CountAsId")
                        .HasDatabaseName("FK_BodypartProto_BodypartProto_idx");

                    b.HasIndex("DefaultMaterialId")
                        .HasDatabaseName("FK_BodypartProto_Materials_idx");

                    b.ToTable("BodypartProto", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.BodypartProtoAlignmentHits", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Alignment")
                        .HasColumnType("int(11)");

                    b.Property<long>("BodypartProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<int?>("HitChance")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("BodypartProtoId")
                        .HasDatabaseName("FK_BodypartProto_AlignmentHits_BodypartProto");

                    b.ToTable("BodypartProto_AlignmentHits", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.BodypartProtoBodypartProtoUpstream", b =>
                {
                    b.Property<long>("Child")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("Parent")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Child", "Parent")
                        .HasName("PRIMARY");

                    b.HasIndex("Parent")
                        .HasDatabaseName("FKParent");

                    b.ToTable("BodypartProto_BodypartProto_Upstream", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.BodypartProtoOrientationHits", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BodypartProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<int?>("HitChance")
                        .HasColumnType("int(11)");

                    b.Property<int>("Orientation")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("BodypartProtoId")
                        .HasDatabaseName("FK_BodypartProto_OrientationHits_BodypartProto");

                    b.ToTable("BodypartProto_OrientationHits", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.BodypartShape", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("BodypartShape", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.Bodypartshapecountview", b =>
                {
                    b.Property<sbyte>("BodypartGroupDescriptionRuleId")
                        .HasColumnType("tinyint(4)");

                    b.Property<sbyte>("DescribedAs")
                        .HasColumnType("tinyint(4)");

                    b.Property<sbyte>("MaxCount")
                        .HasColumnType("tinyint(4)");

                    b.Property<sbyte>("MinCount")
                        .HasColumnType("tinyint(4)");

                    b.Property<sbyte>("Name")
                        .HasColumnType("tinyint(4)");

                    b.Property<sbyte>("TargetId")
                        .HasColumnType("tinyint(4)");

                    b.ToTable("bodypartshapecountview", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.BoneOrganCoverage", b =>
                {
                    b.Property<long>("BoneId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("OrganId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("CoverageChance")
                        .HasColumnType("double");

                    b.HasKey("BoneId", "OrganId")
                        .HasName("PRIMARY");

                    b.HasIndex("OrganId")
                        .HasDatabaseName("FK_BoneOrganCoverages_BodypartProto_Organ_idx");

                    b.ToTable("BoneOrganCoverages");
                });

            modelBuilder.Entity("MudSharp.Models.ButcheryProductItems", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ButcheryProductId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("ButcheryProductItemscol")
                        .HasColumnType("varchar(45)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ButcheryProductItemscol"), "utf8");

                    b.Property<double>("DamageThreshold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'10'");

                    b.Property<long?>("DamagedProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("DamagedQuantity")
                        .HasColumnType("int(11)");

                    b.Property<long>("NormalProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("NormalQuantity")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("ButcheryProductId")
                        .HasDatabaseName("FK_ButcheryProductItems_ButcheryProducts_idx");

                    b.ToTable("ButcheryProductItems");
                });

            modelBuilder.Entity("MudSharp.Models.ButcheryProducts", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CanProduceProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("IsPelt")
                        .HasColumnType("bit(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<string>("Subcategory")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Subcategory"), "utf8");

                    b.Property<long>("TargetBodyId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("CanProduceProgId")
                        .HasDatabaseName("FK_ButcheryProducts_FutureProgs_idx");

                    b.HasIndex("TargetBodyId")
                        .HasDatabaseName("FK_ButcheryProducts_BodyProtos_idx");

                    b.ToTable("ButcheryProducts");
                });

            modelBuilder.Entity("MudSharp.Models.ButcheryProductsBodypartProtos", b =>
                {
                    b.Property<long>("ButcheryProductId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("BodypartProtoId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ButcheryProductId", "BodypartProtoId")
                        .HasName("PRIMARY");

                    b.HasIndex("BodypartProtoId")
                        .HasDatabaseName("FK_ButcheryProducts_BodypartProtos_BodypartProtos_idx");

                    b.ToTable("ButcheryProducts_BodypartProtos", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.Calendar", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Date")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Date"), "utf8");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8");

                    b.Property<long>("FeedClockId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.ToTable("Calendars");
                });

            modelBuilder.Entity("MudSharp.Models.Celestial", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CelestialType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(30)")
                        .HasDefaultValue("OldSun")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("CelestialType"), "utf8");

                    b.Property<int>("CelestialYear")
                        .HasColumnType("int(11)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8");

                    b.Property<long>("FeedClockId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("LastYearBump")
                        .HasColumnType("int(11)");

                    b.Property<int>("Minutes")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.ToTable("Celestials");
                });

            modelBuilder.Entity("MudSharp.Models.Cell", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CurrentOverlayId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("EffectData")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("EffectData"), "utf8");

                    b.Property<long?>("ForagableProfileId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("RoomId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("Temporary")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.HasKey("Id");

                    b.HasIndex("CurrentOverlayId")
                        .HasDatabaseName("FK_Cells_CellOverlays");

                    b.HasIndex("RoomId")
                        .HasDatabaseName("FK_Cells_Rooms");

                    b.ToTable("Cells");
                });

            modelBuilder.Entity("MudSharp.Models.CellMagicResource", b =>
                {
                    b.Property<long>("CellId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("MagicResourceId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.HasKey("CellId", "MagicResourceId")
                        .HasName("PRIMARY");

                    b.HasIndex("MagicResourceId")
                        .HasDatabaseName("FK_Cells_MagicResources_MagicResources_idx");

                    b.ToTable("Cells_MagicResources", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.CellOverlay", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("AddedLight")
                        .HasColumnType("double");

                    b.Property<double>("AmbientLightFactor")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.Property<long?>("AtmosphereId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("AtmosphereType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'gas'")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("AtmosphereType"), "utf8");

                    b.Property<string>("CellDescription")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("CellDescription"), "utf8");

                    b.Property<long>("CellId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("CellName")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("CellName"), "utf8");

                    b.Property<long>("CellOverlayPackageId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("CellOverlayPackageRevisionNumber")
                        .HasColumnType("int(11)");

                    b.Property<long?>("HearingProfileId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<int>("OutdoorsType")
                        .HasColumnType("int(11)");

                    b.Property<ulong>("SafeQuit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<long>("TerrainId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("CellId")
                        .HasDatabaseName("FK_CellOverlays_Cells");

                    b.HasIndex("HearingProfileId")
                        .HasDatabaseName("FK_CellOverlays_HearingProfiles");

                    b.HasIndex("TerrainId")
                        .HasDatabaseName("FK_CellOverlays_Terrains");

                    b.HasIndex("CellOverlayPackageId", "CellOverlayPackageRevisionNumber")
                        .HasDatabaseName("FK_CellOverlays_CellOverlayPackages");

                    b.ToTable("CellOverlays");
                });

            modelBuilder.Entity("MudSharp.Models.CellOverlayExit", b =>
                {
                    b.Property<long>("CellOverlayId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ExitId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("CellOverlayId", "ExitId")
                        .HasName("PRIMARY");

                    b.HasIndex("ExitId")
                        .HasDatabaseName("FK_CellOverlays_Exits_Exits");

                    b.ToTable("CellOverlays_Exits", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.CellOverlayPackage", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("RevisionNumber")
                        .HasColumnType("int(11)");

                    b.Property<long>("EditableItemId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.HasKey("Id", "RevisionNumber")
                        .HasName("PRIMARY");

                    b.HasIndex("EditableItemId")
                        .HasDatabaseName("FK_CellOverlayPackages_EditableItems");

                    b.ToTable("CellOverlayPackages");
                });

            modelBuilder.Entity("MudSharp.Models.CellsForagableYield", b =>
                {
                    b.Property<long>("CellId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("ForagableType")
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ForagableType"), "utf8mb4");

                    b.Property<double>("Yield")
                        .HasColumnType("double");

                    b.HasKey("CellId", "ForagableType")
                        .HasName("PRIMARY");

                    b.ToTable("Cells_ForagableYields", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.CellsGameItems", b =>
                {
                    b.Property<long>("CellId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("GameItemId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("CellId", "GameItemId")
                        .HasName("PRIMARY");

                    b.HasIndex("GameItemId")
                        .HasDatabaseName("FK_Cells_GameItems_GameItems");

                    b.ToTable("Cells_GameItems", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.CellsRangedCovers", b =>
                {
                    b.Property<long>("CellId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("RangedCoverId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("CellId", "RangedCoverId")
                        .HasName("PRIMARY");

                    b.HasIndex("RangedCoverId")
                        .HasDatabaseName("FK_Cells_RangedCovers_RangedCovers_idx");

                    b.ToTable("Cells_RangedCovers", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.CellsTags", b =>
                {
                    b.Property<long>("CellId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("CellId", "TagId")
                        .HasName("PRIMARY");

                    b.HasIndex("TagId")
                        .HasDatabaseName("FK_Cells_Tags_Tags_idx");

                    b.ToTable("Cells_Tags", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.Channel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<ulong>("AddToGuideCommandTree")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<ulong>("AddToPlayerCommandTree")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<ulong>("AnnounceChannelJoiners")
                        .HasColumnType("bit(1)");

                    b.Property<ulong>("AnnounceMissedListeners")
                        .HasColumnType("bit(1)");

                    b.Property<string>("ChannelColour")
                        .IsRequired()
                        .HasColumnType("char(10)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ChannelColour"), "utf8");

                    b.Property<long>("ChannelListenerProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("ChannelName")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ChannelName"), "utf8");

                    b.Property<long>("ChannelSpeakerProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong?>("DiscordChannelId")
                        .HasColumnType("bigint unsigned");

                    b.Property<int>("Mode")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("ChannelListenerProgId")
                        .HasDatabaseName("FK_Channels_FutureProgs_Listener");

                    b.HasIndex("ChannelSpeakerProgId")
                        .HasDatabaseName("FK_Channels_FutureProgs_Speaker");

                    b.ToTable("Channels");
                });

            modelBuilder.Entity("MudSharp.Models.ChannelCommandWord", b =>
                {
                    b.Property<string>("Word")
                        .HasColumnType("varchar(50)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Word"), "utf8");

                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Word")
                        .HasName("PRIMARY");

                    b.HasIndex("ChannelId")
                        .HasDatabaseName("FK_ChannelCommandWords_Channels");

                    b.ToTable("ChannelCommandWords");
                });

            modelBuilder.Entity("MudSharp.Models.ChannelIgnorer", b =>
                {
                    b.Property<long>("ChannelId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ChannelId", "AccountId")
                        .HasName("PRIMARY");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("FK_ChannelIgnorers_Accounts");

                    b.ToTable("ChannelIgnorers");
                });

            modelBuilder.Entity("MudSharp.Models.Character", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("AlcoholLitres")
                        .HasColumnType("double");

                    b.Property<long>("BirthdayCalendarId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("BirthdayDate")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("BirthdayDate"), "utf8");

                    b.Property<long>("BodyId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("Calories")
                        .HasColumnType("double");

                    b.Property<long?>("ChargenId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("CombatBrief")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<DateTime>("CreationTime")
                        .HasColumnType("datetime");

                    b.Property<long>("CultureId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CurrencyId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CurrentAccentId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CurrentCombatSettingId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CurrentLanguageId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("CurrentProjectHours")
                        .HasColumnType("double");

                    b.Property<long?>("CurrentProjectId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CurrentProjectLabourId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CurrentScriptId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CurrentWritingLanguageId")
                        .HasColumnType("bigint(20)");

                    b.Property<DateTime?>("DeathTime")
                        .HasColumnType("datetime");

                    b.Property<int>("DominantHandAlignment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'3'");

                    b.Property<double>("DrinkSatiatedHours")
                        .HasColumnType("double");

                    b.Property<string>("EffectData")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("EffectData"), "utf8");

                    b.Property<double>("FoodSatiatedHours")
                        .HasColumnType("double");

                    b.Property<short>("Gender")
                        .HasColumnType("smallint(6)");

                    b.Property<string>("IntroductionMessage")
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("IntroductionMessage"), "utf8");

                    b.Property<ulong>("IsAdminAvatar")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<DateTime?>("LastLoginTime")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("LastLogoutTime")
                        .HasColumnType("datetime");

                    b.Property<long>("Location")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("LongTermPlan")
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("LongTermPlan"), "utf8");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<string>("NameInfo")
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("NameInfo"), "utf8");

                    b.Property<string>("NeedsModel")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("'NoNeeds'")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("NeedsModel"), "utf8");

                    b.Property<ulong>("NoMercy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<string>("Outfits")
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Outfits"), "utf8");

                    b.Property<string>("PositionEmote")
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("PositionEmote"), "utf8");

                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("PositionModifier")
                        .HasColumnType("int(11)");

                    b.Property<long?>("PositionTargetId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("PositionTargetType")
                        .HasColumnType("varchar(45)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("PositionTargetType"), "utf8");

                    b.Property<int>("PreferredDefenseType")
                        .HasColumnType("int(11)");

                    b.Property<ulong>("RoomBrief")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<int>("RoomLayer")
                        .HasColumnType("int(11)");

                    b.Property<string>("ShortTermPlan")
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ShortTermPlan"), "utf8");

                    b.Property<ulong>("ShownIntroductionMessage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<int>("State")
                        .HasColumnType("int(11)");

                    b.Property<int>("Status")
                        .HasColumnType("int(11)");

                    b.Property<int>("TotalMinutesPlayed")
                        .HasColumnType("int(11)");

                    b.Property<double>("WaterLitres")
                        .HasColumnType("double");

                    b.Property<int>("WritingStyle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'8256'");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("FK_Characters_Accounts");

                    b.HasIndex("BodyId")
                        .HasDatabaseName("FK_Characters_Bodies");

                    b.HasIndex("ChargenId")
                        .HasDatabaseName("FK_Characters_Chargens_idx");

                    b.HasIndex("CultureId")
                        .HasDatabaseName("FK_Characters_Cultures");

                    b.HasIndex("CurrencyId")
                        .HasDatabaseName("FK_Characters_Currencies");

                    b.HasIndex("CurrentAccentId")
                        .HasDatabaseName("FK_Characters_Accents_idx");

                    b.HasIndex("CurrentLanguageId")
                        .HasDatabaseName("FK_Characters_Languages_idx");

                    b.HasIndex("CurrentProjectId")
                        .HasDatabaseName("FK_Characters_ActiveProjects_idx");

                    b.HasIndex("CurrentProjectLabourId")
                        .HasDatabaseName("FK_Characters_ProjectLabourRequirements_idx");

                    b.HasIndex("CurrentScriptId")
                        .HasDatabaseName("FK_Characters_Scripts_idx");

                    b.HasIndex("CurrentWritingLanguageId")
                        .HasDatabaseName("FK_Characters_Languages_Written_idx");

                    b.HasIndex("Location")
                        .HasDatabaseName("FK_Characters_Cells");

                    b.ToTable("Characters");
                });

            modelBuilder.Entity("MudSharp.Models.CharacterAccent", b =>
                {
                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("AccentId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Familiarity")
                        .HasColumnType("int(11)");

                    b.Property<ulong>("IsPreferred")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.HasKey("CharacterId", "AccentId")
                        .HasName("PRIMARY");

                    b.HasIndex("AccentId")
                        .HasDatabaseName("FK_Characters_Accents_Accents_idx");

                    b.ToTable("Characters_Accents", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.CharacterCombatSetting", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<ulong>("AttackCriticallyInjured")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<ulong>("AttackUnarmedOrHelpless")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<ulong>("AutomaticallyMoveTowardsTarget")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<double>("AuxiliaryPercentage")
                        .HasColumnType("double");

                    b.Property<long?>("AvailabilityProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CharacterOwnerId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("ClassificationsAllowed")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ClassificationsAllowed"), "utf8mb4");

                    b.Property<int>("DefaultPreferredDefenseType")
                        .HasColumnType("int(11)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Description"), "utf8mb4");

                    b.Property<ulong>("FallbackToUnarmedIfNoWeapon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<long>("ForbiddenIntentions")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("GlobalTemplate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<int>("GrappleResponse")
                        .HasColumnType("int(11)");

                    b.Property<int>("InventoryManagement")
                        .HasColumnType("int(11)");

                    b.Property<double>("MagicUsePercentage")
                        .HasColumnType("double");

                    b.Property<ulong>("ManualPositionManagement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<string>("MeleeAttackOrderPreference")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("'0 1 2 3 4'")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("MeleeAttackOrderPreference"), "utf8mb4");

                    b.Property<double>("MinimumStaminaToAttack")
                        .HasColumnType("double");

                    b.Property<ulong>("MoveToMeleeIfCannotEngageInRangedCombat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<int>("MovementManagement")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8mb4");

                    b.Property<double>("NaturalWeaponPercentage")
                        .HasColumnType("double");

                    b.Property<ulong>("PreferFavouriteWeapon")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<ulong>("PreferNonContactClinchBreaking")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<ulong>("PreferShieldUse")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<ulong>("PreferToFightArmed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<long>("PreferredIntentions")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("PreferredMeleeMode")
                        .HasColumnType("int(11)");

                    b.Property<int>("PreferredRangedMode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("PreferredWeaponSetup")
                        .HasColumnType("int(11)");

                    b.Property<double>("PsychicUsePercentage")
                        .HasColumnType("double");

                    b.Property<int>("PursuitMode")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("RangedManagement")
                        .HasColumnType("int(11)");

                    b.Property<long>("RequiredIntentions")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("RequiredMinimumAim")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'0.5'");

                    b.Property<ulong>("SkirmishToOtherLocations")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<double>("WeaponUsePercentage")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilityProgId")
                        .HasDatabaseName("FK_CharacterCombatSettings_FutureProgs_idx");

                    b.HasIndex("CharacterOwnerId")
                        .HasDatabaseName("FK_CharacterCombatSettings_Characters_idx");

                    b.ToTable("CharacterCombatSettings");
                });

            modelBuilder.Entity("MudSharp.Models.CharacterIntroTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AppliesToCharacterProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<int>("Order")
                        .HasColumnType("int(11)");

                    b.Property<int>("ResolutionPriority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("Id");

                    b.HasIndex("AppliesToCharacterProgId")
                        .HasDatabaseName("FK_CharacterIntroTemplates_FutureProgs_idx");

                    b.ToTable("CharacterIntroTemplates");
                });

            modelBuilder.Entity("MudSharp.Models.CharacterKnowledge", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("HowAcquired")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("HowAcquired"), "utf8");

                    b.Property<long>("KnowledgeId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("TimesTaught")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("WhenAcquired")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .HasDatabaseName("FK_CHARACTERKNOWLEDGES_CHARACTERS");

                    b.HasIndex("KnowledgeId")
                        .HasDatabaseName("FK_CHARACTERKNOWLEDGES_KNOWLEDGES_idx");

                    b.ToTable("CharacterKnowledges");
                });

            modelBuilder.Entity("MudSharp.Models.CharacterLog", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccountId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CellId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Command")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Command"), "utf8mb4");

                    b.Property<ulong>("IsPlayerCharacter")
                        .HasColumnType("bit(1)");

                    b.Property<DateTime>("Time")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("FK_CharacterLog_Accounts_idx");

                    b.HasIndex("CellId")
                        .HasDatabaseName("FK_CharacterLog_Cells_idx");

                    b.HasIndex("CharacterId")
                        .HasDatabaseName("FK_CharacterLog_Characters_idx");

                    b.ToTable("CharacterLog", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.Characteristic", b =>
                {
                    b.Property<long>("BodyId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Type")
                        .HasColumnType("int(11)");

                    b.Property<long>("CharacteristicId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("BodyId", "Type")
                        .HasName("PRIMARY");

                    b.HasIndex("CharacteristicId")
                        .HasDatabaseName("FK_Characteristics_CharacteristicValues");

                    b.ToTable("Characteristics");
                });

            modelBuilder.Entity("MudSharp.Models.CharacteristicDefinition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<int?>("ChargenDisplayType")
                        .HasColumnType("int(11)");

                    b.Property<string>("Definition")
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Description"), "utf8");

                    b.Property<string>("Model")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'standard'")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Model"), "utf8");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Pattern")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Pattern"), "utf8");

                    b.Property<int>("Type")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("FK_CharacteristicDefinitions_Parent");

                    b.ToTable("CharacteristicDefinitions");
                });

            modelBuilder.Entity("MudSharp.Models.CharacteristicProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Description"), "utf8");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<long>("TargetDefinitionId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Type"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex("TargetDefinitionId")
                        .HasDatabaseName("FK_CharacteristicProfiles_CharacteristicDefinitions");

                    b.ToTable("CharacteristicProfiles");
                });

            modelBuilder.Entity("MudSharp.Models.CharacteristicValue", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AdditionalValue")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("AdditionalValue"), "utf8");

                    b.Property<ulong>("Default")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<long>("DefinitionId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("FutureProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<long?>("OngoingValidityProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Pluralisation")
                        .HasColumnType("int(11)");

                    b.Property<string>("Value")
                        .HasColumnType("varchar(50)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Value"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex("DefinitionId")
                        .HasDatabaseName("FK_CharacteristicValues_CharacteristicDefinitions");

                    b.HasIndex("FutureProgId")
                        .HasDatabaseName("FK_CharacteristicValues_FutureProgs");

                    b.HasIndex("OngoingValidityProgId");

                    b.ToTable("CharacteristicValues");
                });

            modelBuilder.Entity("MudSharp.Models.CharactersChargenRoles", b =>
                {
                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ChargenRoleId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("CharacterId", "ChargenRoleId")
                        .HasName("PRIMARY");

                    b.HasIndex("ChargenRoleId")
                        .HasDatabaseName("FK_Characters_ChargenRoles_ChargenRoles");

                    b.ToTable("Characters_ChargenRoles", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.CharactersLanguages", b =>
                {
                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("CharacterId", "LanguageId")
                        .HasName("PRIMARY");

                    b.HasIndex("LanguageId")
                        .HasDatabaseName("FK_Characters_Languages_Languages_idx");

                    b.ToTable("Characters_Languages", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.CharactersMagicResources", b =>
                {
                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("MagicResourceId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.HasKey("CharacterId", "MagicResourceId")
                        .HasName("PRIMARY");

                    b.HasIndex("MagicResourceId")
                        .HasDatabaseName("FK_Characters_MagicResources_MagicResources_idx");

                    b.ToTable("Characters_MagicResources", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.CharactersScripts", b =>
                {
                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ScriptId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("CharacterId", "ScriptId")
                        .HasName("PRIMARY");

                    b.HasIndex("ScriptId")
                        .HasDatabaseName("FK_Characters_Scripts_Scripts_idx");

                    b.ToTable("Characters_Scripts", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.Chargen", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint(20)");

                    b.Property<DateTime?>("ApprovalTime")
                        .HasColumnType("datetime");

                    b.Property<long?>("ApprovedById")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8");

                    b.Property<int?>("MinimumApprovalAuthority")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(12000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<int>("Status")
                        .HasColumnType("int(11)");

                    b.Property<DateTime?>("SubmitTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("FK_Chargens_Accounts");

                    b.ToTable("Chargens");
                });

            modelBuilder.Entity("MudSharp.Models.ChargenAdvice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AdviceText")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("AdviceText"), "utf8");

                    b.Property<string>("AdviceTitle")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("AdviceTitle"), "utf8");

                    b.Property<int>("ChargenStage")
                        .HasColumnType("int(11)");

                    b.Property<long?>("ShouldShowAdviceProgId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("ShouldShowAdviceProgId")
                        .HasDatabaseName("FK_ChargenAdvices_FutureProgs_idx");

                    b.ToTable("ChargenAdvices");
                });

            modelBuilder.Entity("MudSharp.Models.ChargenAdvicesChargenRoles", b =>
                {
                    b.Property<long>("ChargenAdviceId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ChargenRoleId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ChargenAdviceId", "ChargenRoleId")
                        .HasName("PRIMARY");

                    b.HasIndex("ChargenRoleId")
                        .HasDatabaseName("FK_ChargenAdvices_ChargenRoles_ChargenRoles_idx");

                    b.ToTable("ChargenAdvices_ChargenRoles", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.ChargenAdvicesCultures", b =>
                {
                    b.Property<long>("ChargenAdviceId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CultureId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ChargenAdviceId", "CultureId")
                        .HasName("PRIMARY");

                    b.HasIndex("CultureId")
                        .HasDatabaseName("FK_ChargenAdvices_Cultures_Cultures_idx");

                    b.ToTable("ChargenAdvices_Cultures", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.ChargenAdvicesEthnicities", b =>
                {
                    b.Property<long>("ChargenAdviceId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("EthnicityId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ChargenAdviceId", "EthnicityId")
                        .HasName("PRIMARY");

                    b.HasIndex("EthnicityId")
                        .HasDatabaseName("FK_ChargenAdvices_Ethnicities_Ethnicities_idx");

                    b.ToTable("ChargenAdvices_Ethnicities", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.ChargenAdvicesRaces", b =>
                {
                    b.Property<long>("ChargenAdviceId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("RaceId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ChargenAdviceId", "RaceId")
                        .HasName("PRIMARY");

                    b.HasIndex("RaceId")
                        .HasDatabaseName("FK_ChargenAdvices_Races_Races_idx");

                    b.ToTable("ChargenAdvices_Races", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.ChargenResource", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Alias"), "utf8");

                    b.Property<long?>("ControlProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("FK_ChargenResources_FutureProgs")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("MaximumNumberAwardedPerAward")
                        .HasColumnType("double");

                    b.Property<string>("MaximumResourceFormula")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("MaximumResourceFormula"), "utf8");

                    b.Property<long?>("MaximumResourceId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("MinimumTimeBetweenAwards")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<int>("PermissionLevelRequiredToAward")
                        .HasColumnType("int(11)");

                    b.Property<int>("PermissionLevelRequiredToCircumventMinimumTime")
                        .HasColumnType("int(11)");

                    b.Property<string>("PluralName")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("PluralName"), "utf8");

                    b.Property<ulong>("ShowToPlayerInScore")
                        .HasColumnType("bit(1)");

                    b.Property<string>("TextDisplayedToPlayerOnAward")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("TextDisplayedToPlayerOnAward"), "utf8");

                    b.Property<string>("TextDisplayedToPlayerOnDeduct")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("TextDisplayedToPlayerOnDeduct"), "utf8");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Type"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex("FK_ChargenResources_FutureProgs");

                    b.ToTable("ChargenResources");
                });

            modelBuilder.Entity("MudSharp.Models.ChargenRole", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AvailabilityProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("ChargenBlurb")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ChargenBlurb"), "utf8");

                    b.Property<ulong>("Expired")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<int>("MaximumNumberAlive")
                        .HasColumnType("int(11)");

                    b.Property<int>("MaximumNumberTotal")
                        .HasColumnType("int(11)");

                    b.Property<int>("MinimumAuthorityToApprove")
                        .HasColumnType("int(11)");

                    b.Property<int>("MinimumAuthorityToView")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<long>("PosterId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Type")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilityProgId")
                        .HasDatabaseName("FK_ChargenRoles_FutureProgs");

                    b.HasIndex("PosterId")
                        .HasDatabaseName("FK_ChargenRoles_Accounts");

                    b.ToTable("ChargenRoles");
                });

            modelBuilder.Entity("MudSharp.Models.ChargenRolesApprovers", b =>
                {
                    b.Property<long>("ChargenRoleId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ApproverId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ChargenRoleId", "ApproverId")
                        .HasName("PRIMARY");

                    b.HasIndex("ApproverId")
                        .HasDatabaseName("FK_ChargenRoles_Approvers_Accounts");

                    b.ToTable("ChargenRoles_Approvers", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.ChargenRolesClanMemberships", b =>
                {
                    b.Property<long>("ChargenRoleId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ClanId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("PaygradeId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("RankId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ChargenRoleId", "ClanId")
                        .HasName("PRIMARY");

                    b.HasIndex("ClanId")
                        .HasDatabaseName("FK_ChargenRoles_ClanMemberships_Clans");

                    b.HasIndex("PaygradeId");

                    b.HasIndex("RankId");

                    b.ToTable("ChargenRoles_ClanMemberships", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.ChargenRolesClanMembershipsAppointments", b =>
                {
                    b.Property<long>("ChargenRoleId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ClanId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("AppointmentId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ChargenRoleId", "ClanId", "AppointmentId")
                        .HasName("PRIMARY");

                    b.ToTable("ChargenRoles_ClanMemberships_Appointments", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.ChargenRolesCost", b =>
                {
                    b.Property<long>("ChargenRoleId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ChargenResourceId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("RequirementOnly")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<int>("Amount")
                        .HasColumnType("int(11)");

                    b.HasKey("ChargenRoleId", "ChargenResourceId", "RequirementOnly")
                        .HasName("PRIMARY");

                    b.HasIndex("ChargenResourceId")
                        .HasDatabaseName("FK_ChargenRoles_Costs_ChargenResources");

                    b.ToTable("ChargenRoles_Costs", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.ChargenRolesCurrency", b =>
                {
                    b.Property<long>("ChargenRoleId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint(20)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(58,29)");

                    b.HasKey("ChargenRoleId", "CurrencyId")
                        .HasName("PRIMARY");

                    b.HasIndex("CurrencyId")
                        .HasDatabaseName("FK_ChargenRoles_Currencies_Currencies");

                    b.ToTable("ChargenRoles_Currencies", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.ChargenRolesMerit", b =>
                {
                    b.Property<long>("ChargenRoleId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("MeritId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ChargenRoleId", "MeritId")
                        .HasName("PRIMARY");

                    b.HasIndex("MeritId")
                        .HasDatabaseName("FK_ChargenRoles_Merits_Merits_idx");

                    b.ToTable("ChargenRoles_Merits", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.ChargenRolesTrait", b =>
                {
                    b.Property<long>("ChargenRoleId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("TraitId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.Property<ulong>("GiveIfDoesntHave")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.HasKey("ChargenRoleId", "TraitId")
                        .HasName("PRIMARY");

                    b.HasIndex("TraitId")
                        .HasDatabaseName("FK_ChargenRoles_Traits_Currencies");

                    b.ToTable("ChargenRoles_Traits", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.ChargenScreenStoryboard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("ChargenStage")
                        .HasColumnType("int(11)");

                    b.Property<string>("ChargenType")
                        .HasColumnType("varchar(50)");

                    b.Property<int>("NextStage")
                        .HasColumnType("int(11)");

                    b.Property<int>("Order")
                        .HasColumnType("int(11)");

                    b.Property<string>("StageDefinition")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("StageDefinition"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("ChargenScreenStoryboards", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.ChargenScreenStoryboardDependentStage", b =>
                {
                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Dependency")
                        .HasColumnType("int(11)");

                    b.HasKey("OwnerId", "Dependency")
                        .HasName("PRIMARY");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("FK_ChargenScreenStoryboardDependentStages_Owner");

                    b.ToTable("ChargenScreenStoryboardDependentStages", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.Check", b =>
                {
                    b.Property<int>("Type")
                        .HasColumnType("int(11)");

                    b.Property<long>("CheckTemplateId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("MaximumDifficultyForImprovement")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'10'");

                    b.Property<long>("TraitExpressionId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Type")
                        .HasName("PRIMARY");

                    b.HasIndex("CheckTemplateId")
                        .HasDatabaseName("FK_Checks_CheckTemplates");

                    b.HasIndex("TraitExpressionId")
                        .HasDatabaseName("FK_Checks_TraitExpression");

                    b.ToTable("Checks");
                });

            modelBuilder.Entity("MudSharp.Models.CheckTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<ulong>("CanBranchIfTraitMissing")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<string>("CheckMethod")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(25)")
                        .HasDefaultValueSql("'Standard'")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("CheckMethod"), "utf8");

                    b.Property<string>("Definition")
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8");

                    b.Property<short>("FailIfTraitMissingMode")
                        .HasColumnType("smallint(6)");

                    b.Property<ulong>("ImproveTraits")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("CheckTemplates");
                });

            modelBuilder.Entity("MudSharp.Models.CheckTemplateDifficulty", b =>
                {
                    b.Property<int>("Difficulty")
                        .HasColumnType("int(11)");

                    b.Property<long>("CheckTemplateId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("Modifier")
                        .HasColumnType("double");

                    b.HasKey("Difficulty", "CheckTemplateId")
                        .HasName("PRIMARY");

                    b.HasIndex("CheckTemplateId")
                        .HasDatabaseName("FK_CheckTemplateDifficulties_CheckTemplates");

                    b.ToTable("CheckTemplateDifficulties");
                });

            modelBuilder.Entity("MudSharp.Models.Clan", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Alias"), "utf8");

                    b.Property<long?>("BankAccountId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CalendarId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("ClanId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Description"), "utf8");

                    b.Property<decimal?>("DiscordChannelId")
                        .HasColumnType("decimal(20,0)");

                    b.Property<string>("FullName")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("FullName"), "utf8");

                    b.Property<ulong>("IsTemplate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<int?>("MaximumPeriodsOfUncollectedBackPay")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<long?>("OnPayProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("PayIntervalModifier")
                        .HasColumnType("int(11)");

                    b.Property<int>("PayIntervalOther")
                        .HasColumnType("int(11)");

                    b.Property<string>("PayIntervalReferenceDate")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("PayIntervalReferenceDate"), "utf8");

                    b.Property<string>("PayIntervalReferenceTime")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("PayIntervalReferenceTime"), "utf8");

                    b.Property<int>("PayIntervalType")
                        .HasColumnType("int(11)");

                    b.Property<long?>("PaymasterId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("PaymasterItemProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("ShowClanMembersInWho")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<ulong>("ShowFamousMembersInNotables")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<string>("Sphere")
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Sphere"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("CalendarId")
                        .HasDatabaseName("FK_Clans_Calendars");

                    b.HasIndex("ClanId");

                    b.HasIndex("OnPayProgId")
                        .HasDatabaseName("FK_Clans_FutureProgs_idx");

                    b.HasIndex("PaymasterId")
                        .HasDatabaseName("FK_Clans_Characters_idx");

                    b.ToTable("Clans");
                });

            modelBuilder.Entity("MudSharp.Models.ClanAdministrationCell", b =>
                {
                    b.Property<long>("ClanId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CellId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ClanId", "CellId")
                        .HasName("PRIMARY");

                    b.HasIndex("CellId")
                        .HasDatabaseName("FK_Clans_AdministrationCells_Cells_idx");

                    b.ToTable("Clans_AdministrationCells", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.ClanMembership", b =>
                {
                    b.Property<long>("ClanId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("ArchivedMembership")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValue(0ul);

                    b.Property<string>("JoinDate")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("JoinDate"), "utf8");

                    b.Property<long?>("ManagerId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("PaygradeId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("PersonalName")
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("PersonalName"), "utf8");

                    b.Property<long>("RankId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ClanId", "CharacterId")
                        .HasName("PRIMARY");

                    b.HasIndex("CharacterId")
                        .HasDatabaseName("FK_ClanMemberships_Characters");

                    b.HasIndex("ManagerId")
                        .HasDatabaseName("FK_ClanMemberships_Manager");

                    b.ToTable("ClanMemberships");
                });

            modelBuilder.Entity("MudSharp.Models.ClanMembershipBackpay", b =>
                {
                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ClanId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<decimal>("Amount")
                        .HasColumnType("decimal(58,29)");

                    b.HasKey("CurrencyId", "ClanId", "CharacterId")
                        .HasName("PRIMARY");

                    b.HasIndex("ClanId", "CharacterId")
                        .HasDatabaseName("FK_ClanMemberships_Backpay_ClanMemberships");

                    b.ToTable("ClanMemberships_Backpay", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.ClanMembershipsAppointments", b =>
                {
                    b.Property<long>("ClanId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("AppointmentId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ClanId", "CharacterId", "AppointmentId")
                        .HasName("PRIMARY");

                    b.HasIndex("AppointmentId")
                        .HasDatabaseName("FK_ClanMemberships_Appointments_Appointments");

                    b.ToTable("ClanMemberships_Appointments", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.ClanTreasuryCell", b =>
                {
                    b.Property<long>("ClanId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CellId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ClanId", "CellId")
                        .HasName("PRIMARY");

                    b.HasIndex("CellId")
                        .HasDatabaseName("FK_Clans_TreasuryCells_Cells_idx");

                    b.ToTable("Clans_TreasuryCells", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.ClimateModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("MinimumMinutesBetweenFlavourEchoes")
                        .HasColumnType("int(11)");

                    b.Property<double>("MinuteFlavourEchoChance")
                        .HasColumnType("double");

                    b.Property<int>("MinuteProcessingInterval")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Type"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("ClimateModels");
                });

            modelBuilder.Entity("MudSharp.Models.ClimateModelSeason", b =>
                {
                    b.Property<long>("ClimateModelId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("SeasonId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("IncrementalAdditionalChangeChanceFromStableWeather")
                        .HasColumnType("double");

                    b.Property<double>("MaximumAdditionalChangeChanceFromStableWeather")
                        .HasColumnType("double");

                    b.HasKey("ClimateModelId", "SeasonId")
                        .HasName("PRIMARY");

                    b.HasIndex("SeasonId");

                    b.ToTable("ClimateModelSeason");
                });

            modelBuilder.Entity("MudSharp.Models.ClimateModelSeasonEvent", b =>
                {
                    b.Property<long>("ClimateModelId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("SeasonId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("WeatherEventId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("ChangeChance")
                        .HasColumnType("double");

                    b.Property<string>("Transitions")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Transitions"), "utf8");

                    b.HasKey("ClimateModelId", "SeasonId", "WeatherEventId")
                        .HasName("PRIMARY");

                    b.HasIndex("SeasonId");

                    b.HasIndex("WeatherEventId");

                    b.ToTable("ClimateModelSeasonEvent");
                });

            modelBuilder.Entity("MudSharp.Models.Clock", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8");

                    b.Property<int>("Hours")
                        .HasColumnType("int(11)");

                    b.Property<int>("Minutes")
                        .HasColumnType("int(11)");

                    b.Property<long>("PrimaryTimezoneId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Seconds")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.ToTable("Clocks");
                });

            modelBuilder.Entity("MudSharp.Models.Coin", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("FullDescription")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("FullDescription"), "utf8");

                    b.Property<string>("GeneralForm")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("GeneralForm"), "utf8");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<string>("PluralWord")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("PluralWord"), "utf8");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ShortDescription"), "utf8");

                    b.Property<ulong>("UseForChange")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValue(1ul);

                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(58,29)");

                    b.Property<double>("Weight")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId")
                        .HasDatabaseName("FK_Coins_Currencies");

                    b.ToTable("Coins");
                });

            modelBuilder.Entity("MudSharp.Models.Colour", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Basic")
                        .HasColumnType("int(11)");

                    b.Property<int>("Blue")
                        .HasColumnType("int(11)");

                    b.Property<string>("Fancy")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Fancy"), "utf8");

                    b.Property<int>("Green")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<int>("Red")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.ToTable("Colours");
                });

            modelBuilder.Entity("MudSharp.Models.CombatAction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("longtext");

                    b.Property<double>("BaseDelay")
                        .HasColumnType("double");

                    b.Property<int>("ExertionLevel")
                        .HasColumnType("int");

                    b.Property<long>("Intentions")
                        .HasColumnType("bigint");

                    b.Property<int>("MoveDifficulty")
                        .HasColumnType("int");

                    b.Property<int>("MoveType")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int>("RecoveryDifficultyFailure")
                        .HasColumnType("int");

                    b.Property<int>("RecoveryDifficultySuccess")
                        .HasColumnType("int");

                    b.Property<string>("RequiredPositionStateIds")
                        .HasColumnType("longtext");

                    b.Property<double>("StaminaCost")
                        .HasColumnType("double");

                    b.Property<long>("TraitDefinitionId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("UsabilityProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("Weighting")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("TraitDefinitionId");

                    b.HasIndex("UsabilityProgId");

                    b.ToTable("CombatActions");
                });

            modelBuilder.Entity("MudSharp.Models.CombatMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AuxiliaryProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("Chance")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("FailureMessage")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("FailureMessage"), "utf8mb4");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Message"), "utf8mb4");

                    b.Property<int?>("Outcome")
                        .HasColumnType("int(11)");

                    b.Property<int>("Priority")
                        .HasColumnType("int(11)");

                    b.Property<long?>("ProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Type")
                        .HasColumnType("int(11)");

                    b.Property<int?>("Verb")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("AuxiliaryProgId");

                    b.HasIndex("ProgId")
                        .HasDatabaseName("FK_CombatMessages_FutureProgs_idx");

                    b.ToTable("CombatMessages");
                });

            modelBuilder.Entity("MudSharp.Models.CombatMessagesCombatActions", b =>
                {
                    b.Property<long>("CombatMessageId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CombatActionId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("CombatMessageId", "CombatActionId")
                        .HasName("PRIMARY");

                    b.HasIndex("CombatActionId")
                        .HasDatabaseName("FK_CombatMessages_CombatActions_WeaponAttacks_idx");

                    b.ToTable("CombatMessages_CombatActions", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.CombatMessagesWeaponAttacks", b =>
                {
                    b.Property<long>("CombatMessageId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("WeaponAttackId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("CombatMessageId", "WeaponAttackId")
                        .HasName("PRIMARY");

                    b.HasIndex("WeaponAttackId")
                        .HasDatabaseName("FK_CombatMessages_WeaponAttacks_WeaponAttacks_idx");

                    b.ToTable("CombatMessages_WeaponAttacks", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.ConveyancingLocation", b =>
                {
                    b.Property<long>("EconomicZoneId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CellId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("EconomicZoneId", "CellId")
                        .HasName("PRIMARY");

                    b.HasIndex("CellId");

                    b.ToTable("ConveyancingLocations", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.CorpseModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Definition")
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8mb4");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Description"), "utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8mb4");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Type"), "utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("CorpseModels");
                });

            modelBuilder.Entity("MudSharp.Models.Craft", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("RevisionNumber")
                        .HasColumnType("int(11)");

                    b.Property<string>("ActionDescription")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ActionDescription"), "utf8");

                    b.Property<string>("ActiveCraftItemSdesc")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(200)")
                        .HasColumnName("ActiveCraftItemSDesc")
                        .HasDefaultValueSql("'a craft in progress'")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ActiveCraftItemSdesc"), "utf8");

                    b.Property<long?>("AppearInCraftsListProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Blurb")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Blurb"), "utf8");

                    b.Property<long?>("CanUseProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Category"), "utf8");

                    b.Property<int>("CheckDifficulty")
                        .HasColumnType("int(11)");

                    b.Property<double>("CheckQualityWeighting")
                        .HasColumnType("double");

                    b.Property<long?>("CheckTraitId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("EditableItemId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("FailPhase")
                        .HasColumnType("int(11)");

                    b.Property<int>("FailThreshold")
                        .HasColumnType("int(11)");

                    b.Property<int>("FreeSkillChecks")
                        .HasColumnType("int(11)");

                    b.Property<double>("InputQualityWeighting")
                        .HasColumnType("double");

                    b.Property<ulong>("Interruptable")
                        .HasColumnType("bit(1)");

                    b.Property<ulong>("IsPracticalCheck")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<long?>("OnUseProgCancelId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("OnUseProgCompleteId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("OnUseProgStartId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("QualityFormula")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("QualityFormula"), "utf8");

                    b.Property<double>("ToolQualityWeighting")
                        .HasColumnType("double");

                    b.Property<long?>("WhyCannotUseProgId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id", "RevisionNumber")
                        .HasName("PRIMARY");

                    b.HasIndex("AppearInCraftsListProgId")
                        .HasDatabaseName("FK_Crafts_FutureProgs_AppearInCraftsListProg_idx");

                    b.HasIndex("CanUseProgId")
                        .HasDatabaseName("FK_Crafts_FutureProgs_CanUseProg_idx");

                    b.HasIndex("CheckTraitId")
                        .HasDatabaseName("FK_Crafts_TraitDefinitions_idx");

                    b.HasIndex("EditableItemId")
                        .HasDatabaseName("FK_Crafts_EditableItems_idx");

                    b.HasIndex("OnUseProgCancelId")
                        .HasDatabaseName("FK_Crafts_FutureProgs_OnUseProgCancel_idx");

                    b.HasIndex("OnUseProgCompleteId")
                        .HasDatabaseName("FK_Crafts_FutureProgs_OnUseProgComplete_idx");

                    b.HasIndex("OnUseProgStartId")
                        .HasDatabaseName("FK_Crafts_FutureProgs_OnUseProgStart_idx");

                    b.HasIndex("WhyCannotUseProgId")
                        .HasDatabaseName("FK_Crafts_FutureProgs_WhyCannotUseProg_idx");

                    b.ToTable("Crafts");
                });

            modelBuilder.Entity("MudSharp.Models.CraftInput", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CraftId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("CraftRevisionNumber")
                        .HasColumnType("int(11)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8");

                    b.Property<double>("InputQualityWeight")
                        .HasColumnType("double");

                    b.Property<string>("InputType")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("InputType"), "utf8");

                    b.Property<DateTime>("OriginalAdditionTime")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("CraftId", "CraftRevisionNumber")
                        .HasDatabaseName("FK_CraftInputs_Crafts_idx");

                    b.ToTable("CraftInputs");
                });

            modelBuilder.Entity("MudSharp.Models.CraftPhase", b =>
                {
                    b.Property<long>("CraftPhaseId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("CraftPhaseRevisionNumber")
                        .HasColumnType("int(11)");

                    b.Property<int>("PhaseNumber")
                        .HasColumnType("int(11)");

                    b.Property<string>("Echo")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Echo"), "utf8");

                    b.Property<string>("FailEcho")
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("FailEcho"), "utf8");

                    b.Property<double>("PhaseLengthInSeconds")
                        .HasColumnType("double");

                    b.HasKey("CraftPhaseId", "CraftPhaseRevisionNumber", "PhaseNumber")
                        .HasName("PRIMARY");

                    b.ToTable("CraftPhases");
                });

            modelBuilder.Entity("MudSharp.Models.CraftProduct", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CraftId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("CraftRevisionNumber")
                        .HasColumnType("int(11)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8");

                    b.Property<ulong>("IsFailProduct")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<int?>("MaterialDefiningInputIndex")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("OriginalAdditionTime")
                        .HasColumnType("datetime");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ProductType"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex("CraftId", "CraftRevisionNumber")
                        .HasDatabaseName("FK_CraftProducts_Crafts_idx");

                    b.ToTable("CraftProducts");
                });

            modelBuilder.Entity("MudSharp.Models.CraftTool", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CraftId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("CraftRevisionNumber")
                        .HasColumnType("int(11)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8");

                    b.Property<int>("DesiredState")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("OriginalAdditionTime")
                        .HasColumnType("datetime");

                    b.Property<double>("ToolQualityWeight")
                        .HasColumnType("double");

                    b.Property<string>("ToolType")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ToolType"), "utf8");

                    b.Property<ulong>("UseToolDuration")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValue(1ul);

                    b.HasKey("Id");

                    b.HasIndex("CraftId", "CraftRevisionNumber")
                        .HasDatabaseName("FK_CraftTools_Crafts_idx");

                    b.ToTable("CraftTools");
                });

            modelBuilder.Entity("MudSharp.Models.Crime", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AccuserId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("BailHasBeenPosted")
                        .HasColumnType("bit(1)");

                    b.Property<decimal>("CalculatedBail")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(58,29)")
                        .HasDefaultValue(0.0m);

                    b.Property<ulong>("ConvictionRecorded")
                        .HasColumnType("bit(1)");

                    b.Property<string>("CriminalCharacteristics")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("CriminalCharacteristics"), "utf8");

                    b.Property<string>("CriminalFullDescription")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("CriminalFullDescription"), "utf8");

                    b.Property<long>("CriminalId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("CriminalShortDescription")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("CriminalShortDescription"), "utf8");

                    b.Property<double>("CustodialSentenceLength")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValue(0.0);

                    b.Property<decimal>("FineRecorded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(58,29)")
                        .HasDefaultValue(0.0m);

                    b.Property<ulong>("HasBeenEnforced")
                        .HasColumnType("bit(1)");

                    b.Property<ulong>("IsCriminalIdentityKnown")
                        .HasColumnType("bit(1)");

                    b.Property<ulong>("IsFinalised")
                        .HasColumnType("bit(1)");

                    b.Property<ulong>("IsKnownCrime")
                        .HasColumnType("bit(1)");

                    b.Property<ulong>("IsStaleCrime")
                        .HasColumnType("bit(1)");

                    b.Property<long>("LawId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("LocationId")
                        .HasColumnType("bigint(20)");

                    b.Property<DateTime>("RealTimeOfCrime")
                        .HasColumnType("datetime");

                    b.Property<string>("ThirdPartyIItemType")
                        .HasColumnType("varchar(100)");

                    b.Property<long?>("ThirdPartyId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("TimeOfCrime")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("TimeOfCrime"), "utf8");

                    b.Property<string>("TimeOfReport")
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("TimeOfReport"), "utf8");

                    b.Property<long?>("VictimId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("WitnessIds")
                        .HasColumnType("varchar(1000)");

                    b.HasKey("Id");

                    b.HasIndex("AccuserId")
                        .HasDatabaseName("FK_Crimes_Accuser_idx");

                    b.HasIndex("CriminalId")
                        .HasDatabaseName("FK_Crimes_Criminal_idx");

                    b.HasIndex("LawId")
                        .HasDatabaseName("FK_Crimes_Laws_idx");

                    b.HasIndex("LocationId")
                        .HasDatabaseName("FK_Crimes_Location_idx");

                    b.HasIndex("VictimId")
                        .HasDatabaseName("FK_Crimes_Victim_idx");

                    b.ToTable("Crimes");
                });

            modelBuilder.Entity("MudSharp.Models.Culture", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AvailabilityProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Description"), "utf8");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<string>("PersonWordFemale")
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("PersonWordFemale"), "utf8");

                    b.Property<string>("PersonWordIndeterminate")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("PersonWordIndeterminate"), "utf8");

                    b.Property<string>("PersonWordMale")
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("PersonWordMale"), "utf8");

                    b.Property<string>("PersonWordNeuter")
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("PersonWordNeuter"), "utf8");

                    b.Property<long>("PrimaryCalendarId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("SkillStartingValueProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("TolerableTemperatureCeilingEffect")
                        .HasColumnType("double");

                    b.Property<double>("TolerableTemperatureFloorEffect")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilityProgId")
                        .HasDatabaseName("FK_Cultures_AvailabilityProg");

                    b.HasIndex("SkillStartingValueProgId")
                        .HasDatabaseName("FK_Cultures_SkillStartingProg");

                    b.ToTable("Cultures");
                });

            modelBuilder.Entity("MudSharp.Models.CultureInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(50)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Id"), "utf8");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("DisplayName"), "utf8");

                    b.Property<int>("Order")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.ToTable("CultureInfos");
                });

            modelBuilder.Entity("MudSharp.Models.CulturesChargenResources", b =>
                {
                    b.Property<long>("CultureId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ChargenResourceId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Amount")
                        .HasColumnType("int(11)");

                    b.Property<ulong>("RequirementOnly")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.HasKey("CultureId", "ChargenResourceId")
                        .HasName("PRIMARY");

                    b.HasIndex("ChargenResourceId");

                    b.ToTable("Cultures_ChargenResources", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.CulturesNameCultures", b =>
                {
                    b.Property<long>("CultureId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("NameCultureId")
                        .HasColumnType("bigint(20)");

                    b.Property<short>("Gender")
                        .HasColumnType("smallint(6)");

                    b.HasKey("CultureId", "NameCultureId", "Gender")
                        .HasName("PRIMARY");

                    b.HasIndex("NameCultureId");

                    b.ToTable("CulturesNameCultures");
                });

            modelBuilder.Entity("MudSharp.Models.Currency", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("BaseCurrencyToGlobalBaseCurrencyConversion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(58,29)")
                        .HasDefaultValue(1.0m);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("Currencies");
                });

            modelBuilder.Entity("MudSharp.Models.CurrencyDescriptionPattern", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("FutureProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("NegativePrefix")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("NegativePrefix"), "utf8");

                    b.Property<int>("Order")
                        .HasColumnType("int(11)");

                    b.Property<int>("Type")
                        .HasColumnType("int(11)");

                    b.Property<ulong>("UseNaturalAggregationStyle")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValue(0ul);

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId")
                        .HasDatabaseName("FK_CurrencyDescriptionPatterns_Currencies");

                    b.HasIndex("FutureProgId")
                        .HasDatabaseName("FK_CurrencyDescriptionPatterns_FutureProgs");

                    b.ToTable("CurrencyDescriptionPatterns");
                });

            modelBuilder.Entity("MudSharp.Models.CurrencyDescriptionPatternElement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AlternatePattern")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("AlternatePattern"), "utf8");

                    b.Property<long>("CurrencyDescriptionPatternId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CurrencyDivisionId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Order")
                        .HasColumnType("int(11)");

                    b.Property<string>("Pattern")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Pattern"), "utf8");

                    b.Property<string>("PluraliseWord")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("PluraliseWord"), "utf8");

                    b.Property<int>("RoundingMode")
                        .HasColumnType("int(11)");

                    b.Property<ulong>("ShowIfZero")
                        .HasColumnType("bit(1)");

                    b.Property<ulong>("SpecialValuesOverrideFormat")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyDescriptionPatternId")
                        .HasDatabaseName("FK_CDPE_CurrencyDescriptionPatterns");

                    b.HasIndex("CurrencyDivisionId")
                        .HasDatabaseName("FK_CDPE_CurrencyDivisions");

                    b.ToTable("CurrencyDescriptionPatternElements");
                });

            modelBuilder.Entity("MudSharp.Models.CurrencyDescriptionPatternElementSpecialValues", b =>
                {
                    b.Property<decimal>("Value")
                        .HasColumnType("decimal(58,29)");

                    b.Property<long>("CurrencyDescriptionPatternElementId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Text"), "utf8");

                    b.HasKey("Value", "CurrencyDescriptionPatternElementId")
                        .HasName("PRIMARY");

                    b.HasIndex("CurrencyDescriptionPatternElementId")
                        .HasDatabaseName("FK_CDPESV_CDPE");

                    b.ToTable("CurrencyDescriptionPatternElementSpecialValues");
                });

            modelBuilder.Entity("MudSharp.Models.CurrencyDivision", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("BaseUnitConversionRate")
                        .HasColumnType("decimal(58,29)");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("IgnoreCase")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValue(1ul);

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId")
                        .HasDatabaseName("FK_CurrencyDivisions_Currencies");

                    b.ToTable("CurrencyDivisions");
                });

            modelBuilder.Entity("MudSharp.Models.CurrencyDivisionAbbreviation", b =>
                {
                    b.Property<string>("Pattern")
                        .HasColumnType("varchar(150)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Pattern"), "utf8");

                    b.Property<long>("CurrencyDivisionId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Pattern", "CurrencyDivisionId")
                        .HasName("PRIMARY");

                    b.HasIndex("CurrencyDivisionId")
                        .HasDatabaseName("FK_CurrencyDivisionAbbreviations_CurrencyDivisions");

                    b.ToTable("CurrencyDivisionAbbreviations");
                });

            modelBuilder.Entity("MudSharp.Models.DamagePatterns", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Bonus")
                        .HasColumnType("int(11)");

                    b.Property<int>("DamageType")
                        .HasColumnType("int(11)");

                    b.Property<int>("Dice")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<int>("Sides")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.ToTable("DamagePatterns");
                });

            modelBuilder.Entity("MudSharp.Models.DefaultHook", b =>
                {
                    b.Property<long>("HookId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("PerceivableType")
                        .HasColumnType("varchar(45)")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("PerceivableType"), "utf8mb4");

                    b.Property<long>("FutureProgId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("HookId", "PerceivableType", "FutureProgId")
                        .HasName("PRIMARY");

                    b.HasIndex("FutureProgId")
                        .HasDatabaseName("FK_DefaultHooks_Futureprogs_idx");

                    b.ToTable("DefaultHooks");
                });

            modelBuilder.Entity("MudSharp.Models.DisfigurementTemplate", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("RevisionNumber")
                        .HasColumnType("int(11)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8");

                    b.Property<long>("EditableItemId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("FullDescription")
                        .IsRequired()
                        .HasColumnType("varchar(5000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("FullDescription"), "utf8");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ShortDescription"), "utf8");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Type"), "utf8");

                    b.HasKey("Id", "RevisionNumber")
                        .HasName("PRIMARY");

                    b.HasIndex("EditableItemId")
                        .HasDatabaseName("FK_DisfigurementTemplates_EditableItems_idx");

                    b.ToTable("DisfigurementTemplates");
                });

            modelBuilder.Entity("MudSharp.Models.Door", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<ulong>("IsOpen")
                        .HasColumnType("bit(1)");

                    b.Property<long?>("LockedWith")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<int>("Style")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("LockedWith")
                        .HasDatabaseName("FK_Doors_Locks");

                    b.ToTable("Doors");
                });

            modelBuilder.Entity("MudSharp.Models.Drawing", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("DrawingSize")
                        .HasColumnType("int(11)");

                    b.Property<double>("DrawingSkill")
                        .HasColumnType("double");

                    b.Property<string>("FullDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("FullDescription"), "utf8");

                    b.Property<int>("ImplementType")
                        .HasColumnType("int(11)");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ShortDescription"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("FK_Drawings_Characters_idx");

                    b.ToTable("Drawings");
                });

            modelBuilder.Entity("MudSharp.Models.Dream", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CanDreamProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8mb4");

                    b.Property<long?>("OnDreamProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("OnWakeDuringDreamingProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("OnlyOnce")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<int>("Priority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'100'");

                    b.HasKey("Id");

                    b.HasIndex("CanDreamProgId")
                        .HasDatabaseName("FK_Dreams_FutureProgs_CanDream_idx");

                    b.HasIndex("OnDreamProgId")
                        .HasDatabaseName("FK_Dreams_FutureProgs_OnDream_idx");

                    b.HasIndex("OnWakeDuringDreamingProgId")
                        .HasDatabaseName("FK_Dreams_FutureProgs_OnWake_idx");

                    b.ToTable("Dreams");
                });

            modelBuilder.Entity("MudSharp.Models.DreamPhase", b =>
                {
                    b.Property<long>("DreamId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("PhaseId")
                        .HasColumnType("int(11)");

                    b.Property<string>("DreamerCommand")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("DreamerCommand"), "utf8mb4");

                    b.Property<string>("DreamerText")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("DreamerText"), "utf8mb4");

                    b.Property<int>("WaitSeconds")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'30'");

                    b.HasKey("DreamId", "PhaseId")
                        .HasName("PRIMARY");

                    b.ToTable("Dream_Phases", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.DreamsAlreadyDreamt", b =>
                {
                    b.Property<long>("DreamId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("DreamId", "CharacterId")
                        .HasName("PRIMARY");

                    b.HasIndex("CharacterId")
                        .HasDatabaseName("FK_Dreams_Dreamt_Characters_idx");

                    b.ToTable("Dreams_Already_Dreamt", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.DreamsCharacters", b =>
                {
                    b.Property<long>("DreamId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("DreamId", "CharacterId")
                        .HasName("PRIMARY");

                    b.HasIndex("CharacterId")
                        .HasDatabaseName("FK_Dreams_Characters_Characters_idx");

                    b.ToTable("Dreams_Characters", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.Drug", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("DrugVectors")
                        .HasColumnType("int(11)");

                    b.Property<double>("IntensityPerGram")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8mb4");

                    b.Property<double>("RelativeMetabolisationRate")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("Drugs");
                });

            modelBuilder.Entity("MudSharp.Models.DrugIntensity", b =>
                {
                    b.Property<long>("DrugId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    b.Property<int>("DrugType")
                        .HasColumnType("int(11)");

                    b.Property<string>("AdditionalEffects")
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("AdditionalEffects"), "utf8mb4");

                    b.Property<double>("RelativeIntensity")
                        .HasColumnType("double");

                    b.HasKey("DrugId", "DrugType")
                        .HasName("PRIMARY");

                    b.ToTable("DrugsIntensities");
                });

            modelBuilder.Entity("MudSharp.Models.Dub", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("IntroducedName")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("IntroducedName"), "utf8");

                    b.Property<string>("Keywords")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Keywords"), "utf8");

                    b.Property<string>("LastDescription")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("LastDescription"), "utf8");

                    b.Property<DateTime>("LastUsage")
                        .HasColumnType("datetime");

                    b.Property<long>("TargetId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("TargetType")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("TargetType"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId")
                        .HasDatabaseName("FK_Dubs_Characters");

                    b.ToTable("Dubs");
                });

            modelBuilder.Entity("MudSharp.Models.EconomicZone", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ControllingClanId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CurrentFinancialPeriodId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("IntervalAmount")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("IntervalModifier")
                        .HasColumnType("int(11)");

                    b.Property<int>("IntervalType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'2'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<decimal>("OutstandingTaxesOwed")
                        .HasColumnType("decimal(58,29)");

                    b.Property<ulong>("PermitTaxableLosses")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<int>("PreviousFinancialPeriodsToKeep")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'50'");

                    b.Property<long?>("ReferenceCalendarId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ReferenceClockId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("ReferenceTime")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ReferenceTime"), "utf8");

                    b.Property<decimal>("TotalRevenueHeld")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(58,29)")
                        .HasDefaultValueSql("0");

                    b.Property<long>("ZoneForTimePurposesId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("ControllingClanId")
                        .HasDatabaseName("FK_EconomicZones_ControllingClans_idx");

                    b.HasIndex("CurrencyId")
                        .HasDatabaseName("FK_EconomicZones_Currencies_idx");

                    b.HasIndex("CurrentFinancialPeriodId")
                        .HasDatabaseName("FK_EconomicZones_FinancialPeriods_idx");

                    b.HasIndex("ReferenceCalendarId")
                        .HasDatabaseName("FK_EconomicZones_Calendars_idx");

                    b.HasIndex("ReferenceClockId")
                        .HasDatabaseName("FK_EconomicZones_Timezones_idx");

                    b.ToTable("EconomicZones");
                });

            modelBuilder.Entity("MudSharp.Models.EconomicZoneRevenue", b =>
                {
                    b.Property<long>("EconomicZoneId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("FinancialPeriodId")
                        .HasColumnType("bigint(20)");

                    b.Property<decimal>("TotalTaxRevenue")
                        .HasColumnType("decimal(58,29)");

                    b.HasKey("EconomicZoneId", "FinancialPeriodId")
                        .HasName("PRIMARY");

                    b.HasIndex("FinancialPeriodId")
                        .HasDatabaseName("FK_EconomicZoneRevenues_FinancialPeriods_idx");

                    b.ToTable("EconomicZoneRevenues");
                });

            modelBuilder.Entity("MudSharp.Models.EconomicZoneShopTax", b =>
                {
                    b.Property<long>("EconomicZoneId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ShopId")
                        .HasColumnType("bigint(20)");

                    b.Property<decimal>("OutstandingProfitTaxes")
                        .HasColumnType("decimal(58,29)");

                    b.Property<decimal>("OutstandingSalesTaxes")
                        .HasColumnType("decimal(58,29)");

                    b.Property<decimal>("TaxesInCredits")
                        .HasColumnType("decimal(58,29)");

                    b.HasKey("EconomicZoneId", "ShopId")
                        .HasName("PRIMARY");

                    b.HasIndex("ShopId")
                        .HasDatabaseName("FK_EconomicZoneShopTaxes_Shops_idx");

                    b.ToTable("EconomicZoneShopTaxes");
                });

            modelBuilder.Entity("MudSharp.Models.EconomicZoneTax", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Definition")
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8");

                    b.Property<long>("EconomicZoneId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("MerchandiseFilterProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("MerchantDescription")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(200)");

                    b.Property<string>("TaxType")
                        .HasColumnType("varchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("EconomicZoneId")
                        .HasDatabaseName("FK_EconomicZoneTaxes_EconomicZones_idx");

                    b.HasIndex("MerchandiseFilterProgId")
                        .HasDatabaseName("FK_EconomicZoneTaxes_FutureProgs_idx");

                    b.ToTable("EconomicZoneTaxes");
                });

            modelBuilder.Entity("MudSharp.Models.EditableItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BuilderAccountId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("BuilderComment")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("BuilderComment"), "utf8");

                    b.Property<DateTime>("BuilderDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("ObsoleteDate")
                        .HasColumnType("datetime");

                    b.Property<long?>("ReviewerAccountId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("ReviewerComment")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ReviewerComment"), "utf8");

                    b.Property<DateTime?>("ReviewerDate")
                        .HasColumnType("datetime");

                    b.Property<int>("RevisionNumber")
                        .HasColumnType("int(11)");

                    b.Property<int>("RevisionStatus")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.ToTable("EditableItems");
                });

            modelBuilder.Entity("MudSharp.Models.Election", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AppointmentId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("ElectionStage")
                        .HasColumnType("int(11)");

                    b.Property<ulong>("IsByElection")
                        .HasColumnType("bit(1)");

                    b.Property<ulong>("IsFinalised")
                        .HasColumnType("bit(1)");

                    b.Property<string>("NominationStartDate")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("NumberOfAppointments")
                        .HasColumnType("int(11)");

                    b.Property<string>("ResultsInEffectDate")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("VotingEndDate")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("VotingStartDate")
                        .HasColumnType("varchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId")
                        .HasDatabaseName("FK_Elections_Appointments_idx");

                    b.ToTable("Elections", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.ElectionNominee", b =>
                {
                    b.Property<long>("ElectionId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("NomineeId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("NomineeClanId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ElectionId", "NomineeId")
                        .HasName("PRIMARY");

                    b.HasIndex("ElectionId")
                        .HasDatabaseName("FK_ElectionsNominees_Elections_idx");

                    b.HasIndex("NomineeClanId", "NomineeId")
                        .HasDatabaseName("FK_ElectionsNominees_ClanMemberships_idx");

                    b.ToTable("ElectionsNominees", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.ElectionVote", b =>
                {
                    b.Property<long>("ElectionId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("NomineeId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("VoterId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("NomineeClanId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("NumberOfVotes")
                        .HasColumnType("int(11)");

                    b.Property<long>("VoterClanId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ElectionId", "NomineeId", "VoterId")
                        .HasName("PRIMARY");

                    b.HasIndex("ElectionId")
                        .HasDatabaseName("FK_ElectionsVotes_Elections_idx");

                    b.HasIndex("NomineeClanId", "NomineeId")
                        .HasDatabaseName("FK_ElectionsVotes_Nominees_idx");

                    b.HasIndex("VoterClanId", "VoterId")
                        .HasDatabaseName("FK_ElectionsVotes_Voters_idx");

                    b.ToTable("ElectionsVotes", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.EmailTemplate", b =>
                {
                    b.Property<int>("TemplateType")
                        .HasColumnType("int(11)");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Content"), "utf8");

                    b.Property<string>("ReturnAddress")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ReturnAddress"), "utf8");

                    b.Property<string>("Subject")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Subject"), "utf8");

                    b.HasKey("TemplateType")
                        .HasName("PRIMARY");

                    b.ToTable("EmailTemplates");
                });

            modelBuilder.Entity("MudSharp.Models.EnforcementAuthoritiesAccusableClasses", b =>
                {
                    b.Property<long>("EnforcementAuthorityId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("LegalClassId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("EnforcementAuthorityId", "LegalClassId")
                        .HasName("PRIMARY");

                    b.HasIndex("LegalClassId")
                        .HasDatabaseName("FK_EnforcementAuthorities_AccusableClasses_LegalClasses_idx");

                    b.ToTable("EnforcementAuthorities_AccusableClasses", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.EnforcementAuthoritiesArrestableLegalClasses", b =>
                {
                    b.Property<long>("EnforcementAuthorityId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("LegalClassId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("EnforcementAuthorityId", "LegalClassId");

                    b.HasIndex("EnforcementAuthorityId")
                        .HasDatabaseName("FK_EnforcementAuthoritiesArrestableLegalClasses_Enforce_idx");

                    b.HasIndex("LegalClassId")
                        .HasDatabaseName("FK_EnforcementAuthoritiesArrestableLegalClasses_LegalClasses_idx");

                    b.ToTable("EnforcementAuthoritiesArrestableClasses");
                });

            modelBuilder.Entity("MudSharp.Models.EnforcementAuthority", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<ulong>("CanAccuse")
                        .HasColumnType("bit(1)");

                    b.Property<ulong>("CanConvict")
                        .HasColumnType("bit(1)");

                    b.Property<ulong>("CanForgive")
                        .HasColumnType("bit(1)");

                    b.Property<long?>("FilterProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("LegalAuthorityId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<int>("Priority")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("FilterProgId")
                        .HasDatabaseName("FK_EnforcementAuthorities_FutureProgs_idx");

                    b.HasIndex("LegalAuthorityId")
                        .HasDatabaseName("FK_EnforcementAuthorities_LegalAuthorities_idx");

                    b.ToTable("EnforcementAuthorities");
                });

            modelBuilder.Entity("MudSharp.Models.EnforcementAuthorityParentAuthority", b =>
                {
                    b.Property<long>("ParentId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ChildId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ParentId", "ChildId")
                        .HasName("PRIMARY");

                    b.HasIndex("ChildId")
                        .HasDatabaseName("FK_EnforcementAuthorities_ParentAuthorities_Child_idx");

                    b.ToTable("EnforcementAuthorities_ParentAuthorities", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.EntityDescriptionPattern", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ApplicabilityProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Pattern")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Pattern"), "utf8");

                    b.Property<int>("RelativeWeight")
                        .HasColumnType("int(11)");

                    b.Property<int>("Type")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("ApplicabilityProgId")
                        .HasDatabaseName("FK_EntityDescriptionPatterns_FutureProgs");

                    b.ToTable("EntityDescriptionPatterns");
                });

            modelBuilder.Entity("MudSharp.Models.EntityDescriptionPatternsEntityDescriptions", b =>
                {
                    b.Property<long>("PatternId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("EntityDescriptionId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("PatternId", "EntityDescriptionId")
                        .HasName("PRIMARY");

                    b.HasIndex("EntityDescriptionId")
                        .HasDatabaseName("FK_EDP_EntityDescriptions_EntityDescriptions");

                    b.ToTable("EntityDescriptionPatterns_EntityDescriptions", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.EntityDescriptions", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<short>("DisplaySex")
                        .HasColumnType("smallint(6)");

                    b.Property<string>("FullDescription")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("FullDescription"), "utf8");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ShortDescription"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("EntityDescriptions");
                });

            modelBuilder.Entity("MudSharp.Models.EthnicitiesCharacteristics", b =>
                {
                    b.Property<long>("EthnicityId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CharacteristicDefinitionId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CharacteristicProfileId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("EthnicityId", "CharacteristicDefinitionId", "CharacteristicProfileId")
                        .HasName("PRIMARY");

                    b.HasIndex("CharacteristicDefinitionId")
                        .HasDatabaseName("FK_Ethnicities_Characteristics_CharacteristicDefinitions");

                    b.HasIndex("CharacteristicProfileId")
                        .HasDatabaseName("FK_Ethnicities_Characteristics_CharacteristicProfiles");

                    b.ToTable("Ethnicities_Characteristics", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.EthnicitiesChargenResources", b =>
                {
                    b.Property<long>("EthnicityId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ChargenResourceId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Amount")
                        .HasColumnType("int(11)");

                    b.Property<ulong>("RequirementOnly")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.HasKey("EthnicityId", "ChargenResourceId")
                        .HasName("PRIMARY");

                    b.HasIndex("ChargenResourceId");

                    b.ToTable("Ethnicities_ChargenResources", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.Ethnicity", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AvailabilityProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("ChargenBlurb")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ChargenBlurb"), "utf8");

                    b.Property<string>("EthnicGroup")
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("EthnicGroup"), "utf8");

                    b.Property<string>("EthnicSubgroup")
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("EthnicSubgroup"), "utf8");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<long?>("ParentRaceId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("PopulationBloodModelId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("TolerableTemperatureCeilingEffect")
                        .HasColumnType("double");

                    b.Property<double>("TolerableTemperatureFloorEffect")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilityProgId")
                        .HasDatabaseName("FK_Ethnicities_AvailabilityProg");

                    b.HasIndex("ParentRaceId")
                        .HasDatabaseName("FK_Ethnicities_Races_idx");

                    b.HasIndex("PopulationBloodModelId")
                        .HasDatabaseName("FK_Ethnicities_PopulationBloodModels_idx");

                    b.ToTable("Ethnicities");
                });

            modelBuilder.Entity("MudSharp.Models.Exit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<ulong>("AcceptsDoor")
                        .HasColumnType("bit(1)");

                    b.Property<string>("BlockedLayers")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("''")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("BlockedLayers"), "utf8");

                    b.Property<long>("CellId1")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CellId2")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("ClimbDifficulty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'5'");

                    b.Property<int>("Direction1")
                        .HasColumnType("int(11)");

                    b.Property<int>("Direction2")
                        .HasColumnType("int(11)");

                    b.Property<long?>("DoorId")
                        .HasColumnType("bigint(20)");

                    b.Property<int?>("DoorSize")
                        .HasColumnType("int(11)");

                    b.Property<long?>("FallCell")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("InboundDescription1")
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("InboundDescription1"), "utf8");

                    b.Property<string>("InboundDescription2")
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("InboundDescription2"), "utf8");

                    b.Property<string>("InboundTarget1")
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("InboundTarget1"), "utf8");

                    b.Property<string>("InboundTarget2")
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("InboundTarget2"), "utf8");

                    b.Property<ulong>("IsClimbExit")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<string>("Keywords1")
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Keywords1"), "utf8");

                    b.Property<string>("Keywords2")
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Keywords2"), "utf8");

                    b.Property<int>("MaximumSizeToEnter")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'12'");

                    b.Property<int>("MaximumSizeToEnterUpright")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'12'");

                    b.Property<string>("OutboundDescription1")
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("OutboundDescription1"), "utf8");

                    b.Property<string>("OutboundDescription2")
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("OutboundDescription2"), "utf8");

                    b.Property<string>("OutboundTarget1")
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("OutboundTarget1"), "utf8");

                    b.Property<string>("OutboundTarget2")
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("OutboundTarget2"), "utf8");

                    b.Property<string>("PrimaryKeyword1")
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("PrimaryKeyword1"), "utf8");

                    b.Property<string>("PrimaryKeyword2")
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("PrimaryKeyword2"), "utf8");

                    b.Property<double>("TimeMultiplier")
                        .HasColumnType("double");

                    b.Property<string>("Verb1")
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Verb1"), "utf8");

                    b.Property<string>("Verb2")
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Verb2"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("Exits");
                });

            modelBuilder.Entity("MudSharp.Models.ExternalClanControl", b =>
                {
                    b.Property<long>("VassalClanId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("LiegeClanId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ControlledAppointmentId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("ControllingAppointmentId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("NumberOfAppointments")
                        .HasColumnType("int(11)");

                    b.HasKey("VassalClanId", "LiegeClanId", "ControlledAppointmentId")
                        .HasName("PRIMARY");

                    b.HasIndex("ControlledAppointmentId")
                        .HasDatabaseName("FK_ECC_Appointments_Controlled");

                    b.HasIndex("ControllingAppointmentId")
                        .HasDatabaseName("FK_ECC_Appointments_Controlling");

                    b.HasIndex("LiegeClanId")
                        .HasDatabaseName("FK_ECC_Clans_Liege");

                    b.ToTable("ExternalClanControls");
                });

            modelBuilder.Entity("MudSharp.Models.ExternalClanControlsAppointment", b =>
                {
                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("VassalClanId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("LiegeClanId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ControlledAppointmentId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("CharacterId", "VassalClanId", "LiegeClanId", "ControlledAppointmentId")
                        .HasName("PRIMARY");

                    b.HasIndex("VassalClanId", "CharacterId")
                        .HasDatabaseName("FK_ECC_Appointments_ClanMemberships");

                    b.HasIndex("VassalClanId", "LiegeClanId", "ControlledAppointmentId")
                        .HasDatabaseName("FK_ECC_Appointments_ExternalClanControls");

                    b.ToTable("ExternalClanControls_Appointments", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.FinancialPeriod", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("EconomicZoneId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("MudPeriodEnd")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("MudPeriodEnd"), "utf8");

                    b.Property<string>("MudPeriodStart")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("MudPeriodStart"), "utf8");

                    b.Property<DateTime>("PeriodEnd")
                        .HasColumnType("datetime");

                    b.Property<DateTime>("PeriodStart")
                        .HasColumnType("datetime");

                    b.HasKey("Id");

                    b.HasIndex("EconomicZoneId")
                        .HasDatabaseName("FK_FinancialPeriods_EconomicZones_idx");

                    b.ToTable("FinancialPeriods");
                });

            modelBuilder.Entity("MudSharp.Models.Foragable", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("RevisionNumber")
                        .HasColumnType("int(11)");

                    b.Property<long?>("CanForageProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("EditableItemId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("ForagableTypes")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ForagableTypes"), "utf8mb4");

                    b.Property<int>("ForageDifficulty")
                        .HasColumnType("int(11)");

                    b.Property<long>("ItemProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("MaximumOutcome")
                        .HasColumnType("int(11)");

                    b.Property<int>("MinimumOutcome")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8mb4");

                    b.Property<long?>("OnForageProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("QuantityDiceExpression")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("QuantityDiceExpression"), "utf8mb4");

                    b.Property<int>("RelativeChance")
                        .HasColumnType("int(11)");

                    b.HasKey("Id", "RevisionNumber")
                        .HasName("PRIMARY");

                    b.HasIndex("EditableItemId")
                        .HasDatabaseName("FK_Foragables_EditableItems");

                    b.ToTable("Foragables");
                });

            modelBuilder.Entity("MudSharp.Models.ForagableProfile", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("RevisionNumber")
                        .HasColumnType("int(11)");

                    b.Property<long>("EditableItemId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8mb4");

                    b.HasKey("Id", "RevisionNumber")
                        .HasName("PRIMARY");

                    b.HasIndex("EditableItemId")
                        .HasDatabaseName("FK_ForagableProfiles_EditableItems_idx");

                    b.ToTable("ForagableProfiles");
                });

            modelBuilder.Entity("MudSharp.Models.ForagableProfilesForagables", b =>
                {
                    b.Property<long>("ForagableProfileId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("ForagableProfileRevisionNumber")
                        .HasColumnType("int(11)");

                    b.Property<long>("ForagableId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ForagableProfileId", "ForagableProfileRevisionNumber", "ForagableId")
                        .HasName("PRIMARY");

                    b.ToTable("ForagableProfiles_Foragables", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.ForagableProfilesHourlyYieldGains", b =>
                {
                    b.Property<long>("ForagableProfileId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("ForagableProfileRevisionNumber")
                        .HasColumnType("int(11)");

                    b.Property<string>("ForageType")
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ForageType"), "utf8mb4");

                    b.Property<double>("Yield")
                        .HasColumnType("double");

                    b.HasKey("ForagableProfileId", "ForagableProfileRevisionNumber", "ForageType")
                        .HasName("PRIMARY");

                    b.ToTable("ForagableProfiles_HourlyYieldGains", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.ForagableProfilesMaximumYields", b =>
                {
                    b.Property<long>("ForagableProfileId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("ForagableProfileRevisionNumber")
                        .HasColumnType("int(11)");

                    b.Property<string>("ForageType")
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ForageType"), "utf8mb4");

                    b.Property<double>("Yield")
                        .HasColumnType("double");

                    b.HasKey("ForagableProfileId", "ForagableProfileRevisionNumber", "ForageType")
                        .HasName("PRIMARY");

                    b.ToTable("ForagableProfiles_MaximumYields", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.FutureProg", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<ulong>("AcceptsAnyParameters")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Category"), "utf8");

                    b.Property<string>("FunctionComment")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("FunctionComment"), "utf8");

                    b.Property<string>("FunctionName")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("FunctionName"), "utf8");

                    b.Property<string>("FunctionText")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("FunctionText"), "utf8mb4");

                    b.Property<ulong>("Public")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<long>("ReturnType")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("StaticType")
                        .HasColumnType("int(11)");

                    b.Property<string>("Subcategory")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Subcategory"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("FutureProgs");
                });

            modelBuilder.Entity("MudSharp.Models.FutureProgsParameter", b =>
                {
                    b.Property<long>("FutureProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("ParameterIndex")
                        .HasColumnType("int(11)");

                    b.Property<string>("ParameterName")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ParameterName"), "utf8");

                    b.Property<long>("ParameterType")
                        .HasColumnType("bigint(20)");

                    b.HasKey("FutureProgId", "ParameterIndex")
                        .HasName("PRIMARY");

                    b.ToTable("FutureProgs_Parameters", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.GPTMessage", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("GPTThreadId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Message"), "utf8");

                    b.Property<string>("Response")
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Response"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("GPTThreadId");

                    b.ToTable("GPTMessages", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.GPTThread", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Model")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Model"), "utf8");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<string>("Prompt")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Prompt"), "utf8");

                    b.Property<double>("Temperature")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("GPTThreads", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.GameItem", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("Condition")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.Property<long?>("ContainerId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("EffectData")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("EffectData"), "utf8");

                    b.Property<long>("GameItemProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("GameItemProtoRevision")
                        .HasColumnType("int(11)");

                    b.Property<long>("MaterialId")
                        .HasColumnType("bigint(20)");

                    b.Property<int?>("MorphTimeRemaining")
                        .HasColumnType("int(11)");

                    b.Property<string>("PositionEmote")
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("PositionEmote"), "utf8");

                    b.Property<int>("PositionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("PositionModifier")
                        .HasColumnType("int(11)");

                    b.Property<long?>("PositionTargetId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("PositionTargetType")
                        .HasColumnType("varchar(45)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("PositionTargetType"), "utf8");

                    b.Property<int>("Quality")
                        .HasColumnType("int(11)");

                    b.Property<int>("RoomLayer")
                        .HasColumnType("int(11)");

                    b.Property<int>("Size")
                        .HasColumnType("int(11)");

                    b.Property<long?>("SkinId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("ContainerId")
                        .HasDatabaseName("FK_GameItems_GameItems_Containers_idx");

                    b.ToTable("GameItems");
                });

            modelBuilder.Entity("MudSharp.Models.GameItemComponent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8");

                    b.Property<long>("GameItemComponentProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("GameItemComponentProtoRevision")
                        .HasColumnType("int(11)");

                    b.Property<long>("GameItemId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("GameItemId")
                        .HasDatabaseName("FK_GameItemComponents_GameItems");

                    b.ToTable("GameItemComponents");
                });

            modelBuilder.Entity("MudSharp.Models.GameItemComponentProto", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("RevisionNumber")
                        .HasColumnType("int(11)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Description"), "utf8");

                    b.Property<long>("EditableItemId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Type"), "utf8");

                    b.HasKey("Id", "RevisionNumber")
                        .HasName("PRIMARY");

                    b.HasIndex("EditableItemId")
                        .HasDatabaseName("FK_GameItemComponentProtos_EditableItems");

                    b.ToTable("GameItemComponentProtos");
                });

            modelBuilder.Entity("MudSharp.Models.GameItemMagicResource", b =>
                {
                    b.Property<long>("GameItemId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("MagicResourceId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("Amount")
                        .HasColumnType("double");

                    b.HasKey("GameItemId", "MagicResourceId")
                        .HasName("PRIMARY");

                    b.HasIndex("MagicResourceId")
                        .HasDatabaseName("FK_GameItems_MagicResources_MagicResources_idx");

                    b.ToTable("GameItems_MagicResources", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.GameItemProto", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("RevisionNumber")
                        .HasColumnType("int(11)");

                    b.Property<int>("BaseItemQuality")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'5'");

                    b.Property<decimal>("CostInBaseCurrency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(58,29)")
                        .HasDefaultValueSql("'0'");

                    b.Property<string>("CustomColour")
                        .HasColumnType("varchar(45)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("CustomColour"), "utf8");

                    b.Property<long>("EditableItemId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("FullDescription")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("FullDescription"), "utf8");

                    b.Property<long?>("HealthStrategyId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("HighPriority")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<long?>("ItemGroupId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Keywords")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Keywords"), "utf8");

                    b.Property<string>("LongDescription")
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("LongDescription"), "utf8");

                    b.Property<long>("MaterialId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("MorphEmote")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1000)")
                        .HasDefaultValueSql("'$0 $?1|morphs into $1|decays into nothing$.'")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("MorphEmote"), "utf8");

                    b.Property<long?>("MorphGameItemProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("MorphTimeSeconds")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<long?>("OnDestroyedGameItemProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("PermitPlayerSkins")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<ulong>("ReadOnly")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("varchar(1000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ShortDescription"), "utf8");

                    b.Property<int>("Size")
                        .HasColumnType("int(11)");

                    b.Property<double>("Weight")
                        .HasColumnType("double");

                    b.HasKey("Id", "RevisionNumber")
                        .HasName("PRIMARY");

                    b.HasIndex("EditableItemId")
                        .HasDatabaseName("FK_GameItemProtos_EditableItems");

                    b.HasIndex("ItemGroupId")
                        .HasDatabaseName("FK_GameItemProtos_ItemGroups_idx");

                    b.ToTable("GameItemProtos");
                });

            modelBuilder.Entity("MudSharp.Models.GameItemProtoExtraDescription", b =>
                {
                    b.Property<long>("GameItemProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("GameItemProtoRevisionNumber")
                        .HasColumnType("int(11)");

                    b.Property<long>("ApplicabilityProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("FullDescription")
                        .HasColumnType("varchar(2000)")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("FullDescription"), "utf8mb4");

                    b.Property<string>("FullDescriptionAddendum")
                        .HasColumnType("varchar(500)")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("FullDescriptionAddendum"), "utf8mb4");

                    b.Property<int>("Priority")
                        .HasColumnType("int(20)");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("varchar(500)")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ShortDescription"), "utf8mb4");

                    b.HasKey("GameItemProtoId", "GameItemProtoRevisionNumber", "ApplicabilityProgId")
                        .HasName("PRIMARY");

                    b.HasIndex("ApplicabilityProgId");

                    b.ToTable("GameItemProtoExtraDescriptions");
                });

            modelBuilder.Entity("MudSharp.Models.GameItemProtosDefaultVariable", b =>
                {
                    b.Property<long>("GameItemProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("GameItemProtoRevNum")
                        .HasColumnType("int(11)");

                    b.Property<string>("VariableName")
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("VariableName"), "utf8mb4");

                    b.Property<string>("VariableValue")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("VariableValue"), "utf8mb4");

                    b.HasKey("GameItemProtoId", "GameItemProtoRevNum", "VariableName")
                        .HasName("PRIMARY");

                    b.ToTable("GameItemProtos_DefaultVariables", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.GameItemProtosGameItemComponentProtos", b =>
                {
                    b.Property<long>("GameItemProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("GameItemComponentProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("GameItemProtoRevision")
                        .HasColumnType("int(11)");

                    b.Property<int>("GameItemComponentRevision")
                        .HasColumnType("int(11)");

                    b.HasKey("GameItemProtoId", "GameItemComponentProtoId", "GameItemProtoRevision", "GameItemComponentRevision")
                        .HasName("PRIMARY");

                    b.HasIndex("GameItemComponentProtoId", "GameItemComponentRevision")
                        .HasDatabaseName("FK_GIPGICP_GameItemComponentProtos");

                    b.HasIndex("GameItemProtoId", "GameItemProtoRevision")
                        .HasDatabaseName("FK_GIPGICP_GameItemProtos");

                    b.ToTable("GameItemProtos_GameItemComponentProtos", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.GameItemProtosOnLoadProgs", b =>
                {
                    b.Property<long>("GameItemProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("GameItemProtoRevisionNumber")
                        .HasColumnType("int(11)");

                    b.Property<long>("FutureProgId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("GameItemProtoId", "GameItemProtoRevisionNumber", "FutureProgId")
                        .HasName("PRIMARY");

                    b.HasIndex("FutureProgId")
                        .HasDatabaseName("FK_GameItemProtos_OnLoadProgs_FutureProgs_idx");

                    b.ToTable("GameItemProtos_OnLoadProgs", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.GameItemProtosTags", b =>
                {
                    b.Property<long>("GameItemProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("GameItemProtoRevisionNumber")
                        .HasColumnType("int(11)");

                    b.HasKey("GameItemProtoId", "TagId", "GameItemProtoRevisionNumber")
                        .HasName("PRIMARY");

                    b.HasIndex("TagId")
                        .HasDatabaseName("FK_GameItemProtos_Tags_Tags");

                    b.HasIndex("GameItemProtoId", "GameItemProtoRevisionNumber")
                        .HasDatabaseName("FK_GameItemProtos_Tags_GameItemProtos");

                    b.ToTable("GameItemProtos_Tags", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.GameItemSkin", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("RevisionNumber")
                        .HasColumnType("int(11)");

                    b.Property<long?>("CanUseSkinProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("EditableItemId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("FullDescription")
                        .HasColumnType("varchar(2000)")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("FullDescription"), "utf8mb4");

                    b.Property<ulong>("IsPublic")
                        .HasColumnType("bit(1)");

                    b.Property<string>("ItemName")
                        .HasColumnType("varchar(500)")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ItemName"), "utf8mb4");

                    b.Property<long>("ItemProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("LongDescription")
                        .HasColumnType("varchar(500)")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("LongDescription"), "utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(500)")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8mb4");

                    b.Property<int?>("Quality")
                        .HasColumnType("int(11)");

                    b.Property<string>("ShortDescription")
                        .HasColumnType("varchar(500)")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ShortDescription"), "utf8mb4");

                    b.HasKey("Id", "RevisionNumber")
                        .HasName("PRIMARY");

                    b.HasIndex("EditableItemId");

                    b.ToTable("GameItemSkins", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.Gameitemeditingview", b =>
                {
                    b.Property<sbyte>("Id")
                        .HasColumnType("tinyint(4)");

                    b.Property<sbyte>("MaterialId")
                        .HasColumnType("tinyint(4)");

                    b.Property<sbyte>("Name")
                        .HasColumnType("tinyint(4)");

                    b.Property<sbyte>("ProtoMaterial")
                        .HasColumnType("tinyint(4)");

                    b.Property<sbyte>("Quality")
                        .HasColumnType("tinyint(4)");

                    b.Property<sbyte>("Size")
                        .HasColumnType("tinyint(4)");

                    b.ToTable("gameitemeditingview", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.Gas", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("BoilingPoint")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'5'");

                    b.Property<long?>("CountAsId")
                        .HasColumnType("bigint(20)");

                    b.Property<int?>("CountsAsQuality")
                        .HasColumnType("int(11)");

                    b.Property<double>("Density")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'0.001205'");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Description"), "utf8mb4");

                    b.Property<string>("DisplayColour")
                        .IsRequired()
                        .HasColumnType("varchar(40)")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("DisplayColour"), "utf8mb4");

                    b.Property<double>("DrugGramsPerUnitVolume")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'0.0'");

                    b.Property<long?>("DrugId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("ElectricalConductivity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'0.000005'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8mb4");

                    b.Property<ulong>("Organic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<long?>("PrecipitateId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("SmellIntensity")
                        .HasColumnType("double");

                    b.Property<string>("SmellText")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("SmellText"), "utf8mb4");

                    b.Property<double>("SpecificHeatCapacity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1.005'");

                    b.Property<double>("ThermalConductivity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'0.0257'");

                    b.Property<string>("VagueSmellText")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("VagueSmellText"), "utf8mb4");

                    b.Property<double>("Viscosity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'15'");

                    b.HasKey("Id");

                    b.HasIndex("CountAsId")
                        .HasDatabaseName("FK_Gases_Gases_idx");

                    b.HasIndex("DrugId");

                    b.HasIndex("PrecipitateId")
                        .HasDatabaseName("FK_Gases_Liquids_idx");

                    b.ToTable("Gases");
                });

            modelBuilder.Entity("MudSharp.Models.GasesTags", b =>
                {
                    b.Property<long>("GasId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("GasId", "TagId")
                        .HasName("PRIMARY");

                    b.HasIndex("TagId")
                        .HasDatabaseName("FK_Gases_Tags_Tags_idx");

                    b.ToTable("Gases_Tags", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.Grid", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8");

                    b.Property<string>("GridType")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("GridType"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("Grids");
                });

            modelBuilder.Entity("MudSharp.Models.GroupAi", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Data"), "utf8");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8");

                    b.Property<long>("GroupAiTemplateId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("GroupAITemplateId");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex("GroupAiTemplateId")
                        .HasDatabaseName("FK_GroupAIs_GroupAITemplates_idx");

                    b.ToTable("GroupAIs", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.GroupAiTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("GroupAITemplates", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.Guest", b =>
                {
                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("CharacterId")
                        .HasName("PRIMARY");

                    b.ToTable("Guests");
                });

            modelBuilder.Entity("MudSharp.Models.HealthStrategy", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8mb4_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8mb4");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8mb4_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Type"), "utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("HealthStrategies");
                });

            modelBuilder.Entity("MudSharp.Models.HearingProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<string>("SurveyDescription")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("SurveyDescription"), "utf8");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Type"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("HearingProfiles");
                });

            modelBuilder.Entity("MudSharp.Models.HeightWeightModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("Bmimultiplier")
                        .HasColumnType("double")
                        .HasColumnName("BMIMultiplier");

                    b.Property<double>("MeanBmi")
                        .HasColumnType("double")
                        .HasColumnName("MeanBMI");

                    b.Property<double>("MeanHeight")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<double>("StddevBmi")
                        .HasColumnType("double")
                        .HasColumnName("StddevBMI");

                    b.Property<double>("StddevHeight")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("HeightWeightModels");
                });

            modelBuilder.Entity("MudSharp.Models.Helpfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Category"), "utf8");

                    b.Property<string>("Keywords")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Keywords"), "utf8");

                    b.Property<string>("LastEditedBy")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("LastEditedBy"), "utf8");

                    b.Property<DateTime>("LastEditedDate")
                        .HasColumnType("datetime");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<string>("PublicText")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("PublicText"), "utf8");

                    b.Property<long?>("RuleId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Subcategory")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Subcategory"), "utf8");

                    b.Property<string>("TagLine")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("TagLine"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex("RuleId")
                        .HasDatabaseName("FK_Helpfiles_FutureProgs");

                    b.ToTable("Helpfiles");
                });

            modelBuilder.Entity("MudSharp.Models.HelpfilesExtraText", b =>
                {
                    b.Property<long>("HelpfileId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("DisplayOrder")
                        .HasColumnType("int(11)");

                    b.Property<long>("RuleId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Text"), "utf8");

                    b.HasKey("HelpfileId", "DisplayOrder")
                        .HasName("PRIMARY");

                    b.HasIndex("RuleId")
                        .HasDatabaseName("FK_Helpfiles_ExtraTexts_FutureProgs");

                    b.ToTable("Helpfiles_ExtraTexts", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.Hooks", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Category"), "utf8");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<int>("TargetEventType")
                        .HasColumnType("int(11)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Type"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("Hooks");
                });

            modelBuilder.Entity("MudSharp.Models.HooksPerceivable", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("BodyId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CellId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("GameItemId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("HookId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("ShardId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("ZoneId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("BodyId")
                        .HasDatabaseName("FK_Hooks_Perceivables_Bodies_idx");

                    b.HasIndex("CellId")
                        .HasDatabaseName("FK_Hooks_Perceivables_Cells_idx");

                    b.HasIndex("CharacterId")
                        .HasDatabaseName("FK_Hooks_Perceivables_Characters_idx");

                    b.HasIndex("GameItemId")
                        .HasDatabaseName("FK_Hooks_Perceivables_GameItems_idx");

                    b.HasIndex("HookId")
                        .HasDatabaseName("FK_Hooks_Perceivables_Hooks_idx");

                    b.HasIndex("ShardId")
                        .HasDatabaseName("FK_Hooks_Perceivables_Shards_idx");

                    b.HasIndex("ZoneId")
                        .HasDatabaseName("FK_Hooks_Perceivables_Zones_idx");

                    b.ToTable("Hooks_Perceivables", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.Improver", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Type"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("Improvers");
                });

            modelBuilder.Entity("MudSharp.Models.Infection", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("BodypartId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("Immunity")
                        .HasColumnType("double");

                    b.Property<int>("InfectionType")
                        .HasColumnType("int(11)");

                    b.Property<double>("Intensity")
                        .HasColumnType("double");

                    b.Property<long>("OwnerId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Virulence")
                        .HasColumnType("int(11)");

                    b.Property<long?>("WoundId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("BodypartId")
                        .HasDatabaseName("FK_Infections_Bodyparts_idx");

                    b.HasIndex("OwnerId")
                        .HasDatabaseName("FK_Infections_Bodies_idx");

                    b.HasIndex("WoundId")
                        .HasDatabaseName("FK_Infections_Wounds_idx");

                    b.ToTable("Infections");
                });

            modelBuilder.Entity("MudSharp.Models.ItemGroup", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Keywords")
                        .HasColumnType("varchar(1000)")
                        .UseCollation("utf8mb4_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Keywords"), "utf8mb4");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8mb4_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("ItemGroups");
                });

            modelBuilder.Entity("MudSharp.Models.ItemGroupForm", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8mb4");

                    b.Property<long>("ItemGroupId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Type"), "utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ItemGroupId")
                        .HasDatabaseName("FK_ItemGroupForms_ItemGroups_idx");

                    b.ToTable("ItemGroupForms");
                });

            modelBuilder.Entity("MudSharp.Models.JobFindingLocation", b =>
                {
                    b.Property<long>("EconomicZoneId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CellId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("EconomicZoneId", "CellId")
                        .HasName("PRIMARY");

                    b.HasIndex("CellId");

                    b.ToTable("JobFindingLocations", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.JobListing", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AppointmentId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("BankAccountId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("ClanId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Definition")
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Description"), "utf8");

                    b.Property<long>("EconomicZoneId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("EligibilityProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("FullTimeEquivalentRatio")
                        .HasColumnType("double");

                    b.Property<ulong>("IsArchived")
                        .HasColumnType("bit(1)");

                    b.Property<ulong>("IsReadyToBePosted")
                        .HasColumnType("bit(1)");

                    b.Property<string>("JobListingType")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("JobListingType"), "utf8");

                    b.Property<string>("MaximumDuration")
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("MaximumDuration"), "utf8");

                    b.Property<int>("MaximumNumberOfSimultaneousEmployees")
                        .HasColumnType("int(11)");

                    b.Property<string>("MoneyPaidIn")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("MoneyPaidIn"), "utf8");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<long?>("PaygradeId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("PersonalProjectId")
                        .HasColumnType("bigint(20)");

                    b.Property<int?>("PersonalProjectRevisionNumber")
                        .HasColumnType("int(11)");

                    b.Property<long>("PosterId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("PosterType")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("PosterType"), "utf8");

                    b.Property<long?>("RankId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("RequiredProjectId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("RequiredProjectLabourId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("AppointmentId");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("ClanId");

                    b.HasIndex("EconomicZoneId");

                    b.HasIndex("EligibilityProgId");

                    b.HasIndex("PaygradeId");

                    b.HasIndex("RankId");

                    b.HasIndex("PersonalProjectId", "PersonalProjectRevisionNumber");

                    b.HasIndex("RequiredProjectId", "RequiredProjectLabourId");

                    b.ToTable("JobListings", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.Knowledge", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CanAcquireProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CanLearnProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Description"), "utf8");

                    b.Property<int>("LearnDifficulty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'7'");

                    b.Property<int>("LearnableType")
                        .HasColumnType("int(11)");

                    b.Property<int>("LearningSessionsRequired")
                        .HasColumnType("int(11)");

                    b.Property<string>("LongDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("LongDescription"), "utf8");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<string>("Subtype")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Subtype"), "utf8");

                    b.Property<int>("TeachDifficulty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'7'");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Type"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex("CanAcquireProgId")
                        .HasDatabaseName("FK_KNOWLEDGES_FUTUREPROGS_ACQUIRE_idx");

                    b.HasIndex("CanLearnProgId")
                        .HasDatabaseName("FK_KNOWLEDGES_FUTUREPROGS_LEARN_idx");

                    b.ToTable("knowledges", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.KnowledgesCosts", b =>
                {
                    b.Property<long>("KnowledgeId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ChargenResourceId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Cost")
                        .HasColumnType("int(11)");

                    b.HasKey("KnowledgeId", "ChargenResourceId")
                        .HasName("PRIMARY");

                    b.HasIndex("ChargenResourceId")
                        .HasDatabaseName("FK_KnowledgesCosts_ChargenResources_idx");

                    b.HasIndex("KnowledgeId")
                        .HasDatabaseName("FK_KnowledgesCosts_Knowledges_idx");

                    b.ToTable("KnowledgesCosts");
                });

            modelBuilder.Entity("MudSharp.Models.Language", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("DefaultLearnerAccentId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("DifficultyModel")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("LanguageObfuscationFactor")
                        .HasColumnType("double");

                    b.Property<long>("LinkedTraitId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<string>("UnknownLanguageDescription")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("UnknownLanguageDescription"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex("DefaultLearnerAccentId")
                        .HasDatabaseName("FK_Languages_Accents_idx");

                    b.HasIndex("DifficultyModel")
                        .HasDatabaseName("FK_Languages_LanguageDifficultyModels");

                    b.HasIndex("LinkedTraitId")
                        .HasDatabaseName("FK_Languages_TraitDefinitions");

                    b.ToTable("Languages");
                });

            modelBuilder.Entity("MudSharp.Models.LanguageDifficultyModels", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("longtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Type"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("LanguageDifficultyModels");
                });

            modelBuilder.Entity("MudSharp.Models.Law", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("ActivePeriod")
                        .HasColumnType("double");

                    b.Property<ulong>("CanBeAppliedAutomatically")
                        .HasColumnType("bit(1)");

                    b.Property<ulong>("CanBeArrested")
                        .HasColumnType("bit(1)");

                    b.Property<ulong>("CanBeOfferedBail")
                        .HasColumnType("bit(1)");

                    b.Property<int>("CrimeType")
                        .HasColumnType("int(11)");

                    b.Property<ulong>("DoNotAutomaticallyApplyRepeats")
                        .HasColumnType("bit(1)");

                    b.Property<int>("EnforcementPriority")
                        .HasColumnType("int(11)");

                    b.Property<string>("EnforcementStrategy")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("EnforcementStrategy"), "utf8");

                    b.Property<long?>("LawAppliesProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("LegalAuthorityId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<string>("PunishmentStrategy")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("PunishmentStrategy"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex("LawAppliesProgId")
                        .HasDatabaseName("FK_Laws_FutureProgs_idx");

                    b.HasIndex("LegalAuthorityId")
                        .HasDatabaseName("FK_Laws_LegalAuthority_idx");

                    b.ToTable("Laws");
                });

            modelBuilder.Entity("MudSharp.Models.LawsOffenderClasses", b =>
                {
                    b.Property<long>("LawId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("LegalClassId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("LawId", "LegalClassId")
                        .HasName("PRIMARY");

                    b.HasIndex("LegalClassId")
                        .HasDatabaseName("FK_Laws_OffenderClasses_LegalClasses_idx");

                    b.ToTable("Laws_OffenderClasses", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.LawsVictimClasses", b =>
                {
                    b.Property<long>("LawId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("LegalClassId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("LawId", "LegalClassId")
                        .HasName("PRIMARY");

                    b.HasIndex("LegalClassId")
                        .HasDatabaseName("FK_Laws_VictimClasses_LegalClasses_idx");

                    b.ToTable("Laws_VictimClasses", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.LegalAuthoritiesZones", b =>
                {
                    b.Property<long>("ZoneId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("LegalAuthorityId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ZoneId", "LegalAuthorityId")
                        .HasName("PRIMARY");

                    b.HasIndex("LegalAuthorityId")
                        .HasDatabaseName("FK_LegalAuthorities_Zones_LegalAuthorities_idx");

                    b.ToTable("LegalAuthorities_Zones", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.LegalAuthority", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("AutomaticConvictionTime")
                        .HasColumnType("double");

                    b.Property<bool>("AutomaticallyConvict")
                        .HasColumnType("tinyint(1)");

                    b.Property<long?>("BailCalculationProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("BankAccountId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CourtLocationId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("EnforcerStowingLocationId")
                        .HasColumnType("bigint(20)");

                    b.Property<decimal?>("GuardianDiscordChannel")
                        .HasColumnType("decimal(20,0)");

                    b.Property<long?>("JailLocationId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("MarshallingLocationId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<long?>("OnHoldProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("OnImprisonProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("OnReleaseProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("PlayersKnowTheirCrimes")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<long?>("PreparingLocationId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("PrisonBelongingsLocationId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("PrisonLocationId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("PrisonReleaseLocationId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("BailCalculationProgId");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("CourtLocationId");

                    b.HasIndex("CurrencyId")
                        .HasDatabaseName("FK_LegalAuthorities_Currencies_idx");

                    b.HasIndex("EnforcerStowingLocationId")
                        .HasDatabaseName("FK_LegalAuthorities_StowingCells_idx");

                    b.HasIndex("JailLocationId");

                    b.HasIndex("MarshallingLocationId")
                        .HasDatabaseName("FK_LegalAuthorities_MarshallingCells_idx");

                    b.HasIndex("OnHoldProgId");

                    b.HasIndex("OnImprisonProgId")
                        .HasDatabaseName("FK_LegalAuthorities_FutureprogsImprison_idx");

                    b.HasIndex("OnReleaseProgId")
                        .HasDatabaseName("FK_LegalAuthorities_FutureprogsRelease_idx");

                    b.HasIndex("PreparingLocationId")
                        .HasDatabaseName("FK_LegalAuthorities_PreparingCells_idx");

                    b.HasIndex("PrisonBelongingsLocationId")
                        .HasDatabaseName("FK_LegalAuthorities_PrisonBelongingsCells_idx");

                    b.HasIndex("PrisonLocationId")
                        .HasDatabaseName("FK_LegalAuthorities_PrisonCells_idx");

                    b.HasIndex("PrisonReleaseLocationId")
                        .HasDatabaseName("FK_LegalAuthorities_PrisonReleaseCells_idx");

                    b.ToTable("LegalAuthorities");
                });

            modelBuilder.Entity("MudSharp.Models.LegalAuthorityCells", b =>
                {
                    b.Property<long>("LegalAuthorityId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CellId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("LegalAuthorityId", "CellId")
                        .HasName("PRIMARY");

                    b.HasIndex("CellId")
                        .HasDatabaseName("FK_LegalAuthoritiesCells_Cells_idx");

                    b.HasIndex("LegalAuthorityId")
                        .HasDatabaseName("FK_LegalAuthoritiesCells_LegalAuthorities_idx");

                    b.ToTable("LegalAuthoritiyCells");
                });

            modelBuilder.Entity("MudSharp.Models.LegalAuthorityFine", b =>
                {
                    b.Property<long>("LegalAuthorityId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<decimal>("FinesOwned")
                        .HasColumnType("decimal(58,29)");

                    b.Property<string>("PaymentRequiredBy")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("PaymentRequiredBy"), "utf8");

                    b.HasKey("LegalAuthorityId", "CharacterId")
                        .HasName("PRIMARY");

                    b.HasIndex("CharacterId");

                    b.ToTable("LegalAuthorityFines", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.LegalAuthorityJailCell", b =>
                {
                    b.Property<long>("LegalAuthorityId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CellId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("LegalAuthorityId", "CellId")
                        .HasName("PRIMARY");

                    b.HasIndex("CellId")
                        .HasDatabaseName("FK_LegalAuthoritiesCells_Cells_Jail_idx");

                    b.HasIndex("LegalAuthorityId")
                        .HasDatabaseName("FK_LegalAuthoritiesCells_LegalAuthorities_Jail_idx");

                    b.ToTable("LegalAuthorityJailCells");
                });

            modelBuilder.Entity("MudSharp.Models.LegalClass", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<ulong>("CanBeDetainedUntilFinesPaid")
                        .HasColumnType("bit(1)");

                    b.Property<long>("LegalAuthorityId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("LegalClassPriority")
                        .HasColumnType("int(11)");

                    b.Property<long>("MembershipProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex("LegalAuthorityId")
                        .HasDatabaseName("FK_LegalClasses_LegalAuthorities_idx");

                    b.HasIndex("MembershipProgId")
                        .HasDatabaseName("FK_LegalClasses_FutureProgs_idx");

                    b.ToTable("LegalClasses");
                });

            modelBuilder.Entity("MudSharp.Models.Limb", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("LimbDamageThresholdMultiplier")
                        .HasColumnType("double");

                    b.Property<double>("LimbPainThresholdMultiplier")
                        .HasColumnType("double");

                    b.Property<int>("LimbType")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8mb4");

                    b.Property<long>("RootBodyId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("RootBodypartId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("RootBodyId")
                        .HasDatabaseName("FK_Limbs_BodyProtos_idx");

                    b.HasIndex("RootBodypartId")
                        .HasDatabaseName("FK_Limbs_BodypartProto_idx");

                    b.ToTable("Limbs");
                });

            modelBuilder.Entity("MudSharp.Models.LimbBodypartProto", b =>
                {
                    b.Property<long>("BodypartProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("LimbId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("BodypartProtoId", "LimbId")
                        .HasName("PRIMARY");

                    b.HasIndex("LimbId")
                        .HasDatabaseName("FK_Limbs_BodypartProto_Limbs_idx");

                    b.ToTable("Limbs_BodypartProto", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.LimbsSpinalPart", b =>
                {
                    b.Property<long>("LimbId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("BodypartProtoId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("LimbId", "BodypartProtoId")
                        .HasName("PRIMARY");

                    b.HasIndex("BodypartProtoId")
                        .HasDatabaseName("FK_Limbs_SpinalParts_BodypartProtos_idx");

                    b.ToTable("Limbs_SpinalParts", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.LineOfCreditAccount", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("AccountLimit")
                        .HasColumnType("decimal(58,29)");

                    b.Property<string>("AccountName")
                        .HasColumnType("longtext");

                    b.Property<long>("AccountOwnerId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("AccountOwnerName")
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("AccountOwnerName"), "utf8");

                    b.Property<ulong>("IsSuspended")
                        .HasColumnType("bit(1)");

                    b.Property<decimal>("OutstandingBalance")
                        .HasColumnType("decimal(58,29)");

                    b.Property<long>("ShopId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("AccountOwnerId")
                        .HasDatabaseName("FK_LineOfCreditAccounts_Characters_idx");

                    b.HasIndex("ShopId")
                        .HasDatabaseName("FK_LineOfCreditAccounts_Shops_idx");

                    b.ToTable("LineOfCreditAccounts");
                });

            modelBuilder.Entity("MudSharp.Models.LineOfCreditAccountUser", b =>
                {
                    b.Property<long>("LineOfCreditAccountId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("AccountUserId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("AccountUserName")
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("AccountUserName"), "utf8");

                    b.Property<decimal?>("SpendingLimit")
                        .HasColumnType("decimal(58,29)");

                    b.HasKey("LineOfCreditAccountId", "AccountUserId")
                        .HasName("PRIMARY");

                    b.HasIndex("AccountUserId")
                        .HasDatabaseName("FK_LineOfCreditAccountUsers_Characters_idx");

                    b.HasIndex("LineOfCreditAccountId")
                        .HasDatabaseName("FK_LineOfCreditAccountUsers_LineOfCreditAccounts_idx");

                    b.ToTable("LineOfCreditAccountUsers");
                });

            modelBuilder.Entity("MudSharp.Models.Liquid", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("AlcoholLitresPerLitre")
                        .HasColumnType("double");

                    b.Property<double?>("BoilingPoint")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'373.15'");

                    b.Property<double>("CaloriesPerLitre")
                        .HasColumnType("double");

                    b.Property<long?>("CountAsId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("CountAsQuality")
                        .HasColumnType("int(11)");

                    b.Property<string>("DampDescription")
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("DampDescription"), "utf8");

                    b.Property<string>("DampShortDescription")
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("DampShortDescription"), "utf8");

                    b.Property<double>("Density")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Description"), "utf8");

                    b.Property<string>("DisplayColour")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'blue'")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("DisplayColour"), "utf8");

                    b.Property<long?>("DraughtProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("DrenchedDescription")
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("DrenchedDescription"), "utf8");

                    b.Property<string>("DrenchedShortDescription")
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("DrenchedShortDescription"), "utf8");

                    b.Property<long?>("DriedResidueId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("DrinkSatiatedHoursPerLitre")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'12'");

                    b.Property<double>("DrugGramsPerUnitVolume")
                        .HasColumnType("double");

                    b.Property<long?>("DrugId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("ElectricalConductivity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'0.005'");

                    b.Property<double>("FoodSatiatedHoursPerLitre")
                        .HasColumnType("double");

                    b.Property<double?>("FreezingPoint")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'273.15'");

                    b.Property<long?>("GasFormId")
                        .HasColumnType("bigint(20)");

                    b.Property<double?>("IgnitionPoint")
                        .HasColumnType("double");

                    b.Property<int>("InjectionConsequence")
                        .HasColumnType("int(11)");

                    b.Property<string>("LongDescription")
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("LongDescription"), "utf8");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<ulong>("Organic")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<double>("RelativeEnthalpy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1.0'");

                    b.Property<double>("ResidueVolumePercentage")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'0.05'");

                    b.Property<double>("SmellIntensity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'10'");

                    b.Property<string>("SmellText")
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("SmellText"), "utf8");

                    b.Property<long?>("SolventId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("SolventVolumeRatio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.Property<double>("SpecificHeatCapacity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'4181'");

                    b.Property<double>("TasteIntensity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'100'");

                    b.Property<string>("TasteText")
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("TasteText"), "utf8");

                    b.Property<double>("ThermalConductivity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'0.609'");

                    b.Property<string>("VagueSmellText")
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("VagueSmellText"), "utf8");

                    b.Property<string>("VagueTasteText")
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("VagueTasteText"), "utf8");

                    b.Property<double>("Viscosity")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.Property<double>("WaterLitresPerLitre")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("WetDescription")
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("WetDescription"), "utf8");

                    b.Property<string>("WetShortDescription")
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("WetShortDescription"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex("CountAsId")
                        .HasDatabaseName("FK_Liquids_Liquids_CountasAs_idx");

                    b.HasIndex("DriedResidueId")
                        .HasDatabaseName("FK_Liquids_Materials_idx");

                    b.HasIndex("DrugId")
                        .HasDatabaseName("FK_Liquids_Drugs_idx");

                    b.HasIndex("GasFormId");

                    b.HasIndex("SolventId")
                        .HasDatabaseName("FK_Liquids_Liquids_idx");

                    b.ToTable("Liquids");
                });

            modelBuilder.Entity("MudSharp.Models.LiquidsTags", b =>
                {
                    b.Property<long>("LiquidId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("LiquidId", "TagId")
                        .HasName("PRIMARY");

                    b.HasIndex("TagId")
                        .HasDatabaseName("FK_Liquids_Tags_Tags_idx");

                    b.ToTable("Liquids_Tags", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.Lock", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<int>("Strength")
                        .HasColumnType("int(11)");

                    b.Property<int>("Style")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.ToTable("Locks");
                });

            modelBuilder.Entity("MudSharp.Models.LoginIp", b =>
                {
                    b.Property<string>("IpAddress")
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("IpAddress"), "utf8");

                    b.Property<long>("AccountId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("AccountRegisteredOnThisIp")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasColumnName("AccountRegisteredOnThisIP")
                        .HasDefaultValueSql("b'0'");

                    b.Property<DateTime>("FirstDate")
                        .HasColumnType("datetime");

                    b.HasKey("IpAddress", "AccountId")
                        .HasName("PRIMARY");

                    b.HasIndex("AccountId")
                        .HasDatabaseName("FK_LoginIPs_Accounts");

                    b.ToTable("LoginIPs", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.MagicCapability", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("CapabilityModel")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("CapabilityModel"), "utf8");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8");

                    b.Property<long>("MagicSchoolId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<int>("PowerLevel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("Id");

                    b.HasIndex("MagicSchoolId")
                        .HasDatabaseName("FK_MagicCapabilities_MagicSchools_idx");

                    b.ToTable("MagicCapabilities");
                });

            modelBuilder.Entity("MudSharp.Models.MagicGenerator", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Type"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("MagicGenerators");
                });

            modelBuilder.Entity("MudSharp.Models.MagicPower", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Blurb")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Blurb"), "utf8");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8");

                    b.Property<long>("MagicSchoolId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<string>("PowerModel")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("PowerModel"), "utf8");

                    b.Property<string>("ShowHelp")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ShowHelp"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex("MagicSchoolId")
                        .HasDatabaseName("FK_MagicPowers_MagicSchools_idx");

                    b.ToTable("MagicPowers");
                });

            modelBuilder.Entity("MudSharp.Models.MagicResource", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("BottomColour")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(100)")
                        .HasDefaultValue("[35m")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("BottomColour"), "utf8");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8");

                    b.Property<int>("MagicResourceType")
                        .HasColumnType("int(11)");

                    b.Property<string>("MidColour")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(100)")
                        .HasDefaultValue("[1;35m")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("MidColour"), "utf8");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<string>("ShortName")
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ShortName"), "utf8");

                    b.Property<string>("TopColour")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(100)")
                        .HasDefaultValue("[0m[38;5;171m")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("TopColour"), "utf8");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Type"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("MagicResources");
                });

            modelBuilder.Entity("MudSharp.Models.MagicSchool", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<long?>("ParentSchoolId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("PowerListColour")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("PowerListColour"), "utf8");

                    b.Property<string>("SchoolAdjective")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("SchoolAdjective"), "utf8");

                    b.Property<string>("SchoolVerb")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("SchoolVerb"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex("ParentSchoolId")
                        .HasDatabaseName("FK_MagicSchools_MagicSchools_idx");

                    b.ToTable("MagicSchools");
                });

            modelBuilder.Entity("MudSharp.Models.MagicSpell", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<bool>("AppliedEffectsAreExclusive")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Blurb")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Blurb"), "utf8");

                    b.Property<int>("CastingDifficulty")
                        .HasColumnType("int(11)");

                    b.Property<string>("CastingEmote")
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("CastingEmote"), "utf8");

                    b.Property<int>("CastingEmoteFlags")
                        .HasColumnType("int(11)");

                    b.Property<long?>("CastingTraitDefinitionId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Description"), "utf8");

                    b.Property<long?>("EffectDurationExpressionId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("ExclusiveDelay")
                        .HasColumnType("double");

                    b.Property<string>("FailCastingEmote")
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("FailCastingEmote"), "utf8");

                    b.Property<long>("MagicSchoolId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("MinimumSuccessThreshold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<double>("NonExclusiveDelay")
                        .HasColumnType("double");

                    b.Property<int?>("ResistingDifficulty")
                        .HasColumnType("int(11)");

                    b.Property<long?>("ResistingTraitDefinitionId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("SpellKnownProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("TargetEmote")
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("TargetEmote"), "utf8");

                    b.Property<int>("TargetEmoteFlags")
                        .HasColumnType("int(11)");

                    b.Property<string>("TargetResistedEmote")
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("TargetResistedEmote"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex("CastingTraitDefinitionId")
                        .HasDatabaseName("FK_MagicSpells_TraitDefinitions_Casting_idx");

                    b.HasIndex("EffectDurationExpressionId")
                        .HasDatabaseName("FK_MagicSpells_TraitExpressions_idx");

                    b.HasIndex("MagicSchoolId")
                        .HasDatabaseName("FK_MagicSpells_MagicSchools_idx");

                    b.HasIndex("ResistingTraitDefinitionId")
                        .HasDatabaseName("FK_MagicSpells_TraitDefinitions_Resisting_idx");

                    b.HasIndex("SpellKnownProgId")
                        .HasDatabaseName("FK_MagicSpells_Futureprogs_idx");

                    b.ToTable("MagicSpells");
                });

            modelBuilder.Entity("MudSharp.Models.Market", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<long>("EconomicZoneId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("MarketPriceFormula")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("EconomicZoneId");

                    b.ToTable("Markets");
                });

            modelBuilder.Entity("MudSharp.Models.MarketCategory", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<double>("ElasticityFactorAbove")
                        .HasColumnType("double");

                    b.Property<double>("ElasticityFactorBelow")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("Tags")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("MarketCategories");
                });

            modelBuilder.Entity("MudSharp.Models.MarketInfluence", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AppliesFrom")
                        .HasColumnType("longtext");

                    b.Property<string>("AppliesUntil")
                        .HasColumnType("longtext");

                    b.Property<long>("CharacterKnowsAboutInfluenceProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Impacts")
                        .HasColumnType("longtext");

                    b.Property<long>("MarketId")
                        .HasColumnType("bigint");

                    b.Property<long?>("MarketInfluenceTemplateId")
                        .HasColumnType("bigint");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CharacterKnowsAboutInfluenceProgId");

                    b.HasIndex("MarketId");

                    b.HasIndex("MarketInfluenceTemplateId");

                    b.ToTable("MarketInfluences");
                });

            modelBuilder.Entity("MudSharp.Models.MarketInfluenceTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CharacterKnowsAboutInfluenceProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Impacts")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<string>("TemplateSummary")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.HasIndex("CharacterKnowsAboutInfluenceProgId");

                    b.ToTable("MarketInfluenceTemplates");
                });

            modelBuilder.Entity("MudSharp.Models.MarketPopulation", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<long>("MarketId")
                        .HasColumnType("bigint");

                    b.Property<string>("MarketPopulationNeeds")
                        .HasColumnType("longtext");

                    b.Property<string>("MarketStressPoints")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .HasColumnType("longtext");

                    b.Property<int>("PopulationScale")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("MarketId");

                    b.ToTable("MarketPopulations");
                });

            modelBuilder.Entity("MudSharp.Models.Material", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("Absorbency")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'0.25'");

                    b.Property<int?>("BehaviourType")
                        .HasColumnType("int(11)");

                    b.Property<double?>("BoilingPoint")
                        .HasColumnType("double");

                    b.Property<double>("Density")
                        .HasColumnType("double");

                    b.Property<double>("ElectricalConductivity")
                        .HasColumnType("double");

                    b.Property<double?>("HeatDamagePoint")
                        .HasColumnType("double");

                    b.Property<double?>("IgnitionPoint")
                        .HasColumnType("double");

                    b.Property<double?>("ImpactFracture")
                        .HasColumnType("double");

                    b.Property<double?>("ImpactStrainAtYield")
                        .HasColumnType("double");

                    b.Property<double?>("ImpactYield")
                        .HasColumnType("double");

                    b.Property<long?>("LiquidFormId")
                        .HasColumnType("bigint");

                    b.Property<string>("MaterialDescription")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("MaterialDescription"), "utf8");

                    b.Property<double?>("MeltingPoint")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<ulong>("Organic")
                        .HasColumnType("bit(1)");

                    b.Property<string>("ResidueColour")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'white'")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ResidueColour"), "utf8");

                    b.Property<string>("ResidueDesc")
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ResidueDesc"), "utf8");

                    b.Property<string>("ResidueSdesc")
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ResidueSdesc"), "utf8");

                    b.Property<double?>("ShearFracture")
                        .HasColumnType("double");

                    b.Property<double?>("ShearStrainAtYield")
                        .HasColumnType("double");

                    b.Property<double?>("ShearYield")
                        .HasColumnType("double");

                    b.Property<long?>("SolventId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("SolventVolumeRatio")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.Property<double>("SpecificHeatCapacity")
                        .HasColumnType("double");

                    b.Property<double>("ThermalConductivity")
                        .HasColumnType("double");

                    b.Property<int>("Type")
                        .HasColumnType("int(11)");

                    b.Property<double?>("Viscosity")
                        .HasColumnType("double");

                    b.Property<double?>("YoungsModulus")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("Materials");
                });

            modelBuilder.Entity("MudSharp.Models.MaterialsTags", b =>
                {
                    b.Property<long>("MaterialId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("TagId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("MaterialId", "TagId")
                        .HasName("PRIMARY");

                    b.HasIndex("TagId")
                        .HasDatabaseName("Materials_Tags_Tags_idx");

                    b.ToTable("Materials_Tags", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.Merchandise", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<decimal>("AutoReorderPrice")
                        .HasColumnType("decimal(58,29)");

                    b.Property<ulong>("AutoReordering")
                        .HasColumnType("bit(1)");

                    b.Property<decimal>("BaseBuyModifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("decimal(58,29)")
                        .HasDefaultValue(0.3m);

                    b.Property<decimal>("BasePrice")
                        .HasColumnType("decimal(58,29)");

                    b.Property<ulong>("DefaultMerchandiseForItem")
                        .HasColumnType("bit(1)");

                    b.Property<bool>("IgnoreMarketPricing")
                        .HasColumnType("tinyint(1)");

                    b.Property<long>("ItemProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("ListDescription")
                        .HasColumnType("varchar(500)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ListDescription"), "utf8");

                    b.Property<int>("MaximumStockLevelsToBuy")
                        .HasColumnType("int");

                    b.Property<double>("MinimumConditionToBuy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValue(0.94999999999999996);

                    b.Property<int>("MinimumStockLevels")
                        .HasColumnType("int(11)");

                    b.Property<double>("MinimumStockLevelsByWeight")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<long?>("PreferredDisplayContainerId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("PreserveVariablesOnReorder")
                        .HasColumnType("bit(1)");

                    b.Property<long>("ShopId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("SkinId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("WillBuy")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValue(0ul);

                    b.Property<ulong>("WillSell")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValue(1ul);

                    b.HasKey("Id");

                    b.HasIndex("PreferredDisplayContainerId")
                        .HasDatabaseName("FK_Merchandises_GameItems_idx");

                    b.HasIndex("ShopId")
                        .HasDatabaseName("FK_Merchandises_Shops_idx");

                    b.ToTable("Merchandises");
                });

            modelBuilder.Entity("MudSharp.Models.Merit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8mb4");

                    b.Property<int>("MeritScope")
                        .HasColumnType("int(11)");

                    b.Property<int>("MeritType")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8mb4");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Type"), "utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("FK_Merits_Merits_idx");

                    b.ToTable("Merits");
                });

            modelBuilder.Entity("MudSharp.Models.MeritsChargenResources", b =>
                {
                    b.Property<long>("MeritId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ChargenResourceId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("RequirementOnly")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<int>("Amount")
                        .HasColumnType("int(11)");

                    b.HasKey("MeritId", "ChargenResourceId", "RequirementOnly")
                        .HasName("PRIMARY");

                    b.HasIndex("ChargenResourceId")
                        .HasDatabaseName("FK_Merits_ChargenResources_ChargenResources_idx");

                    b.ToTable("Merits_ChargenResources", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.MoveSpeed", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Alias"), "utf8");

                    b.Property<long>("BodyProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("FirstPersonVerb")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("FirstPersonVerb"), "utf8");

                    b.Property<double>("Multiplier")
                        .HasColumnType("double");

                    b.Property<long>("PositionId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("PresentParticiple")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("PresentParticiple"), "utf8");

                    b.Property<double>("StaminaMultiplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("ThirdPersonVerb")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ThirdPersonVerb"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex("BodyProtoId")
                        .HasDatabaseName("FK_MoveSpeeds_BodyPrototype");

                    b.ToTable("MoveSpeeds");
                });

            modelBuilder.Entity("MudSharp.Models.MutualIntelligability", b =>
                {
                    b.Property<long>("ListenerLanguageId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("TargetLanguageId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("IntelligabilityDifficulty")
                        .HasColumnType("int(11)");

                    b.HasKey("ListenerLanguageId", "TargetLanguageId")
                        .HasName("PRIMARY");

                    b.HasIndex("TargetLanguageId")
                        .HasDatabaseName("FK_Languages_MutualIntelligabilities_Target_idx");

                    b.ToTable("MutualIntelligabilities");
                });

            modelBuilder.Entity("MudSharp.Models.NPCSpawner", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CountsAsProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Definition")
                        .HasColumnType("longtext");

                    b.Property<long?>("IsActiveProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("MinimumCount")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<long?>("OnSpawnProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("SpawnStrategy")
                        .HasColumnType("int(11)");

                    b.Property<int>("TargetCount")
                        .HasColumnType("int(11)");

                    b.Property<long?>("TargetTemplateId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("CountsAsProgId");

                    b.HasIndex("IsActiveProgId");

                    b.HasIndex("OnSpawnProgId");

                    b.ToTable("NPCSpawners", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.NPCSpawnerCell", b =>
                {
                    b.Property<long>("NPCSpawnerId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CellId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("NPCSpawnerId", "CellId")
                        .HasName("PRIMARY");

                    b.HasIndex("CellId");

                    b.ToTable("NPCSpawnerCells", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.NPCSpawnerZone", b =>
                {
                    b.Property<long>("NPCSpawnerId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ZoneId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("NPCSpawnerId", "ZoneId")
                        .HasName("PRIMARY");

                    b.HasIndex("ZoneId");

                    b.ToTable("NPCSpawnerZones", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.NameCulture", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("NameCulture", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.NewPlayerHint", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<ulong>("CanRepeat")
                        .HasColumnType("bit(1)");

                    b.Property<long?>("FilterProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Priority")
                        .HasColumnType("int(11)");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Text"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex("FilterProgId");

                    b.ToTable("NewPlayerHints", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.NonCardinalExitTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("DestinationInboundPreface")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("DestinationInboundPreface"), "utf8");

                    b.Property<string>("DestinationOutboundPreface")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("DestinationOutboundPreface"), "utf8");

                    b.Property<string>("InboundVerb")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("InboundVerb"), "utf8");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<string>("OriginInboundPreface")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("OriginInboundPreface"), "utf8");

                    b.Property<string>("OriginOutboundPreface")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("OriginOutboundPreface"), "utf8");

                    b.Property<string>("OutboundVerb")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("OutboundVerb"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("NonCardinalExitTemplates");
                });

            modelBuilder.Entity("MudSharp.Models.Npc", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("BodyguardCharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("TemplateId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("TemplateRevnum")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("BodyguardCharacterId")
                        .HasDatabaseName("FK_NPCs_Characters_Bodyguard_idx");

                    b.HasIndex("CharacterId")
                        .HasDatabaseName("FK_NPCs_Characters");

                    b.HasIndex("TemplateId", "TemplateRevnum")
                        .HasDatabaseName("FK_NPCs_NPCTemplates");

                    b.ToTable("NPCs", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.NpcTemplate", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("RevisionNumber")
                        .HasColumnType("int(11)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8");

                    b.Property<long>("EditableItemId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Type"), "utf8");

                    b.HasKey("Id", "RevisionNumber")
                        .HasName("PRIMARY");

                    b.HasIndex("EditableItemId")
                        .HasDatabaseName("FK_NPCTemplates_EditableItems");

                    b.ToTable("NPCTemplates", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.NpcTemplatesArtificalIntelligences", b =>
                {
                    b.Property<int>("NpcTemplateRevisionNumber")
                        .HasColumnType("int(11)")
                        .HasColumnName("NPCTemplateRevisionNumber");

                    b.Property<long>("NpcTemplateId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("NPCTemplateId");

                    b.Property<long>("AiId")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("AIId");

                    b.HasKey("NpcTemplateRevisionNumber", "NpcTemplateId", "AiId")
                        .HasName("PRIMARY");

                    b.HasIndex("AiId")
                        .HasDatabaseName("FK_NTAI_ArtificalIntelligences");

                    b.HasIndex("NpcTemplateId", "NpcTemplateRevisionNumber")
                        .HasDatabaseName("FK_NTAI_NPCTemplates");

                    b.ToTable("NPCTemplates_ArtificalIntelligences", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.NpcsArtificialIntelligences", b =>
                {
                    b.Property<long>("ArtificialIntelligenceId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("Npcid")
                        .HasColumnType("bigint(20)")
                        .HasColumnName("NPCId");

                    b.HasKey("ArtificialIntelligenceId", "Npcid")
                        .HasName("PRIMARY");

                    b.HasIndex("Npcid")
                        .HasDatabaseName("FK_NPCs_ArtificialIntelligences_NPCs");

                    b.ToTable("NPCs_ArtificialIntelligences", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.Patrol", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("LastMajorNodeId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("LegalAuthorityId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("NextMajorNodeId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("PatrolLeaderId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("PatrolPhase")
                        .HasColumnType("int(11)");

                    b.Property<long>("PatrolRouteId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("CharacterId");

                    b.HasIndex("LastMajorNodeId")
                        .HasDatabaseName("FK_Patrols_LastMajorNode_idx");

                    b.HasIndex("LegalAuthorityId")
                        .HasDatabaseName("FK_Patrols_LegalAuthorities_idx");

                    b.HasIndex("NextMajorNodeId")
                        .HasDatabaseName("FK_Patrols_NextMajorNode_idx");

                    b.HasIndex("PatrolLeaderId")
                        .HasDatabaseName("FK_Patrols_Characters_idx");

                    b.HasIndex("PatrolRouteId")
                        .HasDatabaseName("FK_Patrols_PatrolRoutes_idx");

                    b.ToTable("Patrols", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.PatrolMember", b =>
                {
                    b.Property<long>("PatrolId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("PatrolId", "CharacterId")
                        .HasName("PRIMARY");

                    b.HasIndex("CharacterId");

                    b.ToTable("PatrolMembers", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.PatrolRoute", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<ulong>("IsReady")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<long>("LegalAuthorityId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("LingerTimeMajorNode")
                        .HasColumnType("DOUBLE");

                    b.Property<double>("LingerTimeMinorNode")
                        .HasColumnType("DOUBLE");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)");

                    b.Property<string>("PatrolStrategy")
                        .HasColumnType("varchar(100)");

                    b.Property<int>("Priority")
                        .HasColumnType("int(11)");

                    b.Property<long?>("StartPatrolProgId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("LegalAuthorityId")
                        .HasDatabaseName("FK_PatrolRoutes_LegalAuthorities_idx");

                    b.HasIndex("StartPatrolProgId");

                    b.ToTable("PatrolRoutes", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.PatrolRouteNode", b =>
                {
                    b.Property<long>("PatrolRouteId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CellId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Order")
                        .HasColumnType("int(11)");

                    b.HasKey("PatrolRouteId", "CellId")
                        .HasName("PRIMARY");

                    b.HasIndex("CellId")
                        .HasDatabaseName("FK_PatrolRoutesNodes_Cells_idx");

                    b.HasIndex("PatrolRouteId")
                        .HasDatabaseName("FK_PatrolRoutesNodes_PatrolRoutes_idx");

                    b.ToTable("PatrolRoutesNodes", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.PatrolRouteNumbers", b =>
                {
                    b.Property<long>("PatrolRouteId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("EnforcementAuthorityId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("NumberRequired")
                        .HasColumnType("int(11)");

                    b.HasKey("PatrolRouteId", "EnforcementAuthorityId")
                        .HasName("PRIMARY");

                    b.HasIndex("EnforcementAuthorityId")
                        .HasDatabaseName("FK_PatrolRoutesNumbers_EnforcementAuthorities_idx");

                    b.HasIndex("PatrolRouteId")
                        .HasDatabaseName("FK_PatrolRoutesNumbers_PatrolRoutes_idx");

                    b.ToTable("PatrolRoutesNumbers", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.PatrolRouteTimeOfDay", b =>
                {
                    b.Property<long>("PatrolRouteId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("TimeOfDay")
                        .HasColumnType("int(11)");

                    b.HasKey("PatrolRouteId", "TimeOfDay")
                        .HasName("PRIMARY");

                    b.HasIndex("PatrolRouteId")
                        .HasDatabaseName("FK_PatrolRoutesTimesOfDay_PatrolRoutes_idx");

                    b.ToTable("PatrolRoutesTimesOfDay", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.Paygrade", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Abbreviation")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Abbreviation"), "utf8");

                    b.Property<long>("ClanId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<decimal>("PayAmount")
                        .HasColumnType("decimal(58,29)");

                    b.HasKey("Id");

                    b.HasIndex("ClanId")
                        .HasDatabaseName("FK_Paygrades_Clans");

                    b.HasIndex("CurrencyId")
                        .HasDatabaseName("FK_Paygrades_Currencies");

                    b.ToTable("Paygrades");
                });

            modelBuilder.Entity("MudSharp.Models.PerceiverMerit", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("BodyId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("GameItemId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("MeritId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("BodyId")
                        .HasDatabaseName("FK_PerceiverMerits_Bodies_idx");

                    b.HasIndex("CharacterId")
                        .HasDatabaseName("FK_PerceiverMerits_Characters_idx");

                    b.HasIndex("GameItemId")
                        .HasDatabaseName("FK_PerceiverMerits_GameItems_idx");

                    b.HasIndex("MeritId")
                        .HasDatabaseName(" FK_PerceiverMerits_Merits_idx");

                    b.ToTable("PerceiverMerits");
                });

            modelBuilder.Entity("MudSharp.Models.PlayerActivitySnapshot", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AvailableAdmins")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime");

                    b.Property<int>("IdlePlayers")
                        .HasColumnType("int(11)");

                    b.Property<int>("OnlineAdmins")
                        .HasColumnType("int(11)");

                    b.Property<int>("OnlineGuests")
                        .HasColumnType("int(11)");

                    b.Property<int>("OnlinePlayers")
                        .HasColumnType("int(11)");

                    b.Property<int>("UniquePCLocations")
                        .HasColumnType("int(11)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("PlayerActivitySnapshots", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.PopulationBloodModel", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("PopulationBloodModels");
                });

            modelBuilder.Entity("MudSharp.Models.PopulationBloodModelsBloodtype", b =>
                {
                    b.Property<long>("BloodtypeId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("PopulationBloodModelId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("Weight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("BloodtypeId", "PopulationBloodModelId")
                        .HasName("PRIMARY");

                    b.HasIndex("PopulationBloodModelId")
                        .HasDatabaseName("FK_PopulationBloodModels_Bloodtypes_PopulationBloodModels_idx");

                    b.ToTable("PopulationBloodModels_Bloodtypes", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.ProgSchedule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("FutureProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("IntervalModifier")
                        .HasColumnType("int(11)");

                    b.Property<int>("IntervalOther")
                        .HasColumnType("int(11)");

                    b.Property<int>("IntervalType")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8mb4");

                    b.Property<string>("ReferenceDate")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ReferenceDate"), "utf8mb4");

                    b.Property<string>("ReferenceTime")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ReferenceTime"), "utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("FutureProgId")
                        .HasDatabaseName("FK_ProgSchedules_FutureProgs_idx");

                    b.ToTable("ProgSchedules");
                });

            modelBuilder.Entity("MudSharp.Models.Project", b =>
                {
                    b.Property<long>("Id")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("RevisionNumber")
                        .HasColumnType("int(11)");

                    b.Property<ulong>("AppearInJobsList")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValue(0ul);

                    b.Property<string>("Definition")
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8");

                    b.Property<long>("EditableItemId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Type"), "utf8");

                    b.HasKey("Id", "RevisionNumber")
                        .HasName("PRIMARY");

                    b.HasIndex("EditableItemId")
                        .HasDatabaseName("FK_Projects_EditableItems_idx");

                    b.ToTable("Projects");
                });

            modelBuilder.Entity("MudSharp.Models.ProjectAction", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Description"), "utf8");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<long>("ProjectPhaseId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("SortOrder")
                        .HasColumnType("int(11)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Type"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex("ProjectPhaseId")
                        .HasDatabaseName("FK_ProjectActions_ProjectPhases_idx");

                    b.ToTable("ProjectActions");
                });

            modelBuilder.Entity("MudSharp.Models.ProjectLabourImpact", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Description"), "utf8");

                    b.Property<double>("MinimumHoursForImpactToKickIn")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<long>("ProjectLabourRequirementId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Type"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex("ProjectLabourRequirementId")
                        .HasDatabaseName("FK_ProjectLabourImpacts_ProjectLabourRequirements_idx");

                    b.ToTable("ProjectLabourImpacts");
                });

            modelBuilder.Entity("MudSharp.Models.ProjectLabourRequirement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Description"), "utf8");

                    b.Property<int>("MaximumSimultaneousWorkers")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<long>("ProjectPhaseId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("TotalProgressRequired")
                        .HasColumnType("double");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Type"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex("ProjectPhaseId")
                        .HasDatabaseName("FK_ProjectLabourRequirements_ProjectPhases_idx");

                    b.ToTable("ProjectLabourRequirements");
                });

            modelBuilder.Entity("MudSharp.Models.ProjectMaterialRequirement", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Description"), "utf8");

                    b.Property<ulong>("IsMandatoryForProjectCompletion")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<long>("ProjectPhaseId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Type"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex("ProjectPhaseId")
                        .HasDatabaseName("FK_ProjectMaterialRequirements_ProjectPhases_idx");

                    b.ToTable("ProjectMaterialRequirements");
                });

            modelBuilder.Entity("MudSharp.Models.ProjectPhase", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Description"), "utf8");

                    b.Property<int>("PhaseNumber")
                        .HasColumnType("int(11)");

                    b.Property<long>("ProjectId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("ProjectRevisionNumber")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("ProjectId", "ProjectRevisionNumber")
                        .HasDatabaseName("FK_ProjectPhases_Projects_idx");

                    b.ToTable("ProjectPhases");
                });

            modelBuilder.Entity("MudSharp.Models.Property", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<ulong>("ApplyCriminalCodeInProperty")
                        .HasColumnType("bit(1)");

                    b.Property<string>("DetailedDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("DetailedDescription"), "utf8");

                    b.Property<long>("EconomicZoneId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("LastChangeOfOwnership")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("LastChangeOfOwnership"), "utf8");

                    b.Property<decimal>("LastSaleValue")
                        .HasColumnType("decimal(58,29)");

                    b.Property<long?>("LeaseId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("LeaseOrderId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<long?>("SaleOrderId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("EconomicZoneId");

                    b.HasIndex("LeaseId");

                    b.HasIndex("LeaseOrderId");

                    b.HasIndex("SaleOrderId");

                    b.ToTable("Properties", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.PropertyKey", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AddedToPropertyOnDate")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("AddedToPropertyOnDate"), "utf8");

                    b.Property<decimal>("CostToReplace")
                        .HasColumnType("decimal(58,29)");

                    b.Property<long>("GameItemId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("IsReturned")
                        .HasColumnType("bit(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<long>("PropertyId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("GameItemId");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyKeys", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.PropertyLease", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<ulong>("AutoRenew")
                        .HasColumnType("bit(1)");

                    b.Property<decimal>("BondClaimed")
                        .HasColumnType("decimal(65,30)");

                    b.Property<decimal>("BondPayment")
                        .HasColumnType("decimal(58,29)");

                    b.Property<ulong>("BondReturned")
                        .HasColumnType("bit(1)");

                    b.Property<string>("Interval")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Interval"), "utf8");

                    b.Property<string>("LastLeasePayment")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("LastLeasePayment"), "utf8");

                    b.Property<string>("LeaseEnd")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("LeaseEnd"), "utf8");

                    b.Property<long>("LeaseOrderId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("LeaseStart")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("LeaseStart"), "utf8");

                    b.Property<string>("LeaseholderReference")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("LeaseholderReference"), "utf8");

                    b.Property<decimal>("PaymentBalance")
                        .HasColumnType("decimal(58,29)");

                    b.Property<decimal>("PricePerInterval")
                        .HasColumnType("decimal(58,29)");

                    b.Property<long>("PropertyId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("TenantInfo")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("TenantInfo"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex("LeaseOrderId");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyLeases", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.PropertyLeaseOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<ulong>("AllowAutoRenew")
                        .HasColumnType("bit(1)");

                    b.Property<ulong>("AllowLeaseNovation")
                        .HasColumnType("bit(1)");

                    b.Property<ulong>("AutomaticallyRelistAfterLeaseTerm")
                        .HasColumnType("bit(1)");

                    b.Property<decimal>("BondRequired")
                        .HasColumnType("decimal(58,29)");

                    b.Property<long?>("CanLeaseProgCharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CanLeaseProgClanId")
                        .HasColumnType("bigint(20)");

                    b.Property<decimal>("FeeIncreasePercentageAfterLeaseTerm")
                        .HasColumnType("decimal(58,29)");

                    b.Property<string>("Interval")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Interval"), "utf8");

                    b.Property<ulong>("ListedForLease")
                        .HasColumnType("bit(1)");

                    b.Property<double>("MaximumLeaseDurationDays")
                        .HasColumnType("double");

                    b.Property<double>("MinimumLeaseDurationDays")
                        .HasColumnType("double");

                    b.Property<decimal>("PricePerInterval")
                        .HasColumnType("decimal(58,29)");

                    b.Property<long>("PropertyId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("PropertyOwnerConsentInfo")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("PropertyOwnerConsentInfo"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex("CanLeaseProgCharacterId");

                    b.HasIndex("CanLeaseProgClanId");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertyLeaseOrders", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.PropertyLocation", b =>
                {
                    b.Property<long>("PropertyId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CellId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("PropertyId", "CellId")
                        .HasName("PRIMARY");

                    b.HasIndex("CellId");

                    b.ToTable("PropertyLocations", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.PropertyOwner", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("FrameworkItemId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("FrameworkItemType")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("FrameworkItemType"), "utf8");

                    b.Property<long>("PropertyId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("RevenueAccountId")
                        .HasColumnType("bigint(20)");

                    b.Property<decimal>("ShareOfOwnership")
                        .HasColumnType("decimal(58,29)");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.HasIndex("RevenueAccountId");

                    b.ToTable("PropertyOwners", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.PropertySaleOrder", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("DurationOfListingDays")
                        .HasColumnType("double");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int(11)");

                    b.Property<long>("PropertyId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("PropertyOwnerConsentInfo")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("PropertyOwnerConsentInfo"), "utf8");

                    b.Property<decimal>("ReservePrice")
                        .HasColumnType("decimal(58,29)");

                    b.Property<string>("StartOfListing")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("StartOfListing"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex("PropertyId");

                    b.ToTable("PropertySalesOrders", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.Race", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("AdultAge")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'21'");

                    b.Property<string>("AllowedGenders")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("AllowedGenders"), "utf8");

                    b.Property<long>("AttributeBonusProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("AttributeTotalCap")
                        .HasColumnType("int(11)");

                    b.Property<long?>("AvailabilityProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("BaseBodyId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("BiteWeight")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1000'");

                    b.Property<long?>("BloodLiquidId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("BloodModelId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("BodypartHealthMultiplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("BodypartSizeModifier")
                        .HasColumnType("int(11)");

                    b.Property<string>("BreathingModel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("'simple'")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("BreathingModel"), "utf8");

                    b.Property<string>("BreathingVolumeExpression")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(500)")
                        .HasDefaultValueSql("'7'")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("BreathingVolumeExpression"), "utf8");

                    b.Property<ulong>("CanAttack")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<ulong>("CanClimb")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<ulong>("CanDefend")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<ulong>("CanEatCorpses")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<ulong>("CanEatMaterialsOptIn")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<ulong>("CanSwim")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<ulong>("CanUseWeapons")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<int>("ChildAge")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'3'");

                    b.Property<string>("CommunicationStrategyType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'humanoid'")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("CommunicationStrategyType"), "utf8");

                    b.Property<long>("CorpseModelId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("DefaultHandedness")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'3'");

                    b.Property<long>("DefaultHealthStrategyId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("DefaultHeightWeightModelFemaleId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("DefaultHeightWeightModelMaleId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("DefaultHeightWeightModelNeuterId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("DefaultHeightWeightModelNonBinaryId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Description"), "utf8");

                    b.Property<string>("DiceExpression")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("DiceExpression"), "utf8");

                    b.Property<string>("EatCorpseEmoteText")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(500)")
                        .HasDefaultValueSql("'@ eat|eats {0}$1'")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("EatCorpseEmoteText"), "utf8");

                    b.Property<int>("ElderAge")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'55'");

                    b.Property<string>("HandednessOptions")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(100)")
                        .HasDefaultValueSql("'1 3'")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("HandednessOptions"), "utf8");

                    b.Property<string>("HoldBreathLengthExpression")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(500)")
                        .HasDefaultValueSql("'120'")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("HoldBreathLengthExpression"), "utf8");

                    b.Property<double>("HungerRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValue(1.0);

                    b.Property<double>("IlluminationPerceptionMultiplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("IndividualAttributeCap")
                        .HasColumnType("int(11)");

                    b.Property<string>("MaximumDragWeightExpression")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("MaximumDragWeightExpression"), "utf8");

                    b.Property<string>("MaximumLiftWeightExpression")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("MaximumLiftWeightExpression"), "utf8");

                    b.Property<int>("MinimumSleepingPosition")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'4'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<long?>("NaturalArmourMaterialId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("NaturalArmourQuality")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("NaturalArmourTypeId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("NeedsToBreathe")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<long?>("ParentRaceId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("RaceButcheryProfileId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("RaceUsesStamina")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<int>("SizeProne")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'5'");

                    b.Property<int>("SizeSitting")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'6'");

                    b.Property<int>("SizeStanding")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'6'");

                    b.Property<long?>("SweatLiquidId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("SweatRateInLitresPerMinute")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'0.8'");

                    b.Property<double>("TemperatureRangeCeiling")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'40'");

                    b.Property<double>("TemperatureRangeFloor")
                        .HasColumnType("double");

                    b.Property<double>("ThirstRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValue(1.0);

                    b.Property<int>("VenerableAge")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'75'");

                    b.Property<int>("YoungAdultAge")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'16'");

                    b.Property<int>("YouthAge")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'10'");

                    b.HasKey("Id");

                    b.HasIndex("AttributeBonusProgId")
                        .HasDatabaseName("FK_Races_AttributeBonusProg");

                    b.HasIndex("AvailabilityProgId")
                        .HasDatabaseName("FK_Races_AvailabilityProg");

                    b.HasIndex("BaseBodyId")
                        .HasDatabaseName("FK_Races_BodyProtos");

                    b.HasIndex("BloodLiquidId")
                        .HasDatabaseName("FK_Races_Liquids_Blood_idx");

                    b.HasIndex("BloodModelId")
                        .HasDatabaseName("FK_Races_BloodModels_idx");

                    b.HasIndex("CorpseModelId")
                        .HasDatabaseName("FK_Races_CorpseModels_idx");

                    b.HasIndex("DefaultHealthStrategyId")
                        .HasDatabaseName("FK_Races_HealthStrategies_idx");

                    b.HasIndex("DefaultHeightWeightModelFemaleId");

                    b.HasIndex("DefaultHeightWeightModelMaleId");

                    b.HasIndex("DefaultHeightWeightModelNeuterId");

                    b.HasIndex("DefaultHeightWeightModelNonBinaryId");

                    b.HasIndex("NaturalArmourMaterialId")
                        .HasDatabaseName("FK_Races_Materials_idx");

                    b.HasIndex("NaturalArmourTypeId")
                        .HasDatabaseName("FK_Races_ArmourTypes_idx");

                    b.HasIndex("ParentRaceId")
                        .HasDatabaseName("FK_Races_Races");

                    b.HasIndex("RaceButcheryProfileId")
                        .HasDatabaseName("FK_Races_RaceButcheryProfiles_idx");

                    b.HasIndex("SweatLiquidId")
                        .HasDatabaseName("FK_Races_Liqiuds_Sweat_idx");

                    b.ToTable("Races");
                });

            modelBuilder.Entity("MudSharp.Models.RaceButcheryProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CanButcherProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("DifficultySkin")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<long?>("RequiredToolTagId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Verb")
                        .HasColumnType("int(11)");

                    b.Property<long?>("WhyCannotButcherProgId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("CanButcherProgId")
                        .HasDatabaseName("FK_RaceButcheryProfiles_FutureProgs_Can_idx");

                    b.HasIndex("RequiredToolTagId")
                        .HasDatabaseName("FK_RaceButcheryProfiles_Tags_idx");

                    b.HasIndex("WhyCannotButcherProgId")
                        .HasDatabaseName("FK_RaceButcheryProfiles_FutureProgs_Why_idx");

                    b.ToTable("RaceButcheryProfiles");
                });

            modelBuilder.Entity("MudSharp.Models.RaceButcheryProfilesBreakdownChecks", b =>
                {
                    b.Property<long>("RaceButcheryProfileId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Subcageory")
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Subcageory"), "utf8");

                    b.Property<int>("Difficulty")
                        .HasColumnType("int(11)");

                    b.Property<long>("TraitDefinitionId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("RaceButcheryProfileId", "Subcageory")
                        .HasName("PRIMARY");

                    b.HasIndex("TraitDefinitionId")
                        .HasDatabaseName("FK_RaceButcheryProfiles_BreakdownChecks_TraitDefinitions_idx");

                    b.ToTable("RaceButcheryProfiles_BreakdownChecks", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.RaceButcheryProfilesBreakdownEmotes", b =>
                {
                    b.Property<long>("RaceButcheryProfileId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Subcategory")
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Subcategory"), "utf8");

                    b.Property<int>("Order")
                        .HasColumnType("int(11)");

                    b.Property<double>("Delay")
                        .HasColumnType("double");

                    b.Property<string>("Emote")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Emote"), "utf8");

                    b.HasKey("RaceButcheryProfileId", "Subcategory", "Order")
                        .HasName("PRIMARY");

                    b.ToTable("RaceButcheryProfiles_BreakdownEmotes", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.RaceButcheryProfilesButcheryProducts", b =>
                {
                    b.Property<long>("RaceButcheryProfileId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ButcheryProductId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("RaceButcheryProfileId", "ButcheryProductId")
                        .HasName("PRIMARY");

                    b.HasIndex("ButcheryProductId")
                        .HasDatabaseName("FK_RaceButcheryProfiles_ButcheryProducts_ButcheryProducts_idx");

                    b.ToTable("RaceButcheryProfiles_ButcheryProducts", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.RaceButcheryProfilesSkinningEmotes", b =>
                {
                    b.Property<long>("RaceButcheryProfileId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Subcategory")
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Subcategory"), "utf8");

                    b.Property<int>("Order")
                        .HasColumnType("int(11)");

                    b.Property<double>("Delay")
                        .HasColumnType("double");

                    b.Property<string>("Emote")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Emote"), "utf8");

                    b.HasKey("RaceButcheryProfileId", "Subcategory", "Order")
                        .HasName("PRIMARY");

                    b.ToTable("RaceButcheryProfiles_SkinningEmotes", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.RaceEdibleForagableYields", b =>
                {
                    b.Property<long>("RaceId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("YieldType")
                        .HasColumnType("varchar(50)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("YieldType"), "utf8");

                    b.Property<double>("AlcoholPerYield")
                        .HasColumnType("double");

                    b.Property<double>("BiteYield")
                        .HasColumnType("double");

                    b.Property<double>("CaloriesPerYield")
                        .HasColumnType("double");

                    b.Property<string>("EatEmote")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(1000)")
                        .HasDefaultValueSql("'@ eat|eats {0} from the location.'")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("EatEmote"), "utf8");

                    b.Property<double>("HungerPerYield")
                        .HasColumnType("double");

                    b.Property<double>("ThirstPerYield")
                        .HasColumnType("double");

                    b.Property<double>("WaterPerYield")
                        .HasColumnType("double");

                    b.HasKey("RaceId", "YieldType")
                        .HasName("PRIMARY");

                    b.ToTable("RaceEdibleForagableYields");
                });

            modelBuilder.Entity("MudSharp.Models.RacesAdditionalBodyparts", b =>
                {
                    b.Property<string>("Usage")
                        .HasColumnType("varchar(50)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Usage"), "utf8");

                    b.Property<long>("RaceId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("BodypartId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Usage", "RaceId", "BodypartId")
                        .HasName("PRIMARY");

                    b.HasIndex("BodypartId")
                        .HasDatabaseName("FK_Races_AdditionalBodyparts_BodypartProto");

                    b.HasIndex("RaceId")
                        .HasDatabaseName("FK_Races_AdditionalBodyparts_Races");

                    b.ToTable("Races_AdditionalBodyparts", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.RacesAdditionalCharacteristics", b =>
                {
                    b.Property<long>("RaceId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CharacteristicDefinitionId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Usage")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Usage"), "utf8");

                    b.HasKey("RaceId", "CharacteristicDefinitionId")
                        .HasName("PRIMARY");

                    b.HasIndex("CharacteristicDefinitionId")
                        .HasDatabaseName("FK_RAC_CharacteristicDefinitions");

                    b.ToTable("Races_AdditionalCharacteristics", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.RacesAttributes", b =>
                {
                    b.Property<long>("RaceId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("AttributeId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("IsHealthAttribute")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.HasKey("RaceId", "AttributeId")
                        .HasName("PRIMARY");

                    b.HasIndex("AttributeId")
                        .HasDatabaseName("FK_Races_Attributes_TraitDefinitions");

                    b.ToTable("Races_Attributes", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.RacesBreathableGases", b =>
                {
                    b.Property<long>("RaceId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("GasId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("Multiplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("RaceId", "GasId")
                        .HasName("PRIMARY");

                    b.HasIndex("GasId")
                        .HasDatabaseName("FK_Races-BreathableGases_Gases_idx");

                    b.ToTable("Races_BreathableGases", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.RacesBreathableLiquids", b =>
                {
                    b.Property<long>("RaceId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("LiquidId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("Multiplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("RaceId", "LiquidId")
                        .HasName("PRIMARY");

                    b.HasIndex("LiquidId")
                        .HasDatabaseName("FK_Races_BreathableLiquids_Liquids_idx");

                    b.ToTable("Races_BreathableLiquids", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.RacesChargenResources", b =>
                {
                    b.Property<long>("RaceId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ChargenResourceId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Amount")
                        .HasColumnType("int(11)");

                    b.Property<ulong>("RequirementOnly")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.HasKey("RaceId", "ChargenResourceId")
                        .HasName("PRIMARY");

                    b.HasIndex("ChargenResourceId")
                        .HasDatabaseName("FK_Races_ChargenResources_ChargenResources");

                    b.ToTable("Races_ChargenResources", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.RacesCombatActions", b =>
                {
                    b.Property<long>("RaceId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CombatActionId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("RaceId", "CombatActionId")
                        .HasName("PRIMARY");

                    b.HasIndex("CombatActionId");

                    b.ToTable("Races_CombatActions", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.RacesEdibleMaterials", b =>
                {
                    b.Property<long>("RaceId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("MaterialId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("AlcoholPerKilogram")
                        .HasColumnType("double");

                    b.Property<double>("CaloriesPerKilogram")
                        .HasColumnType("double");

                    b.Property<double>("HungerPerKilogram")
                        .HasColumnType("double");

                    b.Property<double>("ThirstPerKilogram")
                        .HasColumnType("double");

                    b.Property<double>("WaterPerKilogram")
                        .HasColumnType("double");

                    b.HasKey("RaceId", "MaterialId")
                        .HasName("PRIMARY");

                    b.HasIndex("MaterialId")
                        .HasDatabaseName("FK_Races_EdibleMaterials_Materials_idx");

                    b.ToTable("Races_EdibleMaterials", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.RacesWeaponAttacks", b =>
                {
                    b.Property<long>("RaceId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("WeaponAttackId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("BodypartId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Quality")
                        .HasColumnType("int(11)");

                    b.HasKey("RaceId", "WeaponAttackId", "BodypartId")
                        .HasName("PRIMARY");

                    b.HasIndex("BodypartId")
                        .HasDatabaseName("FK_Races_WeaponAttacks_BodypartProto_idx");

                    b.HasIndex("WeaponAttackId")
                        .HasDatabaseName("FK_Races_WeaponAttacks_WeaponAttacks_idx");

                    b.ToTable("Races_WeaponAttacks", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.RandomNameProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("Gender")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<long>("NameCultureId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("UseForChargenSuggestionsProgId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("NameCultureId")
                        .HasDatabaseName("FK_RandomNameProfiles_NameCulture");

                    b.HasIndex("UseForChargenSuggestionsProgId");

                    b.ToTable("RandomNameProfiles");
                });

            modelBuilder.Entity("MudSharp.Models.RandomNameProfilesDiceExpressions", b =>
                {
                    b.Property<long>("RandomNameProfileId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("NameUsage")
                        .HasColumnType("int(11)");

                    b.Property<string>("DiceExpression")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("DiceExpression"), "utf8");

                    b.HasKey("RandomNameProfileId", "NameUsage")
                        .HasName("PRIMARY");

                    b.ToTable("RandomNameProfiles_DiceExpressions", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.RandomNameProfilesElements", b =>
                {
                    b.Property<long>("RandomNameProfileId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("NameUsage")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<int>("Weighting")
                        .HasColumnType("int(11)");

                    b.HasKey("RandomNameProfileId", "NameUsage", "Name")
                        .HasName("PRIMARY");

                    b.ToTable("RandomNameProfiles_Elements", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.RangedCover", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("ActionDescriptionString")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ActionDescriptionString"), "utf8mb4");

                    b.Property<int>("CoverExtent")
                        .HasColumnType("int(11)");

                    b.Property<ulong>("CoverStaysWhileMoving")
                        .HasColumnType("bit(1)");

                    b.Property<int>("CoverType")
                        .HasColumnType("int(11)");

                    b.Property<string>("DescriptionString")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("DescriptionString"), "utf8mb4");

                    b.Property<int>("HighestPositionState")
                        .HasColumnType("int(11)");

                    b.Property<int>("MaximumSimultaneousCovers")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8mb4");

                    b.HasKey("Id");

                    b.ToTable("RangedCovers");
                });

            modelBuilder.Entity("MudSharp.Models.RangedWeaponTypes", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AccuracyBonusExpression")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("AccuracyBonusExpression"), "utf8mb4");

                    b.Property<double>("AimBonusLostPerShot")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.Property<ulong>("AlwaysRequiresTwoHandsToWield")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<int>("AmmunitionCapacity")
                        .HasColumnType("int(11)");

                    b.Property<int>("AmmunitionLoadType")
                        .HasColumnType("int(11)");

                    b.Property<int>("BaseAimDifficulty")
                        .HasColumnType("int(11)");

                    b.Property<int>("Classification")
                        .HasColumnType("int(11)");

                    b.Property<double>("CoverBonus")
                        .HasColumnType("double");

                    b.Property<string>("DamageBonusExpression")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("DamageBonusExpression"), "utf8mb4");

                    b.Property<int>("DefaultRangeInRooms")
                        .HasColumnType("int(11)");

                    b.Property<double>("FireDelay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'0.5'");

                    b.Property<long>("FireTraitId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("FireableInMelee")
                        .HasColumnType("bit(1)");

                    b.Property<double>("LoadDelay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'0.5'");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8mb4");

                    b.Property<long>("OperateTraitId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("RangedWeaponType")
                        .HasColumnType("int(11)");

                    b.Property<double>("ReadyDelay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'0.1'");

                    b.Property<ulong>("RequiresFreeHandToReady")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<string>("SpecificAmmunitionGrade")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("SpecificAmmunitionGrade"), "utf8mb4");

                    b.Property<double>("StaminaPerLoadStage")
                        .HasColumnType("double");

                    b.Property<double>("StaminaToFire")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("FireTraitId")
                        .HasDatabaseName("FK_RangedWeaponTypes_TraitDefinitions_Fire_idx");

                    b.HasIndex("OperateTraitId")
                        .HasDatabaseName("FK_RangedWeaponTypes_TraitDefinitions_Operate_idx");

                    b.ToTable("RangedWeaponTypes");
                });

            modelBuilder.Entity("MudSharp.Models.Rank", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ClanId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("FameType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("0");

                    b.Property<long?>("InsigniaGameItemId")
                        .HasColumnType("bigint(20)");

                    b.Property<int?>("InsigniaGameItemRevnum")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<long>("Privileges")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("RankNumber")
                        .HasColumnType("int(11)");

                    b.Property<string>("RankPath")
                        .HasColumnType("varchar(50)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("RankPath"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex("ClanId")
                        .HasDatabaseName("FK_Ranks_Clans");

                    b.HasIndex("InsigniaGameItemId", "InsigniaGameItemRevnum")
                        .HasDatabaseName("FK_Ranks_GameItemProtos");

                    b.ToTable("Ranks");
                });

            modelBuilder.Entity("MudSharp.Models.RanksAbbreviations", b =>
                {
                    b.Property<long>("RankId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Abbreviation")
                        .HasColumnType("varchar(50)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Abbreviation"), "utf8");

                    b.Property<long?>("FutureProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Order")
                        .HasColumnType("int(11)");

                    b.HasKey("RankId", "Abbreviation")
                        .HasName("PRIMARY");

                    b.HasIndex("FutureProgId")
                        .HasDatabaseName("FK_Ranks_Abbreviations_FutureProgs");

                    b.ToTable("Ranks_Abbreviations", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.RanksPaygrade", b =>
                {
                    b.Property<long>("RankId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("PaygradeId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Order")
                        .HasColumnType("int(11)");

                    b.HasKey("RankId", "PaygradeId")
                        .HasName("PRIMARY");

                    b.HasIndex("PaygradeId")
                        .HasDatabaseName("FK_Ranks_Paygrades_Paygrades");

                    b.ToTable("Ranks_Paygrades", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.RanksTitle", b =>
                {
                    b.Property<long>("RankId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Title")
                        .HasColumnType("varchar(50)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Title"), "utf8");

                    b.Property<long?>("FutureProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Order")
                        .HasColumnType("int(11)");

                    b.HasKey("RankId", "Title")
                        .HasName("PRIMARY");

                    b.HasIndex("FutureProgId")
                        .HasDatabaseName("FK_Ranks_Titles_FutureProgs");

                    b.ToTable("Ranks_Titles", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.RegionalClimate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ClimateModelId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("RegionalClimates");
                });

            modelBuilder.Entity("MudSharp.Models.RegionalClimatesSeason", b =>
                {
                    b.Property<long>("RegionalClimateId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("SeasonId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("TemperatureInfo")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("TemperatureInfo"), "utf8");

                    b.HasKey("RegionalClimateId", "SeasonId")
                        .HasName("PRIMARY");

                    b.HasIndex("SeasonId")
                        .HasDatabaseName("FK_RegionalClimates_Seasons_Seasons_idx");

                    b.ToTable("RegionalClimates_Seasons", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.Room", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("X")
                        .HasColumnType("int(11)");

                    b.Property<int>("Y")
                        .HasColumnType("int(11)");

                    b.Property<int>("Z")
                        .HasColumnType("int(11)");

                    b.Property<long>("ZoneId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("ZoneId")
                        .HasDatabaseName("FK_Rooms_Zones");

                    b.ToTable("Rooms");
                });

            modelBuilder.Entity("MudSharp.Models.Script", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("DocumentLengthModifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.Property<double>("InkUseModifier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.Property<long>("KnowledgeId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("KnownScriptDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("KnownScriptDescription"), "utf8");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<string>("UnknownScriptDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("UnknownScriptDescription"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex("KnowledgeId")
                        .HasDatabaseName("FK_Scripts_Knowledges_idx");

                    b.ToTable("Scripts");
                });

            modelBuilder.Entity("MudSharp.Models.ScriptedEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CharacterFilterProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CharacterId")
                        .HasColumnType("bigint(20)");

                    b.Property<DateTime>("EarliestDate")
                        .HasColumnType("datetime");

                    b.Property<ulong>("IsFinished")
                        .HasColumnType("bit(1)");

                    b.Property<ulong>("IsReady")
                        .HasColumnType("bit(1)");

                    b.Property<ulong>("IsTemplate")
                        .HasColumnType("bit(1)");

                    b.Property<string>("Name")
                        .HasColumnType("mediumtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex("CharacterFilterProgId");

                    b.HasIndex("CharacterId");

                    b.ToTable("ScriptedEvents");
                });

            modelBuilder.Entity("MudSharp.Models.ScriptedEventFreeTextQuestion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Answer")
                        .HasColumnType("mediumtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Answer"), "utf8");

                    b.Property<string>("Question")
                        .HasColumnType("mediumtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Question"), "utf8");

                    b.Property<long>("ScriptedEventId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("ScriptedEventId");

                    b.ToTable("ScriptedEventFreeTextQuestions");
                });

            modelBuilder.Entity("MudSharp.Models.ScriptedEventMultipleChoiceQuestion", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ChosenAnswerId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Question")
                        .HasColumnType("mediumtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Question"), "utf8");

                    b.Property<long>("ScriptedEventId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("ChosenAnswerId");

                    b.HasIndex("ScriptedEventId");

                    b.ToTable("ScriptedEventMultipleChoiceQuestions");
                });

            modelBuilder.Entity("MudSharp.Models.ScriptedEventMultipleChoiceQuestionAnswer", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AfterChoiceProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("AnswerFilterProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("DescriptionAfterChoice")
                        .HasColumnType("mediumtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("DescriptionAfterChoice"), "utf8");

                    b.Property<string>("DescriptionBeforeChoice")
                        .HasColumnType("mediumtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("DescriptionBeforeChoice"), "utf8");

                    b.Property<long>("ScriptedEventMultipleChoiceQuestionId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("AfterChoiceProgId");

                    b.HasIndex("AnswerFilterProgId");

                    b.HasIndex("ScriptedEventMultipleChoiceQuestionId");

                    b.ToTable("ScriptedEventMultipleChoiceQuestionAnswers");
                });

            modelBuilder.Entity("MudSharp.Models.ScriptsDesignedLanguage", b =>
                {
                    b.Property<long>("ScriptId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ScriptId", "LanguageId")
                        .HasName("PRIMARY");

                    b.HasIndex("LanguageId")
                        .HasDatabaseName("FK_Scripts_DesignedLanguages_Languages_idx");

                    b.ToTable("Scripts_DesignedLanguages", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.Season", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("CelestialDayOnset")
                        .HasColumnType("int(11)");

                    b.Property<long>("CelestialId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("DisplayName")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("DisplayName"), "utf8");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<string>("SeasonGroup")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("SeasonGroup"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex("CelestialId")
                        .HasDatabaseName("FK_Seasons_Celestials_idx");

                    b.ToTable("Seasons");
                });

            modelBuilder.Entity("MudSharp.Models.SeederChoice", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Answer")
                        .HasColumnType("longtext");

                    b.Property<string>("Choice")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Seeder")
                        .HasColumnType("longtext");

                    b.Property<string>("Version")
                        .HasColumnType("longtext");

                    b.HasKey("Id");

                    b.ToTable("SeederChoices");
                });

            modelBuilder.Entity("MudSharp.Models.Shard", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("MinimumTerrestrialLux")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<long>("SkyDescriptionTemplateId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("SphericalRadiusMetres")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'6371000'");

                    b.HasKey("Id");

                    b.HasIndex("SkyDescriptionTemplateId")
                        .HasDatabaseName("FK_Shards_SkyDescriptionTemplates");

                    b.ToTable("Shards");
                });

            modelBuilder.Entity("MudSharp.Models.ShardsCalendars", b =>
                {
                    b.Property<long>("ShardId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CalendarId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ShardId", "CalendarId")
                        .HasName("PRIMARY");

                    b.ToTable("Shards_Calendars", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.ShardsCelestials", b =>
                {
                    b.Property<long>("ShardId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CelestialId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ShardId", "CelestialId")
                        .HasName("PRIMARY");

                    b.ToTable("Shards_Celestials", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.ShardsClocks", b =>
                {
                    b.Property<long>("ShardId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ClockId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ShardId", "ClockId")
                        .HasName("PRIMARY");

                    b.ToTable("Shards_Clocks", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.ShieldType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("BlockBonus")
                        .HasColumnType("double");

                    b.Property<long>("BlockTraitId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("EffectiveArmourTypeId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8mb4");

                    b.Property<double>("StaminaPerBlock")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("BlockTraitId")
                        .HasDatabaseName("FK_ShieldTypes_TraitDefinitions_idx");

                    b.HasIndex("EffectiveArmourTypeId")
                        .HasDatabaseName("FK_ShieldTypes_ArmourTypes_idx");

                    b.ToTable("ShieldTypes");
                });

            modelBuilder.Entity("MudSharp.Models.Shop", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("BankAccountId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CanShopProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<decimal>("CashBalance")
                        .HasColumnType("decimal(58, 29)");

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("EconomicZoneId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("EmployeeRecords")
                        .IsRequired()
                        .HasColumnType("mediumtext")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("EmployeeRecords"), "utf8");

                    b.Property<ulong>("IsTrading")
                        .HasColumnType("bit(1)");

                    b.Property<long?>("MarketId")
                        .HasColumnType("bigint");

                    b.Property<decimal>("MinimumFloatToBuyItems")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<string>("ShopType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(200)")
                        .HasDefaultValue("Permanent")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ShopType"), "utf8");

                    b.Property<long?>("StockroomCellId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("WhyCannotShopProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("WorkshopCellId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("BankAccountId");

                    b.HasIndex("CanShopProgId")
                        .HasDatabaseName("FK_Shops_FutureProgs_Can_idx");

                    b.HasIndex("CurrencyId")
                        .HasDatabaseName("FK_Shops_Currencies_idx");

                    b.HasIndex("EconomicZoneId")
                        .HasDatabaseName("FK_Shops_EconomicZonesa_idx");

                    b.HasIndex("MarketId");

                    b.HasIndex("StockroomCellId")
                        .HasDatabaseName("FK_Shops_Cells_Stockroom_idx");

                    b.HasIndex("WhyCannotShopProgId")
                        .HasDatabaseName("FK_Shops_FutureProgs_WhyCant_idx");

                    b.HasIndex("WorkshopCellId")
                        .HasDatabaseName("FK_Shops_Cells_Workshop_idx");

                    b.ToTable("Shops");
                });

            modelBuilder.Entity("MudSharp.Models.ShopFinancialPeriodResult", b =>
                {
                    b.Property<long>("EconomicZoneId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ShopId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("FinancialPeriodId")
                        .HasColumnType("bigint(20)");

                    b.Property<decimal>("GrossRevenue")
                        .HasColumnType("decimal(58,29)");

                    b.Property<decimal>("NetRevenue")
                        .HasColumnType("decimal(58,29)");

                    b.Property<decimal>("ProfitsTax")
                        .HasColumnType("decimal(58,29)");

                    b.Property<decimal>("SalesTax")
                        .HasColumnType("decimal(58,29)");

                    b.HasKey("EconomicZoneId", "ShopId", "FinancialPeriodId")
                        .HasName("PRIMARY");

                    b.HasIndex("FinancialPeriodId")
                        .HasDatabaseName("FK_ShopFinancialPeriodResults_FinancialPeriods_idx");

                    b.HasIndex("ShopId")
                        .HasDatabaseName("FK_ShopFinancialPeriodResults_Shops_idx");

                    b.ToTable("ShopFinancialPeriodResults");
                });

            modelBuilder.Entity("MudSharp.Models.ShopTransactionRecord", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("CurrencyId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("MudDateTime")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("MudDateTime"), "utf8");

                    b.Property<decimal>("PretaxValue")
                        .HasColumnType("decimal(58,29)");

                    b.Property<DateTime>("RealDateTime")
                        .HasColumnType("datetime");

                    b.Property<long>("ShopId")
                        .HasColumnType("bigint(20)");

                    b.Property<decimal>("Tax")
                        .HasColumnType("decimal(58,29)");

                    b.Property<long?>("ThirdPartyId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("TransactionType")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("CurrencyId")
                        .HasDatabaseName("FK_ShopTransactionRecords_Currencies_idx");

                    b.HasIndex("ShopId")
                        .HasDatabaseName("FK_ShopTransactionRecords_Shops_idx");

                    b.ToTable("ShopTransactionRecords");
                });

            modelBuilder.Entity("MudSharp.Models.ShopsStoreroomCell", b =>
                {
                    b.Property<long>("ShopId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CellId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ShopId", "CellId")
                        .HasName("PRIMARY");

                    b.HasIndex("CellId")
                        .HasDatabaseName("FK_Shops_StoreroomCells_Cells_idx");

                    b.ToTable("Shops_StoreroomCells", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.ShopsTill", b =>
                {
                    b.Property<long>("ShopId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("GameItemId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ShopId", "GameItemId")
                        .HasName("PRIMARY");

                    b.HasIndex("GameItemId")
                        .HasDatabaseName("FK_ShopTills_GameItems_idx");

                    b.ToTable("ShopsTills");
                });

            modelBuilder.Entity("MudSharp.Models.SkyDescriptionTemplate", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("SkyDescriptionTemplates");
                });

            modelBuilder.Entity("MudSharp.Models.SkyDescriptionTemplatesValue", b =>
                {
                    b.Property<long>("SkyDescriptionTemplateId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("LowerBound")
                        .HasColumnType("double");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Description"), "utf8");

                    b.Property<double>("UpperBound")
                        .HasColumnType("double");

                    b.HasKey("SkyDescriptionTemplateId", "LowerBound")
                        .HasName("PRIMARY");

                    b.ToTable("SkyDescriptionTemplates_Values", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.Social", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<string>("DirectionTargetEcho")
                        .HasColumnType("varchar(1000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("DirectionTargetEcho"), "utf8");

                    b.Property<long?>("FutureProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("MultiTargetEcho")
                        .HasColumnType("varchar(1000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("MultiTargetEcho"), "utf8");

                    b.Property<string>("NoTargetEcho")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("NoTargetEcho"), "utf8");

                    b.Property<string>("OneTargetEcho")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("OneTargetEcho"), "utf8");

                    b.HasKey("Name")
                        .HasName("PRIMARY");

                    b.HasIndex("FutureProgId")
                        .HasDatabaseName("FK_Socials_FutureProgs");

                    b.ToTable("Socials");
                });

            modelBuilder.Entity("MudSharp.Models.StackDecorator", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("varchar(10000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8");

                    b.Property<string>("Description")
                        .HasColumnType("varchar(1000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Description"), "utf8");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Type"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("StackDecorators");
                });

            modelBuilder.Entity("MudSharp.Models.StaticConfiguration", b =>
                {
                    b.Property<string>("SettingName")
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("SettingName"), "utf8");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8");

                    b.HasKey("SettingName")
                        .HasName("PRIMARY");

                    b.ToTable("StaticConfigurations");
                });

            modelBuilder.Entity("MudSharp.Models.StaticString", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(50)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Id"), "utf8");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Text"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("StaticStrings");
                });

            modelBuilder.Entity("MudSharp.Models.SurgicalProcedure", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AbortProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("BaseCheckBonus")
                        .HasColumnType("double");

                    b.Property<int>("Check")
                        .HasColumnType("int(11)");

                    b.Property<long?>("CheckTraitDefinitionId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("CompletionProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Definition")
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8mb4");

                    b.Property<long?>("KnowledgeRequiredId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("MedicalSchool")
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("MedicalSchool"), "utf8mb4");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8mb4");

                    b.Property<int>("Procedure")
                        .HasColumnType("int(11)");

                    b.Property<string>("ProcedureBeginEmote")
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ProcedureBeginEmote"), "utf8mb4");

                    b.Property<string>("ProcedureDescriptionEmote")
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ProcedureDescriptionEmote"), "utf8mb4");

                    b.Property<string>("ProcedureGerund")
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ProcedureGerund"), "utf8mb4");

                    b.Property<string>("ProcedureName")
                        .IsRequired()
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ProcedureName"), "utf8mb4");

                    b.Property<long>("TargetBodyTypeId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("UsabilityProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("WhyCannotUseProgId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("AbortProgId")
                        .HasDatabaseName("FK_SurgicalProcedures_FutureProgs_AbortProg_idx");

                    b.HasIndex("CheckTraitDefinitionId");

                    b.HasIndex("CompletionProgId")
                        .HasDatabaseName("FK_SurgicalProcedures_FutureProgs_CompletionProg_idx");

                    b.HasIndex("KnowledgeRequiredId")
                        .HasDatabaseName("FK_SurgicalProcedures_Knowledges_idx");

                    b.HasIndex("TargetBodyTypeId");

                    b.HasIndex("UsabilityProgId")
                        .HasDatabaseName("FK_SurgicalProcedures_FutureProgs_Usability_idx");

                    b.HasIndex("WhyCannotUseProgId")
                        .HasDatabaseName("FK_SurgicalProcedures_FutureProgs_WhyCannotUseProg_idx");

                    b.ToTable("SurgicalProcedures");
                });

            modelBuilder.Entity("MudSharp.Models.SurgicalProcedurePhase", b =>
                {
                    b.Property<long>("SurgicalProcedureId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("PhaseNumber")
                        .HasColumnType("int(11)");

                    b.Property<double>("BaseLengthInSeconds")
                        .HasColumnType("double");

                    b.Property<string>("InventoryActionPlan")
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("InventoryActionPlan"), "utf8mb4");

                    b.Property<long?>("OnPhaseProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("PhaseEmote")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("PhaseEmote"), "utf8mb4");

                    b.Property<string>("PhaseSpecialEffects")
                        .HasColumnType("varchar(500)")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("PhaseSpecialEffects"), "utf8mb4");

                    b.HasKey("SurgicalProcedureId", "PhaseNumber")
                        .HasName("PRIMARY");

                    b.HasIndex("OnPhaseProgId")
                        .HasDatabaseName("FK_SurgicalProcedurePhases_FutureProgs_OnPhaseProg_idx");

                    b.ToTable("SurgicalProcedurePhases");
                });

            modelBuilder.Entity("MudSharp.Models.Tag", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<long?>("ParentId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("ShouldSeeProgId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("ParentId")
                        .HasDatabaseName("FK_Tags_Parent_idx");

                    b.HasIndex("ShouldSeeProgId")
                        .HasDatabaseName("FK_Tags_Futureprogs_idx");

                    b.ToTable("Tags");
                });

            modelBuilder.Entity("MudSharp.Models.Terrain", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AtmosphereId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("AtmosphereType")
                        .HasColumnType("varchar(45)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("AtmosphereType"), "utf8");

                    b.Property<int>("DefaultCellOutdoorsType")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValue(0);

                    b.Property<ulong>("DefaultTerrain")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<long>("ForagableProfileId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("HideDifficulty")
                        .HasColumnType("int(11)");

                    b.Property<double>("InfectionMultiplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("InfectionType")
                        .HasColumnType("int(11)");

                    b.Property<int>("InfectionVirulence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'5'");

                    b.Property<double>("MovementRate")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<int>("SpotDifficulty")
                        .HasColumnType("int(11)");

                    b.Property<double>("StaminaCost")
                        .HasColumnType("double");

                    b.Property<string>("TerrainANSIColour")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'7'")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("TerrainANSIColour"), "utf8");

                    b.Property<string>("TerrainBehaviourMode")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("TerrainBehaviourMode"), "utf8");

                    b.Property<string>("TerrainEditorColour")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(45)")
                        .HasDefaultValueSql("'#FFFFFFFF'")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("TerrainEditorColour"), "utf8");

                    b.Property<string>("TerrainEditorText")
                        .HasColumnType("varchar(45)");

                    b.Property<long?>("WeatherControllerId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("WeatherControllerId")
                        .HasDatabaseName("FK_Terrains_WeatherControllers_idx");

                    b.ToTable("Terrains");
                });

            modelBuilder.Entity("MudSharp.Models.TerrainsRangedCovers", b =>
                {
                    b.Property<long>("TerrainId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("RangedCoverId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("TerrainId", "RangedCoverId")
                        .HasName("PRIMARY");

                    b.HasIndex("RangedCoverId")
                        .HasDatabaseName("FK_Terrains_RangedCovers_RangedCovers_idx");

                    b.ToTable("Terrains_RangedCovers", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.TimeZoneInfo", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("varchar(100)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Id"), "utf8");

                    b.Property<string>("Display")
                        .IsRequired()
                        .HasColumnType("varchar(1000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Display"), "utf8");

                    b.Property<decimal>("Order")
                        .HasColumnType("decimal(58,29)");

                    b.HasKey("Id");

                    b.ToTable("TimeZoneInfos");
                });

            modelBuilder.Entity("MudSharp.Models.Timezone", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("ClockId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Description"), "utf8");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<int>("OffsetHours")
                        .HasColumnType("int(11)");

                    b.Property<int>("OffsetMinutes")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.HasIndex("ClockId")
                        .HasDatabaseName("FK_Timezones_Clocks");

                    b.ToTable("Timezones");
                });

            modelBuilder.Entity("MudSharp.Models.Trait", b =>
                {
                    b.Property<long>("BodyId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("TraitDefinitionId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("AdditionalValue")
                        .HasColumnType("double");

                    b.Property<double>("Value")
                        .HasColumnType("double");

                    b.HasKey("BodyId", "TraitDefinitionId")
                        .HasName("PRIMARY");

                    b.HasIndex("TraitDefinitionId")
                        .HasDatabaseName("FK_Traits_TraitDefinitions");

                    b.ToTable("Traits");
                });

            modelBuilder.Entity("MudSharp.Models.TraitDecorator", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Contents")
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Contents"), "utf8");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Type"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("TraitDecorators");
                });

            modelBuilder.Entity("MudSharp.Models.TraitDefinition", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Alias")
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Alias"), "utf8");

                    b.Property<long?>("AvailabilityProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("BranchMultiplier")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.Property<string>("ChargenBlurb")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ChargenBlurb"), "utf8");

                    b.Property<long>("DecoratorId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("DerivedType")
                        .HasColumnType("int(11)");

                    b.Property<ulong>("DisplayAsSubAttribute")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<int>("DisplayOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("1");

                    b.Property<long?>("ExpressionId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong?>("Hidden")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<long?>("ImproverId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("LearnDifficulty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'7'");

                    b.Property<long?>("LearnableProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<ulong>("ShowInAttributeCommand")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<ulong>("ShowInScoreCommand")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<int>("TeachDifficulty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'7'");

                    b.Property<long?>("TeachableProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("TraitGroup")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("TraitGroup"), "utf8");

                    b.Property<int>("Type")
                        .HasColumnType("int(11)");

                    b.Property<string>("ValueExpression")
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ValueExpression"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex("AvailabilityProgId")
                        .HasDatabaseName("FK_TraitDefinitions_AvailabilityProg");

                    b.HasIndex("ExpressionId")
                        .HasDatabaseName("FK_TraitDefinitions_TraitExpression");

                    b.HasIndex("LearnableProgId")
                        .HasDatabaseName("FK_TraitDefinitions_LearnableProg_idx");

                    b.HasIndex("TeachableProgId")
                        .HasDatabaseName("FK_TraitDefinitions_TeachableProg_idx");

                    b.ToTable("TraitDefinitions");
                });

            modelBuilder.Entity("MudSharp.Models.TraitDefinitionsChargenResources", b =>
                {
                    b.Property<long>("TraitDefinitionId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ChargenResourceId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("RequirementOnly")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<int>("Amount")
                        .HasColumnType("int(11)");

                    b.HasKey("TraitDefinitionId", "ChargenResourceId", "RequirementOnly")
                        .HasName("PRIMARY");

                    b.HasIndex("ChargenResourceId")
                        .HasDatabaseName("FK_TraitDefinitions_ChargenResources_ChargenResources");

                    b.ToTable("TraitDefinitions_ChargenResources", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.TraitExpression", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Expression")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Expression"), "utf8");

                    b.Property<string>("Name")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(200)")
                        .HasDefaultValueSql("'Unnamed Expression'")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("TraitExpression", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.TraitExpressionParameters", b =>
                {
                    b.Property<string>("Parameter")
                        .HasColumnType("varchar(50)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Parameter"), "utf8");

                    b.Property<long>("TraitExpressionId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("CanBranch")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<ulong>("CanImprove")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<long>("TraitDefinitionId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Parameter", "TraitExpressionId")
                        .HasName("PRIMARY");

                    b.HasIndex("TraitDefinitionId")
                        .HasDatabaseName("FK_TraitExpressionParameters_TraitDefinitions");

                    b.HasIndex("TraitExpressionId")
                        .HasDatabaseName("FK_TraitExpressionParameters_TraitExpression");

                    b.ToTable("TraitExpressionParameters");
                });

            modelBuilder.Entity("MudSharp.Models.UnitOfMeasure", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("Abbreviations")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Abbreviations"), "utf8");

                    b.Property<double>("BaseMultiplier")
                        .HasColumnType("double");

                    b.Property<ulong>("DefaultUnitForSystem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<ulong>("Describer")
                        .HasColumnType("bit(1)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<double>("PostMultiplierBaseOffset")
                        .HasColumnType("double");

                    b.Property<double>("PreMultiplierBaseOffset")
                        .HasColumnType("double");

                    b.Property<string>("PrimaryAbbreviation")
                        .HasColumnType("varchar(45)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("PrimaryAbbreviation"), "utf8");

                    b.Property<ulong>("SpaceBetween")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<string>("System")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("System"), "utf8");

                    b.Property<int>("Type")
                        .HasColumnType("int(11)");

                    b.HasKey("Id");

                    b.ToTable("UnitOfMeasure", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.VariableDefault", b =>
                {
                    b.Property<long>("OwnerType")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Property")
                        .HasColumnType("varchar(50)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Property"), "utf8");

                    b.Property<string>("DefaultValue")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("DefaultValue"), "utf8");

                    b.HasKey("OwnerType", "Property")
                        .HasName("PRIMARY");

                    b.ToTable("VariableDefaults");
                });

            modelBuilder.Entity("MudSharp.Models.VariableDefinition", b =>
                {
                    b.Property<long>("OwnerType")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Property")
                        .HasColumnType("varchar(50)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Property"), "utf8");

                    b.Property<long>("ContainedType")
                        .HasColumnType("bigint(20)");

                    b.HasKey("OwnerType", "Property")
                        .HasName("PRIMARY");

                    b.ToTable("VariableDefinitions");
                });

            modelBuilder.Entity("MudSharp.Models.VariableValue", b =>
                {
                    b.Property<long>("ReferenceType")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ReferenceId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("ReferenceProperty")
                        .HasColumnType("varchar(50)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ReferenceProperty"), "utf8");

                    b.Property<string>("ValueDefinition")
                        .IsRequired()
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ValueDefinition"), "utf8");

                    b.Property<long>("ValueType")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ReferenceType", "ReferenceId", "ReferenceProperty")
                        .HasName("PRIMARY");

                    b.ToTable("VariableValues");
                });

            modelBuilder.Entity("MudSharp.Models.WeaponAttack", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("AdditionalInfo"), "utf8mb4");

                    b.Property<int>("Alignment")
                        .HasColumnType("int(11)");

                    b.Property<double>("BaseAngleOfIncidence")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1.5708'");

                    b.Property<int>("BaseAttackerDifficulty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'5'");

                    b.Property<int>("BaseBlockDifficulty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'5'");

                    b.Property<double>("BaseDelay")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.Property<int>("BaseDodgeDifficulty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'5'");

                    b.Property<int>("BaseParryDifficulty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'5'");

                    b.Property<long?>("BodypartShapeId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("DamageExpressionId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("DamageType")
                        .HasColumnType("int(11)");

                    b.Property<int>("ExertionLevel")
                        .HasColumnType("int(11)");

                    b.Property<long?>("FutureProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("HandednessOptions")
                        .HasColumnType("int(11)");

                    b.Property<long>("Intentions")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("MoveType")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8mb4");

                    b.Property<int>("Orientation")
                        .HasColumnType("int(11)");

                    b.Property<long>("PainExpressionId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("RecoveryDifficultyFailure")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'5'");

                    b.Property<int>("RecoveryDifficultySuccess")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'5'");

                    b.Property<string>("RequiredPositionStateIds")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(250)")
                        .HasDefaultValue("1 16 17 18")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("RequiredPositionStateIds"), "utf8");

                    b.Property<double>("StaminaCost")
                        .HasColumnType("double");

                    b.Property<long>("StunExpressionId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Verb")
                        .HasColumnType("int(11)");

                    b.Property<long?>("WeaponTypeId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("Weighting")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("double")
                        .HasDefaultValueSql("'1'");

                    b.HasKey("Id");

                    b.HasIndex("DamageExpressionId")
                        .HasDatabaseName("FK_WeaponAttacks_TraitExpression_Damage_idx");

                    b.HasIndex("FutureProgId")
                        .HasDatabaseName("FK_WeaponAttacks_FutureProgs_idx");

                    b.HasIndex("PainExpressionId")
                        .HasDatabaseName("FK_WeaponAttacks_TraitExpression_Pain_idx");

                    b.HasIndex("StunExpressionId")
                        .HasDatabaseName("FK_WeaponAttacks_TraitExpression_Stun_idx");

                    b.HasIndex("WeaponTypeId")
                        .HasDatabaseName("FK_WeaponAttacks_WeaponTypes_idx");

                    b.ToTable("WeaponAttacks");
                });

            modelBuilder.Entity("MudSharp.Models.WeaponType", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("AttackTraitId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Classification")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8mb4_unicode_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8mb4");

                    b.Property<double>("ParryBonus")
                        .HasColumnType("double");

                    b.Property<long?>("ParryTraitId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Reach")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(11)")
                        .HasDefaultValueSql("'1'");

                    b.Property<double>("StaminaPerParry")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("AttackTraitId")
                        .HasDatabaseName("FK_WeaponTypes_TraitDefinitions_Attack_idx");

                    b.HasIndex("ParryTraitId")
                        .HasDatabaseName("FK_WeaponTypes_TraitDefinitions_Parry_idx");

                    b.ToTable("WeaponTypes");
                });

            modelBuilder.Entity("MudSharp.Models.WearProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BodyPrototypeId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Description")
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Description"), "utf8");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<ulong>("RequireContainerIsEmpty")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<string>("Type")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(50)")
                        .HasDefaultValueSql("'Direct'")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Type"), "utf8");

                    b.Property<string>("WearAction1st")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("'put'")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("WearAction1st"), "utf8");

                    b.Property<string>("WearAction3rd")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("'puts'")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("WearAction3rd"), "utf8");

                    b.Property<string>("WearAffix")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("'on'")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("WearAffix"), "utf8");

                    b.Property<string>("WearStringInventory")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("varchar(255)")
                        .HasDefaultValueSql("'worn on'")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("WearStringInventory"), "utf8");

                    b.Property<string>("WearlocProfiles")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("WearlocProfiles"), "utf8");

                    b.HasKey("Id");

                    b.ToTable("WearProfiles");
                });

            modelBuilder.Entity("MudSharp.Models.WearableSize", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BodyPrototypeId")
                        .HasColumnType("bigint(20)");

                    b.Property<double?>("Height")
                        .HasColumnType("double");

                    b.Property<ulong>("OneSizeFitsAll")
                        .HasColumnType("bit(1)");

                    b.Property<double?>("TraitValue")
                        .HasColumnType("double");

                    b.Property<double?>("Weight")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.ToTable("WearableSizes");
                });

            modelBuilder.Entity("MudSharp.Models.WearableSizeParameterRule", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("BodyProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("HeightLinearRatios")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("HeightLinearRatios"), "utf8");

                    b.Property<ulong>("IgnoreTrait")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'1'");

                    b.Property<double>("MaxHeightFactor")
                        .HasColumnType("double");

                    b.Property<double?>("MaxTraitFactor")
                        .HasColumnType("double");

                    b.Property<double?>("MaxWeightFactor")
                        .HasColumnType("double");

                    b.Property<double>("MinHeightFactor")
                        .HasColumnType("double");

                    b.Property<double?>("MinTraitFactor")
                        .HasColumnType("double");

                    b.Property<double>("MinWeightFactor")
                        .HasColumnType("double");

                    b.Property<long?>("TraitId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("TraitVolumeRatios")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("TraitVolumeRatios"), "utf8");

                    b.Property<string>("WeightVolumeRatios")
                        .HasColumnType("varchar(4000)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("WeightVolumeRatios"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex("TraitId")
                        .HasDatabaseName("FK_WearableSizeParameterRule_TraitDefinitions");

                    b.ToTable("WearableSizeParameterRule", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.WeatherController", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("CelestialId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("ConsecutiveUnchangedPeriods")
                        .HasColumnType("int(11)");

                    b.Property<long>("CurrentSeasonId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("CurrentWeatherEventId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("Elevation")
                        .HasColumnType("double");

                    b.Property<long>("FeedClockId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("FeedClockTimeZoneId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("HighestRecentPrecipitationLevel")
                        .HasColumnType("int(11)");

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<double>("Longitude")
                        .HasColumnType("double");

                    b.Property<int>("MinutesCounter")
                        .HasColumnType("int(11)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(500)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<int>("PeriodsSinceHighestPrecipitation")
                        .HasColumnType("int(11)");

                    b.Property<double>("Radius")
                        .HasColumnType("double");

                    b.Property<long>("RegionalClimateId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("CelestialId")
                        .HasDatabaseName("FK_WeatherControllers_Celestials_idx");

                    b.HasIndex("CurrentSeasonId")
                        .HasDatabaseName("FK_WeatherControllers_Seasons_idx");

                    b.HasIndex("CurrentWeatherEventId")
                        .HasDatabaseName("FK_WeatherControllers_WeatherEvents_idx");

                    b.HasIndex("FeedClockId")
                        .HasDatabaseName("FK_WeatherControllers_Clocks_idx");

                    b.HasIndex("FeedClockTimeZoneId")
                        .HasDatabaseName("FK_WeatherControllers_TimeZones_idx");

                    b.HasIndex("RegionalClimateId")
                        .HasDatabaseName("FK_WeatherControllers_RegionalClimates_idx");

                    b.ToTable("WeatherControllers");
                });

            modelBuilder.Entity("MudSharp.Models.WeatherEvent", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<string>("AdditionalInfo")
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("AdditionalInfo"), "utf8");

                    b.Property<long?>("CountsAsId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("LightLevelMultiplier")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(200)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<ulong>("ObscuresViewOfSky")
                        .HasColumnType("bit(1)");

                    b.Property<ulong>("PermittedAtAfternoon")
                        .HasColumnType("bit(1)");

                    b.Property<ulong>("PermittedAtDawn")
                        .HasColumnType("bit(1)");

                    b.Property<ulong>("PermittedAtDusk")
                        .HasColumnType("bit(1)");

                    b.Property<ulong>("PermittedAtMorning")
                        .HasColumnType("bit(1)");

                    b.Property<ulong>("PermittedAtNight")
                        .HasColumnType("bit(1)");

                    b.Property<int>("Precipitation")
                        .HasColumnType("int(11)");

                    b.Property<double>("PrecipitationTemperatureEffect")
                        .HasColumnType("double");

                    b.Property<double>("TemperatureEffect")
                        .HasColumnType("double");

                    b.Property<string>("WeatherDescription")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("WeatherDescription"), "utf8");

                    b.Property<string>("WeatherEventType")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("WeatherEventType"), "utf8");

                    b.Property<string>("WeatherRoomAddendum")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("WeatherRoomAddendum"), "utf8");

                    b.Property<int>("Wind")
                        .HasColumnType("int(11)");

                    b.Property<double>("WindTemperatureEffect")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("CountsAsId")
                        .HasDatabaseName("FK_WeatherEvents_WeatherEvents_idx");

                    b.ToTable("WeatherEvents");
                });

            modelBuilder.Entity("MudSharp.Models.WeeklyStatistic", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<int>("ActiveAccounts")
                        .HasColumnType("int(11)");

                    b.Property<int>("ApplicationsApproved")
                        .HasColumnType("int(11)");

                    b.Property<int>("ApplicationsSubmitted")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("End")
                        .HasColumnType("datetime");

                    b.Property<int>("NewAccounts")
                        .HasColumnType("int(11)");

                    b.Property<int>("NonPlayerDeaths")
                        .HasColumnType("int(11)");

                    b.Property<int>("PlayerDeaths")
                        .HasColumnType("int(11)");

                    b.Property<DateTime>("Start")
                        .HasColumnType("datetime");

                    b.Property<int>("TotalAccounts")
                        .HasColumnType("int(11)");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.ToTable("WeeklyStatistics", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.WitnessProfile", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("BaseReportingChanceAfternoon")
                        .HasColumnType("double");

                    b.Property<double>("BaseReportingChanceDawn")
                        .HasColumnType("double");

                    b.Property<double>("BaseReportingChanceDusk")
                        .HasColumnType("double");

                    b.Property<double>("BaseReportingChanceMorning")
                        .HasColumnType("double");

                    b.Property<double>("BaseReportingChanceNight")
                        .HasColumnType("double");

                    b.Property<long>("IdentityKnownProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("MinimumSkillToDetermineBiases")
                        .HasColumnType("double");

                    b.Property<double>("MinimumSkillToDetermineTimeOfDay")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(250)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<long>("ReportingMultiplierProgId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("ReportingReliability")
                        .HasColumnType("double");

                    b.HasKey("Id");

                    b.HasIndex("IdentityKnownProgId")
                        .HasDatabaseName("FK_WitnessProfiles_IdentityProg_idx");

                    b.HasIndex("ReportingMultiplierProgId")
                        .HasDatabaseName("FK_WitnessProfiles_MultiplierProg_idx");

                    b.ToTable("WitnessProfiles");
                });

            modelBuilder.Entity("MudSharp.Models.WitnessProfilesCooperatingAuthorities", b =>
                {
                    b.Property<long>("WitnessProfileId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("LegalAuthorityId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("WitnessProfileId", "LegalAuthorityId")
                        .HasName("PRIMARY");

                    b.HasIndex("LegalAuthorityId")
                        .HasDatabaseName("FK_WitnessProfiles_CooperatingAuthorities_LegalAuthorities_idx");

                    b.ToTable("WitnessProfiles_CooperatingAuthorities", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.WitnessProfilesIgnoredCriminalClasses", b =>
                {
                    b.Property<long>("WitnessProfileId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("LegalClassId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("WitnessProfileId", "LegalClassId")
                        .HasName("PRIMARY");

                    b.HasIndex("LegalClassId")
                        .HasDatabaseName("FK_WitnessProfiles_IgnoredCriminalClasses_LegalClasses_idx");

                    b.ToTable("WitnessProfiles_IgnoredCriminalClasses", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.WitnessProfilesIgnoredVictimClasses", b =>
                {
                    b.Property<long>("WitnessProfileId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("LegalClassId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("WitnessProfileId", "LegalClassId")
                        .HasName("PRIMARY");

                    b.HasIndex("LegalClassId")
                        .HasDatabaseName("FK_WitnessProfiles_IgnoredVictimClasses_LegalClasses_idx");

                    b.ToTable("WitnessProfiles_IgnoredVictimClasses", (string)null);
                });

            modelBuilder.Entity("MudSharp.Models.Wound", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long?>("ActorOriginId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("BodyId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("BodypartProtoId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("CurrentDamage")
                        .HasColumnType("double");

                    b.Property<double>("CurrentPain")
                        .HasColumnType("double");

                    b.Property<double>("CurrentShock")
                        .HasColumnType("double");

                    b.Property<double>("CurrentStun")
                        .HasColumnType("double");

                    b.Property<int>("DamageType")
                        .HasColumnType("int(11)");

                    b.Property<string>("ExtraInformation")
                        .HasColumnType("text")
                        .UseCollation("utf8mb4_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("ExtraInformation"), "utf8mb4");

                    b.Property<long?>("GameItemId")
                        .HasColumnType("bigint(20)");

                    b.Property<ulong>("Internal")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit(1)")
                        .HasDefaultValueSql("b'0'");

                    b.Property<long?>("LodgedItemId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("OriginalDamage")
                        .HasColumnType("double");

                    b.Property<long?>("ToolOriginId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("WoundType")
                        .IsRequired()
                        .HasColumnType("varchar(50)")
                        .UseCollation("utf8mb4_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("WoundType"), "utf8mb4");

                    b.HasKey("Id");

                    b.HasIndex("ActorOriginId")
                        .HasDatabaseName("FK_Wounds_Characters_idx");

                    b.HasIndex("BodyId")
                        .HasDatabaseName("FK_Wounds_Bodies_idx");

                    b.HasIndex("GameItemId")
                        .HasDatabaseName("FK_Wounds_GameItemOwner_idx");

                    b.HasIndex("LodgedItemId")
                        .HasDatabaseName("FK_Wounds_GameItems_idx");

                    b.HasIndex("ToolOriginId")
                        .HasDatabaseName("FK_Wounds_GameItems_Tool_idx");

                    b.ToTable("Wounds");
                });

            modelBuilder.Entity("MudSharp.Models.Writing", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<long>("AuthorId")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("Definition")
                        .IsRequired()
                        .HasColumnType("text")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Definition"), "utf8");

                    b.Property<double>("ForgerySkill")
                        .HasColumnType("double");

                    b.Property<double>("HandwritingSkill")
                        .HasColumnType("double");

                    b.Property<int>("ImplementType")
                        .HasColumnType("int(11)");

                    b.Property<long>("LanguageId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("LanguageSkill")
                        .HasColumnType("double");

                    b.Property<double>("LiteracySkill")
                        .HasColumnType("double");

                    b.Property<long>("ScriptId")
                        .HasColumnType("bigint(20)");

                    b.Property<int>("Style")
                        .HasColumnType("int(11)");

                    b.Property<long?>("TrueAuthorId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("WritingColour")
                        .HasColumnType("bigint(20)");

                    b.Property<string>("WritingType")
                        .IsRequired()
                        .HasColumnType("varchar(45)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("WritingType"), "utf8");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId")
                        .HasDatabaseName("FK_Writings_Characters_Author_idx");

                    b.HasIndex("LanguageId")
                        .HasDatabaseName("FK_Writings_Languages_idx");

                    b.HasIndex("ScriptId")
                        .HasDatabaseName("FK_Writings_Scripts_idx");

                    b.HasIndex("TrueAuthorId")
                        .HasDatabaseName("FK_Writings_Characters_TrueAuthor_idx");

                    b.ToTable("Writings");
                });

            modelBuilder.Entity("MudSharp.Models.Zone", b =>
                {
                    b.Property<long>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bigint(20)");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<long>("Id"));

                    b.Property<double>("AmbientLightPollution")
                        .HasColumnType("double");

                    b.Property<long?>("DefaultCellId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("Elevation")
                        .HasColumnType("double");

                    b.Property<long?>("ForagableProfileId")
                        .HasColumnType("bigint(20)");

                    b.Property<double>("Latitude")
                        .HasColumnType("double");

                    b.Property<double>("Longitude")
                        .HasColumnType("double");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .UseCollation("utf8_general_ci");

                    MySqlPropertyBuilderExtensions.HasCharSet(b.Property<string>("Name"), "utf8");

                    b.Property<long>("ShardId")
                        .HasColumnType("bigint(20)");

                    b.Property<long?>("WeatherControllerId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("Id");

                    b.HasIndex("DefaultCellId")
                        .HasDatabaseName("FK_Zones_Cells");

                    b.HasIndex("ShardId")
                        .HasDatabaseName("FK_Zones_Shards");

                    b.HasIndex("WeatherControllerId")
                        .HasDatabaseName("FK_Zones_WeatherControllers_idx");

                    b.ToTable("Zones");
                });

            modelBuilder.Entity("MudSharp.Models.ZonesTimezones", b =>
                {
                    b.Property<long>("ZoneId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("ClockId")
                        .HasColumnType("bigint(20)");

                    b.Property<long>("TimezoneId")
                        .HasColumnType("bigint(20)");

                    b.HasKey("ZoneId", "ClockId", "TimezoneId")
                        .HasName("PRIMARY");

                    b.ToTable("Zones_Timezones", (string)null);
                });

            modelBuilder.Entity("MarketMarketCategory", b =>
                {
                    b.HasOne("MudSharp.Models.MarketCategory", null)
                        .WithMany()
                        .HasForeignKey("MarketCategoriesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Market", null)
                        .WithMany()
                        .HasForeignKey("MarketsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("MudSharp.Models.Accent", b =>
                {
                    b.HasOne("MudSharp.Models.Language", "Language")
                        .WithMany("Accents")
                        .HasForeignKey("LanguageId")
                        .IsRequired()
                        .HasConstraintName("FK_Accents_Languages");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("MudSharp.Models.Account", b =>
                {
                    b.HasOne("MudSharp.Models.AuthorityGroup", "AuthorityGroup")
                        .WithMany("Accounts")
                        .HasForeignKey("AuthorityGroupId")
                        .HasConstraintName("FK_Accounts_AuthorityGroups");

                    b.Navigation("AuthorityGroup");
                });

            modelBuilder.Entity("MudSharp.Models.AccountNote", b =>
                {
                    b.HasOne("MudSharp.Models.Account", "Account")
                        .WithMany("AccountNotesAccount")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AccountNotes_Accounts");

                    b.HasOne("MudSharp.Models.Account", "Author")
                        .WithMany("AccountNotesAuthor")
                        .HasForeignKey("AuthorId")
                        .HasConstraintName("FK_AccountNotes_Author");

                    b.HasOne("MudSharp.Models.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .HasConstraintName("FK_AccountNotes_Characters");

                    b.Navigation("Account");

                    b.Navigation("Author");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("MudSharp.Models.AccountsChargenResources", b =>
                {
                    b.HasOne("MudSharp.Models.Account", "Account")
                        .WithMany("AccountsChargenResources")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Accounts_ChargenResources_Accounts");

                    b.HasOne("MudSharp.Models.ChargenResource", "ChargenResource")
                        .WithMany("AccountsChargenResources")
                        .HasForeignKey("ChargenResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Accounts_ChargenResources_ChargenResources");

                    b.Navigation("Account");

                    b.Navigation("ChargenResource");
                });

            modelBuilder.Entity("MudSharp.Models.ActiveJob", b =>
                {
                    b.HasOne("MudSharp.Models.ActiveProject", "ActiveProject")
                        .WithMany()
                        .HasForeignKey("ActiveProjectId")
                        .HasConstraintName("FK_ActiveJobs_ActiveProjects");

                    b.HasOne("MudSharp.Models.Character", "Character")
                        .WithMany("ActiveJobs")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ActiveJobs_Characters");

                    b.HasOne("MudSharp.Models.JobListing", "JobListing")
                        .WithMany("ActiveJobs")
                        .HasForeignKey("JobListingId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ActiveJobs_JobListings");

                    b.Navigation("ActiveProject");

                    b.Navigation("Character");

                    b.Navigation("JobListing");
                });

            modelBuilder.Entity("MudSharp.Models.ActiveProject", b =>
                {
                    b.HasOne("MudSharp.Models.Cell", "Cell")
                        .WithMany("ActiveProjects")
                        .HasForeignKey("CellId")
                        .HasConstraintName("FK_ActiveProjects_Cells");

                    b.HasOne("MudSharp.Models.Character", "Character")
                        .WithMany("ActiveProjects")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_ActiveProjects_Characters");

                    b.HasOne("MudSharp.Models.ProjectPhase", "CurrentPhase")
                        .WithMany("ActiveProjects")
                        .HasForeignKey("CurrentPhaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ActiveProjects_ProjectPhases");

                    b.HasOne("MudSharp.Models.Project", "Project")
                        .WithMany("ActiveProjects")
                        .HasForeignKey("ProjectId", "ProjectRevisionNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ActiveProjects_Projects");

                    b.Navigation("Cell");

                    b.Navigation("Character");

                    b.Navigation("CurrentPhase");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("MudSharp.Models.ActiveProjectLabour", b =>
                {
                    b.HasOne("MudSharp.Models.ActiveProject", "ActiveProject")
                        .WithMany("ActiveProjectLabours")
                        .HasForeignKey("ActiveProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ActiveProjectLabours_ActiveProjects");

                    b.HasOne("MudSharp.Models.ProjectLabourRequirement", "ProjectLabourRequirements")
                        .WithMany("ActiveProjectLabours")
                        .HasForeignKey("ProjectLabourRequirementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ActiveProjectLabours_ProjectLabourRequirements");

                    b.Navigation("ActiveProject");

                    b.Navigation("ProjectLabourRequirements");
                });

            modelBuilder.Entity("MudSharp.Models.ActiveProjectMaterial", b =>
                {
                    b.HasOne("MudSharp.Models.ActiveProject", "ActiveProject")
                        .WithMany("ActiveProjectMaterials")
                        .HasForeignKey("ActiveProjectId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ActiveProjectMaterials_ActiveProjects");

                    b.HasOne("MudSharp.Models.ProjectMaterialRequirement", "ProjectMaterialRequirements")
                        .WithMany("ActiveProjectMaterials")
                        .HasForeignKey("ProjectMaterialRequirementsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ActiveProjectMaterials_ProjectMaterialRequirements");

                    b.Navigation("ActiveProject");

                    b.Navigation("ProjectMaterialRequirements");
                });

            modelBuilder.Entity("MudSharp.Models.Ally", b =>
                {
                    b.HasOne("MudSharp.Models.Character", "AllyCharacter")
                        .WithMany("AlliesAlly")
                        .HasForeignKey("AllyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Allies_Characters_Target");

                    b.HasOne("MudSharp.Models.Character", "OwnerCharacter")
                        .WithMany("AlliesCharacter")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Allies_Characters_Owner");

                    b.Navigation("AllyCharacter");

                    b.Navigation("OwnerCharacter");
                });

            modelBuilder.Entity("MudSharp.Models.Appointment", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "CanNominateProg")
                        .WithMany()
                        .HasForeignKey("CanNominateProgId")
                        .HasConstraintName("FK_Appointments_CanNominateProg");

                    b.HasOne("MudSharp.Models.Clan", "Clan")
                        .WithMany("Appointments")
                        .HasForeignKey("ClanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Appointments_Clans");

                    b.HasOne("MudSharp.Models.Rank", "MinimumRank")
                        .WithMany("AppointmentsMinimumRank")
                        .HasForeignKey("MinimumRankId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Appointments_Ranks");

                    b.HasOne("MudSharp.Models.Rank", "MinimumRankToAppoint")
                        .WithMany("AppointmentsMinimumRankToAppoint")
                        .HasForeignKey("MinimumRankToAppointId")
                        .HasConstraintName("FK_Appointments_Ranks_2");

                    b.HasOne("MudSharp.Models.FutureProg", "NumberOfVotesProg")
                        .WithMany()
                        .HasForeignKey("NumberOfVotesProgId")
                        .HasConstraintName("FK_Appointments_NumberOfVotesProg");

                    b.HasOne("MudSharp.Models.Appointment", "ParentAppointment")
                        .WithMany("InverseParentAppointment")
                        .HasForeignKey("ParentAppointmentId")
                        .HasConstraintName("FK_Appointments_ParentAppointment");

                    b.HasOne("MudSharp.Models.Paygrade", "Paygrade")
                        .WithMany("Appointments")
                        .HasForeignKey("PaygradeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Appointments_Paygrades");

                    b.HasOne("MudSharp.Models.FutureProg", "WhyCantNominateProg")
                        .WithMany()
                        .HasForeignKey("WhyCantNominateProgId")
                        .HasConstraintName("FK_Appointments_WhyCantNominateProg");

                    b.HasOne("MudSharp.Models.GameItemProto", "InsigniaGameItem")
                        .WithMany("Appointments")
                        .HasForeignKey("InsigniaGameItemId", "InsigniaGameItemRevnum")
                        .HasConstraintName("FK_Appointments_GameItemProtos");

                    b.Navigation("CanNominateProg");

                    b.Navigation("Clan");

                    b.Navigation("InsigniaGameItem");

                    b.Navigation("MinimumRank");

                    b.Navigation("MinimumRankToAppoint");

                    b.Navigation("NumberOfVotesProg");

                    b.Navigation("ParentAppointment");

                    b.Navigation("Paygrade");

                    b.Navigation("WhyCantNominateProg");
                });

            modelBuilder.Entity("MudSharp.Models.AppointmentsAbbreviations", b =>
                {
                    b.HasOne("MudSharp.Models.Appointment", "Appointment")
                        .WithMany("AppointmentsAbbreviations")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Appointments_Abbreviations_Appointments");

                    b.HasOne("MudSharp.Models.FutureProg", "FutureProg")
                        .WithMany("AppointmentsAbbreviations")
                        .HasForeignKey("FutureProgId")
                        .HasConstraintName("FK_Appointments_Abbreviations_FutureProgs");

                    b.Navigation("Appointment");

                    b.Navigation("FutureProg");
                });

            modelBuilder.Entity("MudSharp.Models.AppointmentsTitles", b =>
                {
                    b.HasOne("MudSharp.Models.Appointment", "Appointment")
                        .WithMany("AppointmentsTitles")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Appointments_Titles_Appointments");

                    b.HasOne("MudSharp.Models.FutureProg", "FutureProg")
                        .WithMany("AppointmentsTitles")
                        .HasForeignKey("FutureProgId")
                        .HasConstraintName("FK_Appointments_Titles_FutureProgs");

                    b.Navigation("Appointment");

                    b.Navigation("FutureProg");
                });

            modelBuilder.Entity("MudSharp.Models.Areas", b =>
                {
                    b.HasOne("MudSharp.Models.WeatherController", "WeatherController")
                        .WithMany("Areas")
                        .HasForeignKey("WeatherControllerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Areas_WeatherControllers");

                    b.Navigation("WeatherController");
                });

            modelBuilder.Entity("MudSharp.Models.AreasRooms", b =>
                {
                    b.HasOne("MudSharp.Models.Areas", "Area")
                        .WithMany("AreasRooms")
                        .HasForeignKey("AreaId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Areas_Rooms_Areas");

                    b.HasOne("MudSharp.Models.Room", "Room")
                        .WithMany("AreasRooms")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Areas_Rooms_Rooms");

                    b.Navigation("Area");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("MudSharp.Models.AuctionHouse", b =>
                {
                    b.HasOne("MudSharp.Models.Cell", "AuctionHouseCell")
                        .WithMany()
                        .HasForeignKey("AuctionHouseCellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AuctionHouses_Cells");

                    b.HasOne("MudSharp.Models.EconomicZone", "EconomicZone")
                        .WithMany()
                        .HasForeignKey("EconomicZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AuctionHouses_EconomicZones");

                    b.HasOne("MudSharp.Models.BankAccount", "ProfitsBankAccount")
                        .WithMany()
                        .HasForeignKey("ProfitsBankAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_AuctionHouses_BankAccounts");

                    b.Navigation("AuctionHouseCell");

                    b.Navigation("EconomicZone");

                    b.Navigation("ProfitsBankAccount");
                });

            modelBuilder.Entity("MudSharp.Models.Ban", b =>
                {
                    b.HasOne("MudSharp.Models.Account", "BannerAccount")
                        .WithMany("Bans")
                        .HasForeignKey("BannerAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Bans_Accounts");

                    b.Navigation("BannerAccount");
                });

            modelBuilder.Entity("MudSharp.Models.Bank", b =>
                {
                    b.HasOne("MudSharp.Models.EconomicZone", "EconomicZone")
                        .WithMany()
                        .HasForeignKey("EconomicZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Banks_EconomicZones");

                    b.HasOne("MudSharp.Models.Currency", "PrimaryCurrency")
                        .WithMany()
                        .HasForeignKey("PrimaryCurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Banks_Currencies");

                    b.Navigation("EconomicZone");

                    b.Navigation("PrimaryCurrency");
                });

            modelBuilder.Entity("MudSharp.Models.BankAccount", b =>
                {
                    b.HasOne("MudSharp.Models.Character", "AccountOwnerCharacter")
                        .WithMany()
                        .HasForeignKey("AccountOwnerCharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_BankAccounts_Characters");

                    b.HasOne("MudSharp.Models.Clan", "AccountOwnerClan")
                        .WithMany()
                        .HasForeignKey("AccountOwnerClanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_BankAccounts_Clans");

                    b.HasOne("MudSharp.Models.Shop", "AccountOwnerShop")
                        .WithMany()
                        .HasForeignKey("AccountOwnerShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_BankAccounts_Shops");

                    b.HasOne("MudSharp.Models.BankAccountType", "BankAccountType")
                        .WithMany()
                        .HasForeignKey("BankAccountTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BankAccounts_BankAccountTypes");

                    b.HasOne("MudSharp.Models.Bank", "Bank")
                        .WithMany("BankAccounts")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BankAccounts_Banks");

                    b.HasOne("MudSharp.Models.BankAccount", "NominatedBenefactorAccount")
                        .WithMany()
                        .HasForeignKey("NominatedBenefactorAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_BankAccounts_BankAccounts");

                    b.Navigation("AccountOwnerCharacter");

                    b.Navigation("AccountOwnerClan");

                    b.Navigation("AccountOwnerShop");

                    b.Navigation("Bank");

                    b.Navigation("BankAccountType");

                    b.Navigation("NominatedBenefactorAccount");
                });

            modelBuilder.Entity("MudSharp.Models.BankAccountTransaction", b =>
                {
                    b.HasOne("MudSharp.Models.BankAccount", "BankAccount")
                        .WithMany("BankAccountTransactions")
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BankAccountTransactions_BankAccounts");

                    b.Navigation("BankAccount");
                });

            modelBuilder.Entity("MudSharp.Models.BankAccountType", b =>
                {
                    b.HasOne("MudSharp.Models.Bank", "Bank")
                        .WithMany("BankAccountTypes")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BankAccountTypes_Banks");

                    b.HasOne("MudSharp.Models.FutureProg", "CanCloseAccountProg")
                        .WithMany()
                        .HasForeignKey("CanCloseAccountProgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_BankAccountTypes_CanCloseProg");

                    b.HasOne("MudSharp.Models.FutureProg", "CanOpenAccountProgCharacter")
                        .WithMany()
                        .HasForeignKey("CanOpenAccountProgCharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_BankAccountTypes_CharacterProgs");

                    b.HasOne("MudSharp.Models.FutureProg", "CanOpenAccountProgClan")
                        .WithMany()
                        .HasForeignKey("CanOpenAccountProgClanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_BankAccountTypes_ClanProgs");

                    b.HasOne("MudSharp.Models.FutureProg", "CanOpenAccountProgShop")
                        .WithMany()
                        .HasForeignKey("CanOpenAccountProgShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_BankAccountTypes_ShopProgs");

                    b.Navigation("Bank");

                    b.Navigation("CanCloseAccountProg");

                    b.Navigation("CanOpenAccountProgCharacter");

                    b.Navigation("CanOpenAccountProgClan");

                    b.Navigation("CanOpenAccountProgShop");
                });

            modelBuilder.Entity("MudSharp.Models.BankBranch", b =>
                {
                    b.HasOne("MudSharp.Models.Bank", "Bank")
                        .WithMany("BankBranches")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BankBranches_Banks");

                    b.HasOne("MudSharp.Models.Cell", "Cell")
                        .WithMany()
                        .HasForeignKey("CellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BankBranches_Cells");

                    b.Navigation("Bank");

                    b.Navigation("Cell");
                });

            modelBuilder.Entity("MudSharp.Models.BankCurrencyReserve", b =>
                {
                    b.HasOne("MudSharp.Models.Bank", "Bank")
                        .WithMany("BankCurrencyReserves")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BankCurrencyReserves_Banks");

                    b.HasOne("MudSharp.Models.Currency", "Currency")
                        .WithMany()
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BankCurrencyReserves_Currencies");

                    b.Navigation("Bank");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("MudSharp.Models.BankExchangeRate", b =>
                {
                    b.HasOne("MudSharp.Models.Bank", "Bank")
                        .WithMany("BankExchangeRates")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BankExchangeRates_Banks");

                    b.HasOne("MudSharp.Models.Currency", "FromCurrency")
                        .WithMany()
                        .HasForeignKey("FromCurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BankExchangeRates_Currencies_From");

                    b.HasOne("MudSharp.Models.Currency", "ToCurrency")
                        .WithMany()
                        .HasForeignKey("ToCurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BankExchangeRates_Currencies_To");

                    b.Navigation("Bank");

                    b.Navigation("FromCurrency");

                    b.Navigation("ToCurrency");
                });

            modelBuilder.Entity("MudSharp.Models.BankManager", b =>
                {
                    b.HasOne("MudSharp.Models.Bank", "Bank")
                        .WithMany("BankManagers")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BankManagers_Banks");

                    b.HasOne("MudSharp.Models.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BankManagers_Characters");

                    b.Navigation("Bank");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("MudSharp.Models.BankManagerAuditLog", b =>
                {
                    b.HasOne("MudSharp.Models.Bank", "Bank")
                        .WithMany("BankManagerAuditLogs")
                        .HasForeignKey("BankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BankManagerAuditLogs_Banks");

                    b.HasOne("MudSharp.Models.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BankManagerAuditLogs_Characters");

                    b.Navigation("Bank");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("MudSharp.Models.BloodModelsBloodtypes", b =>
                {
                    b.HasOne("MudSharp.Models.BloodModel", "BloodModel")
                        .WithMany("BloodModelsBloodtypes")
                        .HasForeignKey("BloodModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BloodModels_Bloodtypes_BloodModels");

                    b.HasOne("MudSharp.Models.Bloodtype", "Bloodtype")
                        .WithMany("BloodModelsBloodtypes")
                        .HasForeignKey("BloodtypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BloodModels_Bloodtypes_Bloodtypes");

                    b.Navigation("BloodModel");

                    b.Navigation("Bloodtype");
                });

            modelBuilder.Entity("MudSharp.Models.BloodtypesBloodtypeAntigens", b =>
                {
                    b.HasOne("MudSharp.Models.BloodtypeAntigen", "BloodtypeAntigen")
                        .WithMany("BloodtypesBloodtypeAntigens")
                        .HasForeignKey("BloodtypeAntigenId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Bloodtypes_BloodtypeAntigens_BloodtypeAntigens");

                    b.HasOne("MudSharp.Models.Bloodtype", "Bloodtype")
                        .WithMany("BloodtypesBloodtypeAntigens")
                        .HasForeignKey("BloodtypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Bloodtypes_BloodtypeAntigens_Bloodtypes");

                    b.Navigation("Bloodtype");

                    b.Navigation("BloodtypeAntigen");
                });

            modelBuilder.Entity("MudSharp.Models.Board", b =>
                {
                    b.HasOne("MudSharp.Models.Calendar", "Calendar")
                        .WithMany()
                        .HasForeignKey("CalendarId")
                        .HasConstraintName("FK_Boards_Calendars");

                    b.Navigation("Calendar");
                });

            modelBuilder.Entity("MudSharp.Models.BoardPost", b =>
                {
                    b.HasOne("MudSharp.Models.Board", "Board")
                        .WithMany("BoardPosts")
                        .HasForeignKey("BoardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BoardPosts_Boards");

                    b.Navigation("Board");
                });

            modelBuilder.Entity("MudSharp.Models.BodiesGameItems", b =>
                {
                    b.HasOne("MudSharp.Models.Body", "Body")
                        .WithMany("BodiesGameItems")
                        .HasForeignKey("BodyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Bodies_GameItems_Bodies");

                    b.HasOne("MudSharp.Models.GameItem", "GameItem")
                        .WithMany("BodiesGameItems")
                        .HasForeignKey("GameItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Bodies_GameItems_GameItems");

                    b.Navigation("Body");

                    b.Navigation("GameItem");
                });

            modelBuilder.Entity("MudSharp.Models.BodiesImplants", b =>
                {
                    b.HasOne("MudSharp.Models.Body", "Body")
                        .WithMany("BodiesImplants")
                        .HasForeignKey("BodyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Bodies_Implants_Bodies");

                    b.HasOne("MudSharp.Models.GameItem", "Implant")
                        .WithMany("BodiesImplants")
                        .HasForeignKey("ImplantId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Bodies_Implants_GameItems");

                    b.Navigation("Body");

                    b.Navigation("Implant");
                });

            modelBuilder.Entity("MudSharp.Models.BodiesProsthetics", b =>
                {
                    b.HasOne("MudSharp.Models.Body", "Body")
                        .WithMany("BodiesProsthetics")
                        .HasForeignKey("BodyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Bodies_Prosthetics_Bodies");

                    b.HasOne("MudSharp.Models.GameItem", "Prosthetic")
                        .WithMany("BodiesProsthetics")
                        .HasForeignKey("ProstheticId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Bodies_Prosthetics_GameItems");

                    b.Navigation("Body");

                    b.Navigation("Prosthetic");
                });

            modelBuilder.Entity("MudSharp.Models.BodiesSeveredParts", b =>
                {
                    b.HasOne("MudSharp.Models.Body", "Bodies")
                        .WithMany("BodiesSeveredParts")
                        .HasForeignKey("BodiesId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Bodies_SeveredParts_Bodies");

                    b.HasOne("MudSharp.Models.BodypartProto", "BodypartProto")
                        .WithMany("BodiesSeveredParts")
                        .HasForeignKey("BodypartProtoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Bodies_SeveredParts_BodypartProtos");

                    b.Navigation("Bodies");

                    b.Navigation("BodypartProto");
                });

            modelBuilder.Entity("MudSharp.Models.Body", b =>
                {
                    b.HasOne("MudSharp.Models.Bloodtype", "Bloodtype")
                        .WithMany("Bodies")
                        .HasForeignKey("BloodtypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Bodies_Bloodtypes");

                    b.HasOne("MudSharp.Models.Ethnicity", "Ethnicity")
                        .WithMany("Bodies")
                        .HasForeignKey("EthnicityId")
                        .IsRequired()
                        .HasConstraintName("FK_Bodies_Ethnicities");

                    b.HasOne("MudSharp.Models.EntityDescriptionPattern", "FullDescriptionPattern")
                        .WithMany("BodiesFullDescriptionPattern")
                        .HasForeignKey("FullDescriptionPatternId")
                        .HasConstraintName("FK_Bodies_EntityDescriptionPatterns_Full");

                    b.HasOne("MudSharp.Models.Race", "Race")
                        .WithMany("Bodies")
                        .HasForeignKey("RaceId")
                        .IsRequired()
                        .HasConstraintName("FK_Bodies_Races");

                    b.HasOne("MudSharp.Models.EntityDescriptionPattern", "ShortDescriptionPattern")
                        .WithMany("BodiesShortDescriptionPattern")
                        .HasForeignKey("ShortDescriptionPatternId")
                        .HasConstraintName("FK_Bodies_EntityDescriptionPatterns_Short");

                    b.Navigation("Bloodtype");

                    b.Navigation("Ethnicity");

                    b.Navigation("FullDescriptionPattern");

                    b.Navigation("Race");

                    b.Navigation("ShortDescriptionPattern");
                });

            modelBuilder.Entity("MudSharp.Models.BodyDrugDose", b =>
                {
                    b.HasOne("MudSharp.Models.Body", "Body")
                        .WithMany("BodiesDrugDoses")
                        .HasForeignKey("BodyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Bodies_DrugDoses_Bodies");

                    b.HasOne("MudSharp.Models.Drug", "Drug")
                        .WithMany("BodiesDrugDoses")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Bodies_DrugDoses_Drugs");

                    b.Navigation("Body");

                    b.Navigation("Drug");
                });

            modelBuilder.Entity("MudSharp.Models.BodyProto", b =>
                {
                    b.HasOne("MudSharp.Models.BodyProto", "CountsAs")
                        .WithMany("InverseCountsAs")
                        .HasForeignKey("CountsAsId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_BodyPrototype_BodyPrototype");

                    b.HasOne("MudSharp.Models.BodypartProto", "DefaultSmashingBodypart")
                        .WithMany("BodyProtos")
                        .HasForeignKey("DefaultSmashingBodypartId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_BodyPrototype_Bodyparts");

                    b.HasOne("MudSharp.Models.WearableSizeParameterRule", "WearSizeParameter")
                        .WithMany("BodyProtos")
                        .HasForeignKey("WearSizeParameterId")
                        .IsRequired()
                        .HasConstraintName("FK_BodyPrototype_WearableSizeParameterRule");

                    b.Navigation("CountsAs");

                    b.Navigation("DefaultSmashingBodypart");

                    b.Navigation("WearSizeParameter");
                });

            modelBuilder.Entity("MudSharp.Models.BodyProtosAdditionalBodyparts", b =>
                {
                    b.HasOne("MudSharp.Models.BodyProto", "BodyProto")
                        .WithMany("BodyProtosAdditionalBodyparts")
                        .HasForeignKey("BodyProtoId")
                        .IsRequired()
                        .HasConstraintName("FK_BodyProtos_AdditionalBodyparts_BodyProtos");

                    b.HasOne("MudSharp.Models.BodypartProto", "Bodypart")
                        .WithMany("BodyProtosAdditionalBodyparts")
                        .HasForeignKey("BodypartId")
                        .IsRequired()
                        .HasConstraintName("FK_BodyProtos_AdditionalBodyparts_BodypartProto");

                    b.Navigation("BodyProto");

                    b.Navigation("Bodypart");
                });

            modelBuilder.Entity("MudSharp.Models.BodyProtosPositions", b =>
                {
                    b.HasOne("MudSharp.Models.BodyProto", "BodyProto")
                        .WithMany("BodyProtosPositions")
                        .HasForeignKey("BodyProtoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BodyProtosPositions_BodyProtos");

                    b.Navigation("BodyProto");
                });

            modelBuilder.Entity("MudSharp.Models.BodypartGroupDescribersBodyProtos", b =>
                {
                    b.HasOne("MudSharp.Models.BodyProto", "BodyProto")
                        .WithMany("BodypartGroupDescribersBodyProtos")
                        .HasForeignKey("BodyProtoId")
                        .IsRequired()
                        .HasConstraintName("FK_BGD_BodyProtos_BodyProtos");

                    b.HasOne("MudSharp.Models.BodypartGroupDescriber", "BodypartGroupDescriber")
                        .WithMany("BodypartGroupDescribersBodyProtos")
                        .HasForeignKey("BodypartGroupDescriberId")
                        .IsRequired()
                        .HasConstraintName("FK_BGD_BodyProtos_BodypartGroupDescribers");

                    b.Navigation("BodyProto");

                    b.Navigation("BodypartGroupDescriber");
                });

            modelBuilder.Entity("MudSharp.Models.BodypartGroupDescribersBodypartProtos", b =>
                {
                    b.HasOne("MudSharp.Models.BodypartGroupDescriber", "BodypartGroupDescriber")
                        .WithMany("BodypartGroupDescribersBodypartProtos")
                        .HasForeignKey("BodypartGroupDescriberId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BGD_BodypartProtos_BodypartGroupDescribers");

                    b.HasOne("MudSharp.Models.BodypartProto", "BodypartProto")
                        .WithMany("BodypartGroupDescribersBodypartProtos")
                        .HasForeignKey("BodypartProtoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BGD_BodypartProtos_BodypartProto");

                    b.Navigation("BodypartGroupDescriber");

                    b.Navigation("BodypartProto");
                });

            modelBuilder.Entity("MudSharp.Models.BodypartGroupDescribersShapeCount", b =>
                {
                    b.HasOne("MudSharp.Models.BodypartGroupDescriber", "BodypartGroupDescriptionRule")
                        .WithMany("BodypartGroupDescribersShapeCount")
                        .HasForeignKey("BodypartGroupDescriptionRuleId")
                        .IsRequired()
                        .HasConstraintName("FK_BGD_ShapeCount_BodypartGroupDescribers");

                    b.HasOne("MudSharp.Models.BodypartShape", "Target")
                        .WithMany("BodypartGroupDescribersShapeCount")
                        .HasForeignKey("TargetId")
                        .IsRequired()
                        .HasConstraintName("FK_BGD_ShapeCount_BodypartShape");

                    b.Navigation("BodypartGroupDescriptionRule");

                    b.Navigation("Target");
                });

            modelBuilder.Entity("MudSharp.Models.BodypartInternalInfos", b =>
                {
                    b.HasOne("MudSharp.Models.BodypartProto", "BodypartProto")
                        .WithMany("BodypartInternalInfosBodypartProto")
                        .HasForeignKey("BodypartProtoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BodypartInternalInfos_BodypartProtos");

                    b.HasOne("MudSharp.Models.BodypartProto", "InternalPart")
                        .WithMany("BodypartInternalInfosInternalPart")
                        .HasForeignKey("InternalPartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BodypartInternalInfos_BodypartProtos_Internal");

                    b.Navigation("BodypartProto");

                    b.Navigation("InternalPart");
                });

            modelBuilder.Entity("MudSharp.Models.BodypartProto", b =>
                {
                    b.HasOne("MudSharp.Models.ArmourType", "ArmourType")
                        .WithMany("BodypartProto")
                        .HasForeignKey("ArmourTypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_BodypartProto_ArmourTypes");

                    b.HasOne("MudSharp.Models.BodyProto", "Body")
                        .WithMany("BodypartProtos")
                        .HasForeignKey("BodyId")
                        .IsRequired()
                        .HasConstraintName("FK_BodypartProto_BodyPrototype");

                    b.HasOne("MudSharp.Models.BodypartShape", "BodypartShape")
                        .WithMany("BodypartProto")
                        .HasForeignKey("BodypartShapeId")
                        .IsRequired()
                        .HasConstraintName("FK_BodypartProto_BodypartShape");

                    b.HasOne("MudSharp.Models.BodypartProto", "CountAs")
                        .WithMany("InverseCountAs")
                        .HasForeignKey("CountAsId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_BodypartProto_BodypartProto");

                    b.HasOne("MudSharp.Models.Material", "DefaultMaterial")
                        .WithMany("BodypartProto")
                        .HasForeignKey("DefaultMaterialId")
                        .IsRequired()
                        .HasConstraintName("FK_BodypartProto_Materials");

                    b.Navigation("ArmourType");

                    b.Navigation("Body");

                    b.Navigation("BodypartShape");

                    b.Navigation("CountAs");

                    b.Navigation("DefaultMaterial");
                });

            modelBuilder.Entity("MudSharp.Models.BodypartProtoAlignmentHits", b =>
                {
                    b.HasOne("MudSharp.Models.BodypartProto", "BodypartProto")
                        .WithMany("BodypartProtoAlignmentHits")
                        .HasForeignKey("BodypartProtoId")
                        .IsRequired()
                        .HasConstraintName("FK_BodypartProto_AlignmentHits_BodypartProto");

                    b.Navigation("BodypartProto");
                });

            modelBuilder.Entity("MudSharp.Models.BodypartProtoBodypartProtoUpstream", b =>
                {
                    b.HasOne("MudSharp.Models.BodypartProto", "ChildNavigation")
                        .WithMany("BodypartProtoBodypartProtoUpstreamChildNavigation")
                        .HasForeignKey("Child")
                        .IsRequired()
                        .HasConstraintName("FKChild");

                    b.HasOne("MudSharp.Models.BodypartProto", "ParentNavigation")
                        .WithMany("BodypartProtoBodypartProtoUpstreamParentNavigation")
                        .HasForeignKey("Parent")
                        .IsRequired()
                        .HasConstraintName("FKParent");

                    b.Navigation("ChildNavigation");

                    b.Navigation("ParentNavigation");
                });

            modelBuilder.Entity("MudSharp.Models.BodypartProtoOrientationHits", b =>
                {
                    b.HasOne("MudSharp.Models.BodypartProto", "BodypartProto")
                        .WithMany("BodypartProtoOrientationHits")
                        .HasForeignKey("BodypartProtoId")
                        .IsRequired()
                        .HasConstraintName("FK_BodypartProto_OrientationHits_BodypartProto");

                    b.Navigation("BodypartProto");
                });

            modelBuilder.Entity("MudSharp.Models.BoneOrganCoverage", b =>
                {
                    b.HasOne("MudSharp.Models.BodypartProto", "Bone")
                        .WithMany("BoneOrganCoveragesBone")
                        .HasForeignKey("BoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BoneOrganCoverages_BodypartProto_Bone");

                    b.HasOne("MudSharp.Models.BodypartProto", "Organ")
                        .WithMany("BoneOrganCoveragesOrgan")
                        .HasForeignKey("OrganId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_BoneOrganCoverages_BodypartProto_Organ");

                    b.Navigation("Bone");

                    b.Navigation("Organ");
                });

            modelBuilder.Entity("MudSharp.Models.ButcheryProductItems", b =>
                {
                    b.HasOne("MudSharp.Models.ButcheryProducts", "ButcheryProduct")
                        .WithMany("ButcheryProductItems")
                        .HasForeignKey("ButcheryProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ButcheryProductItems_ButcheryProducts");

                    b.Navigation("ButcheryProduct");
                });

            modelBuilder.Entity("MudSharp.Models.ButcheryProducts", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "CanProduceProg")
                        .WithMany("ButcheryProducts")
                        .HasForeignKey("CanProduceProgId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_ButcheryProducts_FutureProgs");

                    b.HasOne("MudSharp.Models.BodyProto", "TargetBody")
                        .WithMany("ButcheryProducts")
                        .HasForeignKey("TargetBodyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ButcheryProducts_BodyProtos");

                    b.Navigation("CanProduceProg");

                    b.Navigation("TargetBody");
                });

            modelBuilder.Entity("MudSharp.Models.ButcheryProductsBodypartProtos", b =>
                {
                    b.HasOne("MudSharp.Models.BodypartProto", "BodypartProto")
                        .WithMany("ButcheryProductsBodypartProtos")
                        .HasForeignKey("BodypartProtoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ButcheryProducts_BodypartProtos_BodypartProtos");

                    b.HasOne("MudSharp.Models.ButcheryProducts", "ButcheryProduct")
                        .WithMany("ButcheryProductsBodypartProtos")
                        .HasForeignKey("ButcheryProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ButcheryProducts_BodypartProtos_ButcheryProducts");

                    b.Navigation("BodypartProto");

                    b.Navigation("ButcheryProduct");
                });

            modelBuilder.Entity("MudSharp.Models.Cell", b =>
                {
                    b.HasOne("MudSharp.Models.CellOverlay", "CurrentOverlay")
                        .WithMany("Cells")
                        .HasForeignKey("CurrentOverlayId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Cells_CellOverlays");

                    b.HasOne("MudSharp.Models.Room", "Room")
                        .WithMany("Cells")
                        .HasForeignKey("RoomId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Cells_Rooms");

                    b.Navigation("CurrentOverlay");

                    b.Navigation("Room");
                });

            modelBuilder.Entity("MudSharp.Models.CellMagicResource", b =>
                {
                    b.HasOne("MudSharp.Models.Cell", "Cell")
                        .WithMany("CellsMagicResources")
                        .HasForeignKey("CellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Cells_MagicResources_Cells");

                    b.HasOne("MudSharp.Models.MagicResource", "MagicResource")
                        .WithMany("CellsMagicResources")
                        .HasForeignKey("MagicResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Cells_MagicResources_MagicResources");

                    b.Navigation("Cell");

                    b.Navigation("MagicResource");
                });

            modelBuilder.Entity("MudSharp.Models.CellOverlay", b =>
                {
                    b.HasOne("MudSharp.Models.Cell", "Cell")
                        .WithMany("CellOverlays")
                        .HasForeignKey("CellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CellOverlays_Cells");

                    b.HasOne("MudSharp.Models.HearingProfile", "HearingProfile")
                        .WithMany("CellOverlays")
                        .HasForeignKey("HearingProfileId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_CellOverlays_HearingProfiles");

                    b.HasOne("MudSharp.Models.Terrain", "Terrain")
                        .WithMany("CellOverlays")
                        .HasForeignKey("TerrainId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired()
                        .HasConstraintName("FK_CellOverlays_Terrains");

                    b.HasOne("MudSharp.Models.CellOverlayPackage", "CellOverlayPackage")
                        .WithMany("CellOverlays")
                        .HasForeignKey("CellOverlayPackageId", "CellOverlayPackageRevisionNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CellOverlays_CellOverlayPackages");

                    b.Navigation("Cell");

                    b.Navigation("CellOverlayPackage");

                    b.Navigation("HearingProfile");

                    b.Navigation("Terrain");
                });

            modelBuilder.Entity("MudSharp.Models.CellOverlayExit", b =>
                {
                    b.HasOne("MudSharp.Models.CellOverlay", "CellOverlay")
                        .WithMany("CellOverlaysExits")
                        .HasForeignKey("CellOverlayId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CellOverlays_Exits_CellOverlays");

                    b.HasOne("MudSharp.Models.Exit", "Exit")
                        .WithMany("CellOverlaysExits")
                        .HasForeignKey("ExitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CellOverlays_Exits_Exits");

                    b.Navigation("CellOverlay");

                    b.Navigation("Exit");
                });

            modelBuilder.Entity("MudSharp.Models.CellOverlayPackage", b =>
                {
                    b.HasOne("MudSharp.Models.EditableItem", "EditableItem")
                        .WithMany("CellOverlayPackages")
                        .HasForeignKey("EditableItemId")
                        .IsRequired()
                        .HasConstraintName("FK_CellOverlayPackages_EditableItems");

                    b.Navigation("EditableItem");
                });

            modelBuilder.Entity("MudSharp.Models.CellsForagableYield", b =>
                {
                    b.HasOne("MudSharp.Models.Cell", "Cell")
                        .WithMany("CellsForagableYields")
                        .HasForeignKey("CellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Cells_ForagableYields_Cells");

                    b.Navigation("Cell");
                });

            modelBuilder.Entity("MudSharp.Models.CellsGameItems", b =>
                {
                    b.HasOne("MudSharp.Models.Cell", "Cell")
                        .WithMany("CellsGameItems")
                        .HasForeignKey("CellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Cells_GameItems_Cells");

                    b.HasOne("MudSharp.Models.GameItem", "GameItem")
                        .WithMany("CellsGameItems")
                        .HasForeignKey("GameItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Cells_GameItems_GameItems");

                    b.Navigation("Cell");

                    b.Navigation("GameItem");
                });

            modelBuilder.Entity("MudSharp.Models.CellsRangedCovers", b =>
                {
                    b.HasOne("MudSharp.Models.Cell", "Cell")
                        .WithMany("CellsRangedCovers")
                        .HasForeignKey("CellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Cells_RangedCovers_Cells");

                    b.HasOne("MudSharp.Models.RangedCover", "RangedCover")
                        .WithMany("CellsRangedCovers")
                        .HasForeignKey("RangedCoverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Cells_RangedCovers_RangedCovers");

                    b.Navigation("Cell");

                    b.Navigation("RangedCover");
                });

            modelBuilder.Entity("MudSharp.Models.CellsTags", b =>
                {
                    b.HasOne("MudSharp.Models.Cell", "Cell")
                        .WithMany("CellsTags")
                        .HasForeignKey("CellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Cells_Tags_Cells");

                    b.HasOne("MudSharp.Models.Tag", "Tag")
                        .WithMany("CellsTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Cells_Tags_Tags");

                    b.Navigation("Cell");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("MudSharp.Models.Channel", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "ChannelListenerProg")
                        .WithMany("ChannelsChannelListenerProg")
                        .HasForeignKey("ChannelListenerProgId")
                        .IsRequired()
                        .HasConstraintName("FK_Channels_FutureProgs_Listener");

                    b.HasOne("MudSharp.Models.FutureProg", "ChannelSpeakerProg")
                        .WithMany("ChannelsChannelSpeakerProg")
                        .HasForeignKey("ChannelSpeakerProgId")
                        .IsRequired()
                        .HasConstraintName("FK_Channels_FutureProgs_Speaker");

                    b.Navigation("ChannelListenerProg");

                    b.Navigation("ChannelSpeakerProg");
                });

            modelBuilder.Entity("MudSharp.Models.ChannelCommandWord", b =>
                {
                    b.HasOne("MudSharp.Models.Channel", "Channel")
                        .WithMany("ChannelCommandWords")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ChannelCommandWords_Channels");

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("MudSharp.Models.ChannelIgnorer", b =>
                {
                    b.HasOne("MudSharp.Models.Account", "Account")
                        .WithMany("ChannelIgnorers")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ChannelIgnorers_Accounts");

                    b.HasOne("MudSharp.Models.Channel", "Channel")
                        .WithMany("ChannelIgnorers")
                        .HasForeignKey("ChannelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ChannelIgnorers_Channels");

                    b.Navigation("Account");

                    b.Navigation("Channel");
                });

            modelBuilder.Entity("MudSharp.Models.Character", b =>
                {
                    b.HasOne("MudSharp.Models.Account", "Account")
                        .WithMany("Characters")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Characters_Accounts");

                    b.HasOne("MudSharp.Models.Body", "Body")
                        .WithMany("Characters")
                        .HasForeignKey("BodyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Characters_Bodies");

                    b.HasOne("MudSharp.Models.Chargen", "Chargen")
                        .WithMany("Characters")
                        .HasForeignKey("ChargenId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Characters_Chargens");

                    b.HasOne("MudSharp.Models.Culture", "Culture")
                        .WithMany("Characters")
                        .HasForeignKey("CultureId")
                        .IsRequired()
                        .HasConstraintName("FK_Characters_Cultures");

                    b.HasOne("MudSharp.Models.Currency", "Currency")
                        .WithMany("Characters")
                        .HasForeignKey("CurrencyId")
                        .HasConstraintName("FK_Characters_Currencies");

                    b.HasOne("MudSharp.Models.Accent", "CurrentAccent")
                        .WithMany("Characters")
                        .HasForeignKey("CurrentAccentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Characters_Accents");

                    b.HasOne("MudSharp.Models.Language", "CurrentLanguage")
                        .WithMany("CharactersCurrentLanguage")
                        .HasForeignKey("CurrentLanguageId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Characters_Languages_Spoken");

                    b.HasOne("MudSharp.Models.ActiveProject", "CurrentProject")
                        .WithMany("Characters")
                        .HasForeignKey("CurrentProjectId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Characters_ActiveProjects");

                    b.HasOne("MudSharp.Models.ProjectLabourRequirement", "CurrentProjectLabour")
                        .WithMany("Characters")
                        .HasForeignKey("CurrentProjectLabourId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Characters_ProjectLabourRequirements");

                    b.HasOne("MudSharp.Models.Script", "CurrentScript")
                        .WithMany("Characters")
                        .HasForeignKey("CurrentScriptId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Characters_Scripts");

                    b.HasOne("MudSharp.Models.Language", "CurrentWritingLanguage")
                        .WithMany("CharactersCurrentWritingLanguage")
                        .HasForeignKey("CurrentWritingLanguageId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Characters_Languages_Written");

                    b.HasOne("MudSharp.Models.Cell", "LocationNavigation")
                        .WithMany("Characters")
                        .HasForeignKey("Location")
                        .IsRequired()
                        .HasConstraintName("FK_Characters_Cells");

                    b.Navigation("Account");

                    b.Navigation("Body");

                    b.Navigation("Chargen");

                    b.Navigation("Culture");

                    b.Navigation("Currency");

                    b.Navigation("CurrentAccent");

                    b.Navigation("CurrentLanguage");

                    b.Navigation("CurrentProject");

                    b.Navigation("CurrentProjectLabour");

                    b.Navigation("CurrentScript");

                    b.Navigation("CurrentWritingLanguage");

                    b.Navigation("LocationNavigation");
                });

            modelBuilder.Entity("MudSharp.Models.CharacterAccent", b =>
                {
                    b.HasOne("MudSharp.Models.Accent", "Accent")
                        .WithMany("CharactersAccents")
                        .HasForeignKey("AccentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Characters_Accents_Accents");

                    b.HasOne("MudSharp.Models.Character", "Character")
                        .WithMany("CharactersAccents")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Characters_Accents_Characters");

                    b.Navigation("Accent");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("MudSharp.Models.CharacterCombatSetting", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "AvailabilityProg")
                        .WithMany("CharacterCombatSettings")
                        .HasForeignKey("AvailabilityProgId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_CharacterCombatSettings_FutureProgs");

                    b.HasOne("MudSharp.Models.Character", "CharacterOwner")
                        .WithMany("CharacterCombatSettings")
                        .HasForeignKey("CharacterOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_CharacterCombatSettings_Characters");

                    b.Navigation("AvailabilityProg");

                    b.Navigation("CharacterOwner");
                });

            modelBuilder.Entity("MudSharp.Models.CharacterIntroTemplate", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "AppliesToCharacterProg")
                        .WithMany("CharacterIntroTemplates")
                        .HasForeignKey("AppliesToCharacterProgId")
                        .IsRequired()
                        .HasConstraintName("FK_CharacterIntroTemplates_FutureProgs");

                    b.Navigation("AppliesToCharacterProg");
                });

            modelBuilder.Entity("MudSharp.Models.CharacterKnowledge", b =>
                {
                    b.HasOne("MudSharp.Models.Character", "Character")
                        .WithMany("CharacterKnowledges")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CHARACTERKNOWLEDGES_CHARACTERS");

                    b.HasOne("MudSharp.Models.Knowledge", "Knowledge")
                        .WithMany("CharacterKnowledges")
                        .HasForeignKey("KnowledgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CHARACTERKNOWLEDGES_KNOWLEDGES");

                    b.Navigation("Character");

                    b.Navigation("Knowledge");
                });

            modelBuilder.Entity("MudSharp.Models.CharacterLog", b =>
                {
                    b.HasOne("MudSharp.Models.Account", "Account")
                        .WithMany("CharacterLog")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_CharacterLog_Accounts");

                    b.HasOne("MudSharp.Models.Cell", "Cell")
                        .WithMany("CharacterLog")
                        .HasForeignKey("CellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CharacterLog_Cells");

                    b.HasOne("MudSharp.Models.Character", "Character")
                        .WithMany("CharacterLog")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CharacterLog_Characters");

                    b.Navigation("Account");

                    b.Navigation("Cell");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("MudSharp.Models.Characteristic", b =>
                {
                    b.HasOne("MudSharp.Models.Body", "Body")
                        .WithMany("Characteristics")
                        .HasForeignKey("BodyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Characteristics_Bodies");

                    b.HasOne("MudSharp.Models.CharacteristicValue", "CharacteristicValue")
                        .WithMany("Characteristics")
                        .HasForeignKey("CharacteristicId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Characteristics_CharacteristicValues");

                    b.Navigation("Body");

                    b.Navigation("CharacteristicValue");
                });

            modelBuilder.Entity("MudSharp.Models.CharacteristicDefinition", b =>
                {
                    b.HasOne("MudSharp.Models.CharacteristicDefinition", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .HasConstraintName("FK_CharacteristicDefinitions_Parent");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("MudSharp.Models.CharacteristicProfile", b =>
                {
                    b.HasOne("MudSharp.Models.CharacteristicDefinition", "TargetDefinition")
                        .WithMany("CharacteristicProfiles")
                        .HasForeignKey("TargetDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CharacteristicProfiles_CharacteristicDefinitions");

                    b.Navigation("TargetDefinition");
                });

            modelBuilder.Entity("MudSharp.Models.CharacteristicValue", b =>
                {
                    b.HasOne("MudSharp.Models.CharacteristicDefinition", "Definition")
                        .WithMany("CharacteristicValues")
                        .HasForeignKey("DefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CharacteristicValues_CharacteristicDefinitions");

                    b.HasOne("MudSharp.Models.FutureProg", "FutureProg")
                        .WithMany("CharacteristicValues")
                        .HasForeignKey("FutureProgId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_CharacteristicValues_FutureProgs");

                    b.HasOne("MudSharp.Models.FutureProg", "OngoingValidityProg")
                        .WithMany()
                        .HasForeignKey("OngoingValidityProgId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_CharacteristicValues_FutureProgs_Ongoing");

                    b.Navigation("Definition");

                    b.Navigation("FutureProg");

                    b.Navigation("OngoingValidityProg");
                });

            modelBuilder.Entity("MudSharp.Models.CharactersChargenRoles", b =>
                {
                    b.HasOne("MudSharp.Models.Character", "Character")
                        .WithMany("CharactersChargenRoles")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Characters_ChargenRoles_Characters");

                    b.HasOne("MudSharp.Models.ChargenRole", "ChargenRole")
                        .WithMany("CharactersChargenRoles")
                        .HasForeignKey("ChargenRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Characters_ChargenRoles_ChargenRoles");

                    b.Navigation("Character");

                    b.Navigation("ChargenRole");
                });

            modelBuilder.Entity("MudSharp.Models.CharactersLanguages", b =>
                {
                    b.HasOne("MudSharp.Models.Character", "Character")
                        .WithMany("CharactersLanguages")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Characters_Languages_Characters");

                    b.HasOne("MudSharp.Models.Language", "Language")
                        .WithMany("CharactersLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Characters_Languages_Languages");

                    b.Navigation("Character");

                    b.Navigation("Language");
                });

            modelBuilder.Entity("MudSharp.Models.CharactersMagicResources", b =>
                {
                    b.HasOne("MudSharp.Models.Character", "Character")
                        .WithMany("CharactersMagicResources")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Characters_MagicResources_Characters");

                    b.HasOne("MudSharp.Models.MagicResource", "MagicResource")
                        .WithMany("CharactersMagicResources")
                        .HasForeignKey("MagicResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Characters_MagicResources_MagicResources");

                    b.Navigation("Character");

                    b.Navigation("MagicResource");
                });

            modelBuilder.Entity("MudSharp.Models.CharactersScripts", b =>
                {
                    b.HasOne("MudSharp.Models.Character", "Character")
                        .WithMany("CharactersScripts")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Characters_Scripts_Characters");

                    b.HasOne("MudSharp.Models.Script", "Script")
                        .WithMany("CharactersScripts")
                        .HasForeignKey("ScriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Characters_Scripts_Scripts");

                    b.Navigation("Character");

                    b.Navigation("Script");
                });

            modelBuilder.Entity("MudSharp.Models.Chargen", b =>
                {
                    b.HasOne("MudSharp.Models.Account", "Account")
                        .WithMany("Chargens")
                        .HasForeignKey("AccountId")
                        .IsRequired()
                        .HasConstraintName("FK_Chargens_Accounts");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("MudSharp.Models.ChargenAdvice", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "ShouldShowAdviceProg")
                        .WithMany("ChargenAdvices")
                        .HasForeignKey("ShouldShowAdviceProgId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_ChargenAdvices_FutureProgs");

                    b.Navigation("ShouldShowAdviceProg");
                });

            modelBuilder.Entity("MudSharp.Models.ChargenAdvicesChargenRoles", b =>
                {
                    b.HasOne("MudSharp.Models.ChargenAdvice", "ChargenAdvice")
                        .WithMany("ChargenAdvicesChargenRoles")
                        .HasForeignKey("ChargenAdviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ChargenAdvices_ChargenRoles_ChargenAdvices");

                    b.HasOne("MudSharp.Models.ChargenRole", "ChargenRole")
                        .WithMany("ChargenAdvicesChargenRoles")
                        .HasForeignKey("ChargenRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ChargenAdvices_ChargenRoles_ChargenRoles");

                    b.Navigation("ChargenAdvice");

                    b.Navigation("ChargenRole");
                });

            modelBuilder.Entity("MudSharp.Models.ChargenAdvicesCultures", b =>
                {
                    b.HasOne("MudSharp.Models.ChargenAdvice", "ChargenAdvice")
                        .WithMany("ChargenAdvicesCultures")
                        .HasForeignKey("ChargenAdviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ChargenAdvices_Cultures_ChargenAdvices");

                    b.HasOne("MudSharp.Models.Culture", "Culture")
                        .WithMany("ChargenAdvicesCultures")
                        .HasForeignKey("CultureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ChargenAdvices_Cultures_Cultures");

                    b.Navigation("ChargenAdvice");

                    b.Navigation("Culture");
                });

            modelBuilder.Entity("MudSharp.Models.ChargenAdvicesEthnicities", b =>
                {
                    b.HasOne("MudSharp.Models.ChargenAdvice", "ChargenAdvice")
                        .WithMany("ChargenAdvicesEthnicities")
                        .HasForeignKey("ChargenAdviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ChargenAdvices_Ethnicities_ChargenAdvices");

                    b.HasOne("MudSharp.Models.Ethnicity", "Ethnicity")
                        .WithMany("ChargenAdvicesEthnicities")
                        .HasForeignKey("EthnicityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ChargenAdvices_Ethnicities_Ethnicities");

                    b.Navigation("ChargenAdvice");

                    b.Navigation("Ethnicity");
                });

            modelBuilder.Entity("MudSharp.Models.ChargenAdvicesRaces", b =>
                {
                    b.HasOne("MudSharp.Models.ChargenAdvice", "ChargenAdvice")
                        .WithMany("ChargenAdvicesRaces")
                        .HasForeignKey("ChargenAdviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ChargenAdvices_Races_ChargenAdvices");

                    b.HasOne("MudSharp.Models.Race", "Race")
                        .WithMany("ChargenAdvicesRaces")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ChargenAdvices_Races_Races");

                    b.Navigation("ChargenAdvice");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("MudSharp.Models.ChargenResource", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "ControlProg")
                        .WithMany()
                        .HasForeignKey("FK_ChargenResources_FutureProgs")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("ControlProg");
                });

            modelBuilder.Entity("MudSharp.Models.ChargenRole", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "AvailabilityProg")
                        .WithMany("ChargenRoles")
                        .HasForeignKey("AvailabilityProgId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_ChargenRoles_FutureProgs");

                    b.HasOne("MudSharp.Models.Account", "Poster")
                        .WithMany("ChargenRoles")
                        .HasForeignKey("PosterId")
                        .IsRequired()
                        .HasConstraintName("FK_ChargenRoles_Accounts");

                    b.Navigation("AvailabilityProg");

                    b.Navigation("Poster");
                });

            modelBuilder.Entity("MudSharp.Models.ChargenRolesApprovers", b =>
                {
                    b.HasOne("MudSharp.Models.Account", "Approver")
                        .WithMany("ChargenRolesApprovers")
                        .HasForeignKey("ApproverId")
                        .IsRequired()
                        .HasConstraintName("FK_ChargenRoles_Approvers_Accounts");

                    b.HasOne("MudSharp.Models.ChargenRole", "ChargenRole")
                        .WithMany("ChargenRolesApprovers")
                        .HasForeignKey("ChargenRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ChargenRoles_Approvers_ChargenRoles");

                    b.Navigation("Approver");

                    b.Navigation("ChargenRole");
                });

            modelBuilder.Entity("MudSharp.Models.ChargenRolesClanMemberships", b =>
                {
                    b.HasOne("MudSharp.Models.ChargenRole", "ChargenRole")
                        .WithMany("ChargenRolesClanMemberships")
                        .HasForeignKey("ChargenRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ChargenRoles_ClanMemberships_ChargenRoles");

                    b.HasOne("MudSharp.Models.Clan", "Clan")
                        .WithMany("ChargenRolesClanMemberships")
                        .HasForeignKey("ClanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ChargenRoles_ClanMemberships_Clans");

                    b.HasOne("MudSharp.Models.Paygrade", "Paygrade")
                        .WithMany()
                        .HasForeignKey("PaygradeId");

                    b.HasOne("MudSharp.Models.Rank", "Rank")
                        .WithMany()
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChargenRole");

                    b.Navigation("Clan");

                    b.Navigation("Paygrade");

                    b.Navigation("Rank");
                });

            modelBuilder.Entity("MudSharp.Models.ChargenRolesClanMembershipsAppointments", b =>
                {
                    b.HasOne("MudSharp.Models.ChargenRolesClanMemberships", "ChargenRolesClanMembership")
                        .WithMany("ChargenRolesClanMembershipsAppointments")
                        .HasForeignKey("ChargenRoleId", "ClanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CRCMA_ChargenRoles_ClanMemberships");

                    b.Navigation("ChargenRolesClanMembership");
                });

            modelBuilder.Entity("MudSharp.Models.ChargenRolesCost", b =>
                {
                    b.HasOne("MudSharp.Models.ChargenResource", "ChargenResource")
                        .WithMany("ChargenRolesCosts")
                        .HasForeignKey("ChargenResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ChargenRoles_Costs_ChargenResources");

                    b.HasOne("MudSharp.Models.ChargenRole", "ChargenRole")
                        .WithMany("ChargenRolesCosts")
                        .HasForeignKey("ChargenRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ChargenRoles_Costs_ChargenRoles");

                    b.Navigation("ChargenResource");

                    b.Navigation("ChargenRole");
                });

            modelBuilder.Entity("MudSharp.Models.ChargenRolesCurrency", b =>
                {
                    b.HasOne("MudSharp.Models.ChargenRole", "ChargenRole")
                        .WithMany("ChargenRolesCurrencies")
                        .HasForeignKey("ChargenRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ChargenRoles_Currencies_ChargenRoles");

                    b.HasOne("MudSharp.Models.Currency", "Currency")
                        .WithMany("ChargenRolesCurrencies")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ChargenRoles_Currencies_Currencies");

                    b.Navigation("ChargenRole");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("MudSharp.Models.ChargenRolesMerit", b =>
                {
                    b.HasOne("MudSharp.Models.ChargenRole", "ChargenRole")
                        .WithMany("ChargenRolesMerits")
                        .HasForeignKey("ChargenRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ChargenRoles_Merits_ChargenRoles");

                    b.HasOne("MudSharp.Models.Merit", "Merit")
                        .WithMany("ChargenRolesMerits")
                        .HasForeignKey("MeritId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ChargenRoles_Merits_Merits");

                    b.Navigation("ChargenRole");

                    b.Navigation("Merit");
                });

            modelBuilder.Entity("MudSharp.Models.ChargenRolesTrait", b =>
                {
                    b.HasOne("MudSharp.Models.ChargenRole", "ChargenRole")
                        .WithMany("ChargenRolesTraits")
                        .HasForeignKey("ChargenRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ChargenRoles_Traits_ChargenRoles");

                    b.HasOne("MudSharp.Models.TraitDefinition", "Trait")
                        .WithMany("ChargenRolesTraits")
                        .HasForeignKey("TraitId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ChargenRoles_Traits_Currencies");

                    b.Navigation("ChargenRole");

                    b.Navigation("Trait");
                });

            modelBuilder.Entity("MudSharp.Models.ChargenScreenStoryboardDependentStage", b =>
                {
                    b.HasOne("MudSharp.Models.ChargenScreenStoryboard", "Owner")
                        .WithMany("DependentStages")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ChargenScreenStoryboardDependentStages_Owner");

                    b.Navigation("Owner");
                });

            modelBuilder.Entity("MudSharp.Models.Check", b =>
                {
                    b.HasOne("MudSharp.Models.CheckTemplate", "CheckTemplate")
                        .WithMany("Checks")
                        .HasForeignKey("CheckTemplateId")
                        .IsRequired()
                        .HasConstraintName("FK_Checks_CheckTemplates");

                    b.HasOne("MudSharp.Models.TraitExpression", "TraitExpression")
                        .WithMany("Checks")
                        .HasForeignKey("TraitExpressionId")
                        .IsRequired()
                        .HasConstraintName("FK_Checks_TraitExpression");

                    b.Navigation("CheckTemplate");

                    b.Navigation("TraitExpression");
                });

            modelBuilder.Entity("MudSharp.Models.CheckTemplateDifficulty", b =>
                {
                    b.HasOne("MudSharp.Models.CheckTemplate", "CheckTemplate")
                        .WithMany("CheckTemplateDifficulties")
                        .HasForeignKey("CheckTemplateId")
                        .IsRequired()
                        .HasConstraintName("FK_CheckTemplateDifficulties_CheckTemplates");

                    b.Navigation("CheckTemplate");
                });

            modelBuilder.Entity("MudSharp.Models.Clan", b =>
                {
                    b.HasOne("MudSharp.Models.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountId")
                        .HasConstraintName("FK_Clans_BankAccounts");

                    b.HasOne("MudSharp.Models.Calendar", "Calendar")
                        .WithMany("Clans")
                        .HasForeignKey("CalendarId")
                        .IsRequired()
                        .HasConstraintName("FK_Clans_Calendars");

                    b.HasOne("MudSharp.Models.Clan", null)
                        .WithMany("InverseParentClan")
                        .HasForeignKey("ClanId");

                    b.HasOne("MudSharp.Models.FutureProg", "OnPayProg")
                        .WithMany("Clans")
                        .HasForeignKey("OnPayProgId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Clans_FutureProgs");

                    b.HasOne("MudSharp.Models.Character", "Paymaster")
                        .WithMany("Clans")
                        .HasForeignKey("PaymasterId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Clans_Characters");

                    b.Navigation("BankAccount");

                    b.Navigation("Calendar");

                    b.Navigation("OnPayProg");

                    b.Navigation("Paymaster");
                });

            modelBuilder.Entity("MudSharp.Models.ClanAdministrationCell", b =>
                {
                    b.HasOne("MudSharp.Models.Cell", "Cell")
                        .WithMany("ClansAdministrationCells")
                        .HasForeignKey("CellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Clans_AdministrationCells_Cells");

                    b.HasOne("MudSharp.Models.Clan", "Clan")
                        .WithMany("ClansAdministrationCells")
                        .HasForeignKey("ClanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Clans_AdministrationCells_Clans");

                    b.Navigation("Cell");

                    b.Navigation("Clan");
                });

            modelBuilder.Entity("MudSharp.Models.ClanMembership", b =>
                {
                    b.HasOne("MudSharp.Models.Character", "Character")
                        .WithMany("ClanMembershipsCharacter")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ClanMemberships_Characters");

                    b.HasOne("MudSharp.Models.Clan", "Clan")
                        .WithMany("ClanMemberships")
                        .HasForeignKey("ClanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ClanMemberships_Clans");

                    b.HasOne("MudSharp.Models.Character", "Manager")
                        .WithMany("ClanMembershipsManager")
                        .HasForeignKey("ManagerId")
                        .HasConstraintName("FK_ClanMemberships_Manager");

                    b.Navigation("Character");

                    b.Navigation("Clan");

                    b.Navigation("Manager");
                });

            modelBuilder.Entity("MudSharp.Models.ClanMembershipBackpay", b =>
                {
                    b.HasOne("MudSharp.Models.Currency", "Currency")
                        .WithMany("ClanMembershipsBackpay")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ClanMemberships_Backpay_Currencies");

                    b.HasOne("MudSharp.Models.ClanMembership", "C")
                        .WithMany("ClanMembershipsBackpay")
                        .HasForeignKey("ClanId", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ClanMemberships_Backpay_ClanMemberships");

                    b.Navigation("C");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("MudSharp.Models.ClanMembershipsAppointments", b =>
                {
                    b.HasOne("MudSharp.Models.Appointment", "Appointment")
                        .WithMany("ClanMembershipsAppointments")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ClanMemberships_Appointments_Appointments");

                    b.HasOne("MudSharp.Models.ClanMembership", "ClanMembership")
                        .WithMany("ClanMembershipsAppointments")
                        .HasForeignKey("ClanId", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ClanMemberships_Appointments_ClanMemberships");

                    b.Navigation("Appointment");

                    b.Navigation("ClanMembership");
                });

            modelBuilder.Entity("MudSharp.Models.ClanTreasuryCell", b =>
                {
                    b.HasOne("MudSharp.Models.Cell", "Cell")
                        .WithMany("ClansTreasuryCells")
                        .HasForeignKey("CellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Clans_TreasuryCells_Cells");

                    b.HasOne("MudSharp.Models.Clan", "Clan")
                        .WithMany("ClansTreasuryCells")
                        .HasForeignKey("ClanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Clans_TreasuryCells_Clans");

                    b.Navigation("Cell");

                    b.Navigation("Clan");
                });

            modelBuilder.Entity("MudSharp.Models.ClimateModelSeason", b =>
                {
                    b.HasOne("MudSharp.Models.ClimateModel", "ClimateModel")
                        .WithMany("ClimateModelSeasons")
                        .HasForeignKey("ClimateModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ClimateModelSeasons_ClimateModels");

                    b.HasOne("MudSharp.Models.Season", "Season")
                        .WithMany("ClimateModelSeasons")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ClimateModelSeasons_Seasons");

                    b.Navigation("ClimateModel");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("MudSharp.Models.ClimateModelSeasonEvent", b =>
                {
                    b.HasOne("MudSharp.Models.ClimateModel", "ClimateModel")
                        .WithMany()
                        .HasForeignKey("ClimateModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ClimateModelSeasonEvents_ClimateModels");

                    b.HasOne("MudSharp.Models.Season", "Season")
                        .WithMany()
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ClimateModelSeasonEvents_Seasons");

                    b.HasOne("MudSharp.Models.WeatherEvent", "WeatherEvent")
                        .WithMany()
                        .HasForeignKey("WeatherEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ClimateModelSeasonEvents_WeatherEvents");

                    b.HasOne("MudSharp.Models.ClimateModelSeason", "ClimateModelSeason")
                        .WithMany("SeasonEvents")
                        .HasForeignKey("ClimateModelId", "SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ClimateModel");

                    b.Navigation("ClimateModelSeason");

                    b.Navigation("Season");

                    b.Navigation("WeatherEvent");
                });

            modelBuilder.Entity("MudSharp.Models.Coin", b =>
                {
                    b.HasOne("MudSharp.Models.Currency", "Currency")
                        .WithMany("Coins")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Coins_Currencies");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("MudSharp.Models.CombatAction", b =>
                {
                    b.HasOne("MudSharp.Models.TraitDefinition", "TraitDefinition")
                        .WithMany()
                        .HasForeignKey("TraitDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.FutureProg", "UsabilityProg")
                        .WithMany()
                        .HasForeignKey("UsabilityProgId");

                    b.Navigation("TraitDefinition");

                    b.Navigation("UsabilityProg");
                });

            modelBuilder.Entity("MudSharp.Models.CombatMessage", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "AuxiliaryProg")
                        .WithMany()
                        .HasForeignKey("AuxiliaryProgId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_CombatMessages_FutureProgs_Auxiliary");

                    b.HasOne("MudSharp.Models.FutureProg", "Prog")
                        .WithMany("CombatMessages")
                        .HasForeignKey("ProgId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_CombatMessages_FutureProgs");

                    b.Navigation("AuxiliaryProg");

                    b.Navigation("Prog");
                });

            modelBuilder.Entity("MudSharp.Models.CombatMessagesCombatActions", b =>
                {
                    b.HasOne("MudSharp.Models.CombatAction", "CombatAction")
                        .WithMany("CombatMessagesCombatActions")
                        .HasForeignKey("CombatActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CombatMessages_CombatActions_WeaponAttacks");

                    b.HasOne("MudSharp.Models.CombatMessage", "CombatMessage")
                        .WithMany("CombatMessagesCombatActions")
                        .HasForeignKey("CombatMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CombatMessages_CombatActions_CombatMessages");

                    b.Navigation("CombatAction");

                    b.Navigation("CombatMessage");
                });

            modelBuilder.Entity("MudSharp.Models.CombatMessagesWeaponAttacks", b =>
                {
                    b.HasOne("MudSharp.Models.CombatMessage", "CombatMessage")
                        .WithMany("CombatMessagesWeaponAttacks")
                        .HasForeignKey("CombatMessageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CombatMessages_WeaponAttacks_CombatMessages");

                    b.HasOne("MudSharp.Models.WeaponAttack", "WeaponAttack")
                        .WithMany("CombatMessagesWeaponAttacks")
                        .HasForeignKey("WeaponAttackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CombatMessages_WeaponAttacks_WeaponAttacks");

                    b.Navigation("CombatMessage");

                    b.Navigation("WeaponAttack");
                });

            modelBuilder.Entity("MudSharp.Models.ConveyancingLocation", b =>
                {
                    b.HasOne("MudSharp.Models.Cell", "Cell")
                        .WithMany()
                        .HasForeignKey("CellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ConveyancingLocations_Cells");

                    b.HasOne("MudSharp.Models.EconomicZone", "EconomicZone")
                        .WithMany("ConveyancingLocations")
                        .HasForeignKey("EconomicZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ConveyancingLocations_EconomicZones");

                    b.Navigation("Cell");

                    b.Navigation("EconomicZone");
                });

            modelBuilder.Entity("MudSharp.Models.Craft", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "AppearInCraftsListProg")
                        .WithMany("CraftsAppearInCraftsListProg")
                        .HasForeignKey("AppearInCraftsListProgId")
                        .HasConstraintName("FK_Crafts_FutureProgs_AppearInCraftsListProg");

                    b.HasOne("MudSharp.Models.FutureProg", "CanUseProg")
                        .WithMany("CraftsCanUseProg")
                        .HasForeignKey("CanUseProgId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Crafts_FutureProgs_CanUseProg");

                    b.HasOne("MudSharp.Models.TraitDefinition", "CheckTrait")
                        .WithMany("Crafts")
                        .HasForeignKey("CheckTraitId")
                        .HasConstraintName("FK_Crafts_TraitDefinitions");

                    b.HasOne("MudSharp.Models.EditableItem", "EditableItem")
                        .WithMany("Crafts")
                        .HasForeignKey("EditableItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Crafts_EditableItems");

                    b.HasOne("MudSharp.Models.FutureProg", "OnUseProgCancel")
                        .WithMany("CraftsOnUseProgCancel")
                        .HasForeignKey("OnUseProgCancelId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Crafts_FutureProgs_OnUseProgCancel");

                    b.HasOne("MudSharp.Models.FutureProg", "OnUseProgComplete")
                        .WithMany("CraftsOnUseProgComplete")
                        .HasForeignKey("OnUseProgCompleteId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Crafts_FutureProgs_OnUseProgComplete");

                    b.HasOne("MudSharp.Models.FutureProg", "OnUseProgStart")
                        .WithMany("CraftsOnUseProgStart")
                        .HasForeignKey("OnUseProgStartId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Crafts_FutureProgs_OnUseProgStart");

                    b.HasOne("MudSharp.Models.FutureProg", "WhyCannotUseProg")
                        .WithMany("CraftsWhyCannotUseProg")
                        .HasForeignKey("WhyCannotUseProgId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Crafts_FutureProgs_WhyCannotUseProg");

                    b.Navigation("AppearInCraftsListProg");

                    b.Navigation("CanUseProg");

                    b.Navigation("CheckTrait");

                    b.Navigation("EditableItem");

                    b.Navigation("OnUseProgCancel");

                    b.Navigation("OnUseProgComplete");

                    b.Navigation("OnUseProgStart");

                    b.Navigation("WhyCannotUseProg");
                });

            modelBuilder.Entity("MudSharp.Models.CraftInput", b =>
                {
                    b.HasOne("MudSharp.Models.Craft", "Craft")
                        .WithMany("CraftInputs")
                        .HasForeignKey("CraftId", "CraftRevisionNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CraftInputs_Crafts");

                    b.Navigation("Craft");
                });

            modelBuilder.Entity("MudSharp.Models.CraftPhase", b =>
                {
                    b.HasOne("MudSharp.Models.Craft", "Craft")
                        .WithMany("CraftPhases")
                        .HasForeignKey("CraftPhaseId", "CraftPhaseRevisionNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CraftPhases_Crafts");

                    b.Navigation("Craft");
                });

            modelBuilder.Entity("MudSharp.Models.CraftProduct", b =>
                {
                    b.HasOne("MudSharp.Models.Craft", "Craft")
                        .WithMany("CraftProducts")
                        .HasForeignKey("CraftId", "CraftRevisionNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CraftProducts_Crafts");

                    b.Navigation("Craft");
                });

            modelBuilder.Entity("MudSharp.Models.CraftTool", b =>
                {
                    b.HasOne("MudSharp.Models.Craft", "Craft")
                        .WithMany("CraftTools")
                        .HasForeignKey("CraftId", "CraftRevisionNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CraftTools_Crafts");

                    b.Navigation("Craft");
                });

            modelBuilder.Entity("MudSharp.Models.Crime", b =>
                {
                    b.HasOne("MudSharp.Models.Character", "Accuser")
                        .WithMany("CrimesAccuser")
                        .HasForeignKey("AccuserId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Crimes_Accuser");

                    b.HasOne("MudSharp.Models.Character", "Criminal")
                        .WithMany("CrimesCriminal")
                        .HasForeignKey("CriminalId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Crimes_Criminal");

                    b.HasOne("MudSharp.Models.Law", "Law")
                        .WithMany("Crimes")
                        .HasForeignKey("LawId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Crimes_Laws");

                    b.HasOne("MudSharp.Models.Cell", "Location")
                        .WithMany("Crimes")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Crimes_Location");

                    b.HasOne("MudSharp.Models.Character", "Victim")
                        .WithMany("CrimesVictim")
                        .HasForeignKey("VictimId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Crimes_Victim");

                    b.Navigation("Accuser");

                    b.Navigation("Criminal");

                    b.Navigation("Law");

                    b.Navigation("Location");

                    b.Navigation("Victim");
                });

            modelBuilder.Entity("MudSharp.Models.Culture", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "AvailabilityProg")
                        .WithMany("CulturesAvailabilityProg")
                        .HasForeignKey("AvailabilityProgId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Cultures_AvailabilityProg");

                    b.HasOne("MudSharp.Models.FutureProg", "SkillStartingValueProg")
                        .WithMany("CulturesSkillStartingValueProg")
                        .HasForeignKey("SkillStartingValueProgId")
                        .IsRequired()
                        .HasConstraintName("FK_Cultures_SkillStartingProg");

                    b.Navigation("AvailabilityProg");

                    b.Navigation("SkillStartingValueProg");
                });

            modelBuilder.Entity("MudSharp.Models.CulturesChargenResources", b =>
                {
                    b.HasOne("MudSharp.Models.ChargenResource", "ChargenResource")
                        .WithMany("CulturesChargenResources")
                        .HasForeignKey("ChargenResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Culture", "Culture")
                        .WithMany("CulturesChargenResources")
                        .HasForeignKey("CultureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChargenResource");

                    b.Navigation("Culture");
                });

            modelBuilder.Entity("MudSharp.Models.CulturesNameCultures", b =>
                {
                    b.HasOne("MudSharp.Models.Culture", "Culture")
                        .WithMany("CulturesNameCultures")
                        .HasForeignKey("CultureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CulturesNameCultures_Cultures");

                    b.HasOne("MudSharp.Models.NameCulture", "NameCulture")
                        .WithMany("CulturesNameCultures")
                        .HasForeignKey("NameCultureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CulturesNameCultures_NameCultures");

                    b.Navigation("Culture");

                    b.Navigation("NameCulture");
                });

            modelBuilder.Entity("MudSharp.Models.CurrencyDescriptionPattern", b =>
                {
                    b.HasOne("MudSharp.Models.Currency", "Currency")
                        .WithMany("CurrencyDescriptionPatterns")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CurrencyDescriptionPatterns_Currencies");

                    b.HasOne("MudSharp.Models.FutureProg", "FutureProg")
                        .WithMany("CurrencyDescriptionPatterns")
                        .HasForeignKey("FutureProgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_CurrencyDescriptionPatterns_FutureProgs");

                    b.Navigation("Currency");

                    b.Navigation("FutureProg");
                });

            modelBuilder.Entity("MudSharp.Models.CurrencyDescriptionPatternElement", b =>
                {
                    b.HasOne("MudSharp.Models.CurrencyDescriptionPattern", "CurrencyDescriptionPattern")
                        .WithMany("CurrencyDescriptionPatternElements")
                        .HasForeignKey("CurrencyDescriptionPatternId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CDPE_CurrencyDescriptionPatterns");

                    b.HasOne("MudSharp.Models.CurrencyDivision", "CurrencyDivision")
                        .WithMany("CurrencyDescriptionPatternElements")
                        .HasForeignKey("CurrencyDivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CDPE_CurrencyDivisions");

                    b.Navigation("CurrencyDescriptionPattern");

                    b.Navigation("CurrencyDivision");
                });

            modelBuilder.Entity("MudSharp.Models.CurrencyDescriptionPatternElementSpecialValues", b =>
                {
                    b.HasOne("MudSharp.Models.CurrencyDescriptionPatternElement", "CurrencyDescriptionPatternElement")
                        .WithMany("CurrencyDescriptionPatternElementSpecialValues")
                        .HasForeignKey("CurrencyDescriptionPatternElementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CDPESV_CDPE");

                    b.Navigation("CurrencyDescriptionPatternElement");
                });

            modelBuilder.Entity("MudSharp.Models.CurrencyDivision", b =>
                {
                    b.HasOne("MudSharp.Models.Currency", "Currency")
                        .WithMany("CurrencyDivisions")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CurrencyDivisions_Currencies");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("MudSharp.Models.CurrencyDivisionAbbreviation", b =>
                {
                    b.HasOne("MudSharp.Models.CurrencyDivision", "CurrencyDivision")
                        .WithMany("CurrencyDivisionAbbreviations")
                        .HasForeignKey("CurrencyDivisionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_CurrencyDivisionAbbreviations_CurrencyDivisions");

                    b.Navigation("CurrencyDivision");
                });

            modelBuilder.Entity("MudSharp.Models.DefaultHook", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "FutureProg")
                        .WithMany("DefaultHooks")
                        .HasForeignKey("FutureProgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DefaultHooks_Futureprogs");

                    b.HasOne("MudSharp.Models.Hooks", "Hook")
                        .WithMany("DefaultHooks")
                        .HasForeignKey("HookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DefaultHooks_Hooks");

                    b.Navigation("FutureProg");

                    b.Navigation("Hook");
                });

            modelBuilder.Entity("MudSharp.Models.DisfigurementTemplate", b =>
                {
                    b.HasOne("MudSharp.Models.EditableItem", "EditableItem")
                        .WithMany("DisfigurementTemplates")
                        .HasForeignKey("EditableItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_DisfigurementTemplates_EditableItems");

                    b.Navigation("EditableItem");
                });

            modelBuilder.Entity("MudSharp.Models.Door", b =>
                {
                    b.HasOne("MudSharp.Models.Lock", "LockedWithNavigation")
                        .WithMany("Doors")
                        .HasForeignKey("LockedWith")
                        .HasConstraintName("FK_Doors_Locks");

                    b.Navigation("LockedWithNavigation");
                });

            modelBuilder.Entity("MudSharp.Models.Drawing", b =>
                {
                    b.HasOne("MudSharp.Models.Character", "Author")
                        .WithMany("Drawings")
                        .HasForeignKey("AuthorId")
                        .IsRequired()
                        .HasConstraintName("FK_Drawings_Characters");

                    b.Navigation("Author");
                });

            modelBuilder.Entity("MudSharp.Models.Dream", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "CanDreamProg")
                        .WithMany("DreamsCanDreamProg")
                        .HasForeignKey("CanDreamProgId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Dreams_FutureProgs_CanDream");

                    b.HasOne("MudSharp.Models.FutureProg", "OnDreamProg")
                        .WithMany("DreamsOnDreamProg")
                        .HasForeignKey("OnDreamProgId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Dreams_FutureProgs_OnDream");

                    b.HasOne("MudSharp.Models.FutureProg", "OnWakeDuringDreamingProg")
                        .WithMany("DreamsOnWakeDuringDreamingProg")
                        .HasForeignKey("OnWakeDuringDreamingProgId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Dreams_FutureProgs_OnWake");

                    b.Navigation("CanDreamProg");

                    b.Navigation("OnDreamProg");

                    b.Navigation("OnWakeDuringDreamingProg");
                });

            modelBuilder.Entity("MudSharp.Models.DreamPhase", b =>
                {
                    b.HasOne("MudSharp.Models.Dream", "Dream")
                        .WithMany("DreamPhases")
                        .HasForeignKey("DreamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Dream_Phases_Dreams");

                    b.Navigation("Dream");
                });

            modelBuilder.Entity("MudSharp.Models.DreamsAlreadyDreamt", b =>
                {
                    b.HasOne("MudSharp.Models.Character", "Character")
                        .WithMany("DreamsAlreadyDreamt")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Dreams_Dreamt_Characters");

                    b.HasOne("MudSharp.Models.Dream", "Dream")
                        .WithMany("DreamsAlreadyDreamt")
                        .HasForeignKey("DreamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Dreams_Dreamt_Dreams");

                    b.Navigation("Character");

                    b.Navigation("Dream");
                });

            modelBuilder.Entity("MudSharp.Models.DreamsCharacters", b =>
                {
                    b.HasOne("MudSharp.Models.Character", "Character")
                        .WithMany("DreamsCharacters")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Dreams_Characters_Characters");

                    b.HasOne("MudSharp.Models.Dream", "Dream")
                        .WithMany("DreamsCharacters")
                        .HasForeignKey("DreamId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Dreams_Characters_Dreams");

                    b.Navigation("Character");

                    b.Navigation("Dream");
                });

            modelBuilder.Entity("MudSharp.Models.DrugIntensity", b =>
                {
                    b.HasOne("MudSharp.Models.Drug", "Drug")
                        .WithMany("DrugsIntensities")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Drugs_DrugIntensities");

                    b.Navigation("Drug");
                });

            modelBuilder.Entity("MudSharp.Models.Dub", b =>
                {
                    b.HasOne("MudSharp.Models.Character", "Character")
                        .WithMany("Dubs")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Dubs_Characters");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("MudSharp.Models.EconomicZone", b =>
                {
                    b.HasOne("MudSharp.Models.Clan", "ControllingClan")
                        .WithMany("EconomicZones")
                        .HasForeignKey("ControllingClanId")
                        .HasConstraintName("FK_EconomicZones_ControllingClans");

                    b.HasOne("MudSharp.Models.Currency", "Currency")
                        .WithMany("EconomicZones")
                        .HasForeignKey("CurrencyId")
                        .IsRequired()
                        .HasConstraintName("FK_EconomicZones_Currencies");

                    b.HasOne("MudSharp.Models.FinancialPeriod", "CurrentFinancialPeriod")
                        .WithMany("EconomicZones")
                        .HasForeignKey("CurrentFinancialPeriodId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_EconomicZones_FinancialPeriods");

                    b.HasOne("MudSharp.Models.Calendar", "ReferenceCalendar")
                        .WithMany("EconomicZones")
                        .HasForeignKey("ReferenceCalendarId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_EconomicZones_Calendars");

                    b.HasOne("MudSharp.Models.Clock", "ReferenceClock")
                        .WithMany("EconomicZones")
                        .HasForeignKey("ReferenceClockId")
                        .IsRequired()
                        .HasConstraintName("FK_EconomicZones_Clocks");

                    b.HasOne("MudSharp.Models.Timezone", "ReferenceClockNavigation")
                        .WithMany("EconomicZones")
                        .HasForeignKey("ReferenceClockId")
                        .IsRequired()
                        .HasConstraintName("FK_EconomicZones_Timezones");

                    b.Navigation("ControllingClan");

                    b.Navigation("Currency");

                    b.Navigation("CurrentFinancialPeriod");

                    b.Navigation("ReferenceCalendar");

                    b.Navigation("ReferenceClock");

                    b.Navigation("ReferenceClockNavigation");
                });

            modelBuilder.Entity("MudSharp.Models.EconomicZoneRevenue", b =>
                {
                    b.HasOne("MudSharp.Models.EconomicZone", "EconomicZone")
                        .WithMany("EconomicZoneRevenues")
                        .HasForeignKey("EconomicZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EconomicZoneRevenues");

                    b.HasOne("MudSharp.Models.FinancialPeriod", "FinancialPeriod")
                        .WithMany("EconomicZoneRevenues")
                        .HasForeignKey("FinancialPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EconomicZoneRevenues_FinancialPeriods");

                    b.Navigation("EconomicZone");

                    b.Navigation("FinancialPeriod");
                });

            modelBuilder.Entity("MudSharp.Models.EconomicZoneShopTax", b =>
                {
                    b.HasOne("MudSharp.Models.EconomicZone", "EconomicZone")
                        .WithMany("EconomicZoneShopTaxes")
                        .HasForeignKey("EconomicZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EconomicZoneShopTaxes_EconomicZones");

                    b.HasOne("MudSharp.Models.Shop", "Shop")
                        .WithMany("EconomicZoneShopTaxes")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EconomicZoneShopTaxes_Shops");

                    b.Navigation("EconomicZone");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("MudSharp.Models.EconomicZoneTax", b =>
                {
                    b.HasOne("MudSharp.Models.EconomicZone", "EconomicZone")
                        .WithMany("EconomicZoneTaxes")
                        .HasForeignKey("EconomicZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EconomicZoneTaxes_EconomicZones");

                    b.HasOne("MudSharp.Models.FutureProg", "MerchandiseFilterProg")
                        .WithMany()
                        .HasForeignKey("MerchandiseFilterProgId")
                        .HasConstraintName("FK_EconomicZoneTaxes_FutureProgs");

                    b.Navigation("EconomicZone");

                    b.Navigation("MerchandiseFilterProg");
                });

            modelBuilder.Entity("MudSharp.Models.Election", b =>
                {
                    b.HasOne("MudSharp.Models.Appointment", "Appointment")
                        .WithMany("Elections")
                        .HasForeignKey("AppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Elections_Appointments");

                    b.Navigation("Appointment");
                });

            modelBuilder.Entity("MudSharp.Models.ElectionNominee", b =>
                {
                    b.HasOne("MudSharp.Models.Election", "Election")
                        .WithMany("ElectionNominees")
                        .HasForeignKey("ElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ElectionsNominees_Elections");

                    b.HasOne("MudSharp.Models.ClanMembership", "Nominee")
                        .WithMany()
                        .HasForeignKey("NomineeClanId", "NomineeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ElectionsNominees_ClanMemberships");

                    b.Navigation("Election");

                    b.Navigation("Nominee");
                });

            modelBuilder.Entity("MudSharp.Models.ElectionVote", b =>
                {
                    b.HasOne("MudSharp.Models.Election", "Election")
                        .WithMany("ElectionVotes")
                        .HasForeignKey("ElectionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ElectionsVotes_Elections");

                    b.HasOne("MudSharp.Models.ClanMembership", "Nominee")
                        .WithMany()
                        .HasForeignKey("NomineeClanId", "NomineeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ElectionsVotes_Nominees");

                    b.HasOne("MudSharp.Models.ClanMembership", "Voter")
                        .WithMany()
                        .HasForeignKey("VoterClanId", "VoterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ElectionsVotes_Voters");

                    b.Navigation("Election");

                    b.Navigation("Nominee");

                    b.Navigation("Voter");
                });

            modelBuilder.Entity("MudSharp.Models.EnforcementAuthoritiesAccusableClasses", b =>
                {
                    b.HasOne("MudSharp.Models.EnforcementAuthority", "EnforcementAuthority")
                        .WithMany("EnforcementAuthoritiesAccusableClasses")
                        .HasForeignKey("EnforcementAuthorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EnforcementAuthorities_AccusableClasses_Enforce");

                    b.HasOne("MudSharp.Models.LegalClass", "LegalClass")
                        .WithMany("EnforcementAuthoritiesAccusableClasses")
                        .HasForeignKey("LegalClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EnforcementAuthorities_AccusableClasses_LegalClasses");

                    b.Navigation("EnforcementAuthority");

                    b.Navigation("LegalClass");
                });

            modelBuilder.Entity("MudSharp.Models.EnforcementAuthoritiesArrestableLegalClasses", b =>
                {
                    b.HasOne("MudSharp.Models.EnforcementAuthority", "EnforcementAuthority")
                        .WithMany("EnforcementAuthoritiesArrestableLegalClasses")
                        .HasForeignKey("EnforcementAuthorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EnforcementAuthoritiesArrestableLegalClasses_Enforce");

                    b.HasOne("MudSharp.Models.LegalClass", "LegalClass")
                        .WithMany("EnforcementAuthoritiesArrestableClasses")
                        .HasForeignKey("LegalClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EnforcementAuthoritiesArrestableLegalClasses_LegalClasses");

                    b.Navigation("EnforcementAuthority");

                    b.Navigation("LegalClass");
                });

            modelBuilder.Entity("MudSharp.Models.EnforcementAuthority", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "FilterProg")
                        .WithMany("EnforcementAuthorities")
                        .HasForeignKey("FilterProgId")
                        .HasConstraintName("FK_EnforcementAuthorities_FutureProgs");

                    b.HasOne("MudSharp.Models.LegalAuthority", "LegalAuthority")
                        .WithMany("EnforcementAuthorities")
                        .HasForeignKey("LegalAuthorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EnforcementAuthorities_LegalAuthorities");

                    b.Navigation("FilterProg");

                    b.Navigation("LegalAuthority");
                });

            modelBuilder.Entity("MudSharp.Models.EnforcementAuthorityParentAuthority", b =>
                {
                    b.HasOne("MudSharp.Models.EnforcementAuthority", "Child")
                        .WithMany("EnforcementAuthoritiesParentAuthoritiesChild")
                        .HasForeignKey("ChildId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EnforcementAuthorities_ParentAuthorities_Child");

                    b.HasOne("MudSharp.Models.EnforcementAuthority", "Parent")
                        .WithMany("EnforcementAuthoritiesParentAuthoritiesParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EnforcementAuthorities_ParentAuthorities_Parent");

                    b.Navigation("Child");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("MudSharp.Models.EntityDescriptionPattern", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "ApplicabilityProg")
                        .WithMany("EntityDescriptionPatterns")
                        .HasForeignKey("ApplicabilityProgId")
                        .HasConstraintName("FK_EntityDescriptionPatterns_FutureProgs");

                    b.Navigation("ApplicabilityProg");
                });

            modelBuilder.Entity("MudSharp.Models.EntityDescriptionPatternsEntityDescriptions", b =>
                {
                    b.HasOne("MudSharp.Models.EntityDescriptions", "EntityDescription")
                        .WithMany("EntityDescriptionPatternsEntityDescriptions")
                        .HasForeignKey("EntityDescriptionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_EDP_EntityDescriptions_EntityDescriptions");

                    b.HasOne("MudSharp.Models.EntityDescriptionPattern", "Pattern")
                        .WithMany("EntityDescriptionPatternsEntityDescriptions")
                        .HasForeignKey("PatternId")
                        .IsRequired()
                        .HasConstraintName("FK_EDP_EntityDescriptions_EntityDescriptionPatterns");

                    b.Navigation("EntityDescription");

                    b.Navigation("Pattern");
                });

            modelBuilder.Entity("MudSharp.Models.EthnicitiesCharacteristics", b =>
                {
                    b.HasOne("MudSharp.Models.CharacteristicDefinition", "CharacteristicDefinition")
                        .WithMany("EthnicitiesCharacteristics")
                        .HasForeignKey("CharacteristicDefinitionId")
                        .IsRequired()
                        .HasConstraintName("FK_Ethnicities_Characteristics_CharacteristicDefinitions");

                    b.HasOne("MudSharp.Models.CharacteristicProfile", "CharacteristicProfile")
                        .WithMany("EthnicitiesCharacteristics")
                        .HasForeignKey("CharacteristicProfileId")
                        .IsRequired()
                        .HasConstraintName("FK_Ethnicities_Characteristics_CharacteristicProfiles");

                    b.HasOne("MudSharp.Models.Ethnicity", "Ethnicity")
                        .WithMany("EthnicitiesCharacteristics")
                        .HasForeignKey("EthnicityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Ethnicities_Characteristics_Ethnicities");

                    b.Navigation("CharacteristicDefinition");

                    b.Navigation("CharacteristicProfile");

                    b.Navigation("Ethnicity");
                });

            modelBuilder.Entity("MudSharp.Models.EthnicitiesChargenResources", b =>
                {
                    b.HasOne("MudSharp.Models.ChargenResource", "ChargenResource")
                        .WithMany("EthnicitiesChargenResources")
                        .HasForeignKey("ChargenResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Ethnicity", "Ethnicity")
                        .WithMany("EthnicitiesChargenResources")
                        .HasForeignKey("EthnicityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChargenResource");

                    b.Navigation("Ethnicity");
                });

            modelBuilder.Entity("MudSharp.Models.Ethnicity", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "AvailabilityProg")
                        .WithMany("Ethnicities")
                        .HasForeignKey("AvailabilityProgId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Ethnicities_AvailabilityProg");

                    b.HasOne("MudSharp.Models.Race", "ParentRace")
                        .WithMany("Ethnicities")
                        .HasForeignKey("ParentRaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Ethnicities_Races");

                    b.HasOne("MudSharp.Models.PopulationBloodModel", "PopulationBloodModel")
                        .WithMany("Ethnicities")
                        .HasForeignKey("PopulationBloodModelId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Ethnicities_PopulationBloodModels");

                    b.Navigation("AvailabilityProg");

                    b.Navigation("ParentRace");

                    b.Navigation("PopulationBloodModel");
                });

            modelBuilder.Entity("MudSharp.Models.ExternalClanControl", b =>
                {
                    b.HasOne("MudSharp.Models.Appointment", "ControlledAppointment")
                        .WithMany("ExternalClanControlsControlledAppointment")
                        .HasForeignKey("ControlledAppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ECC_Appointments_Controlled");

                    b.HasOne("MudSharp.Models.Appointment", "ControllingAppointment")
                        .WithMany("ExternalClanControlsControllingAppointment")
                        .HasForeignKey("ControllingAppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_ECC_Appointments_Controlling");

                    b.HasOne("MudSharp.Models.Clan", "LiegeClan")
                        .WithMany("ExternalClanControlsLiegeClan")
                        .HasForeignKey("LiegeClanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ECC_Clans_Liege");

                    b.HasOne("MudSharp.Models.Clan", "VassalClan")
                        .WithMany("ExternalClanControlsVassalClan")
                        .HasForeignKey("VassalClanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ECC_Clans_Vassal");

                    b.Navigation("ControlledAppointment");

                    b.Navigation("ControllingAppointment");

                    b.Navigation("LiegeClan");

                    b.Navigation("VassalClan");
                });

            modelBuilder.Entity("MudSharp.Models.ExternalClanControlsAppointment", b =>
                {
                    b.HasOne("MudSharp.Models.ClanMembership", "ClanMemberships")
                        .WithMany("ExternalClanControlsAppointments")
                        .HasForeignKey("VassalClanId", "CharacterId")
                        .IsRequired()
                        .HasConstraintName("FK_ECC_Appointments_ClanMemberships");

                    b.HasOne("MudSharp.Models.ExternalClanControl", "ExternalClanControls")
                        .WithMany("ExternalClanControlsAppointments")
                        .HasForeignKey("VassalClanId", "LiegeClanId", "ControlledAppointmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ECC_Appointments_ExternalClanControls");

                    b.Navigation("ClanMemberships");

                    b.Navigation("ExternalClanControls");
                });

            modelBuilder.Entity("MudSharp.Models.FinancialPeriod", b =>
                {
                    b.HasOne("MudSharp.Models.EconomicZone", "EconomicZone")
                        .WithMany("FinancialPeriods")
                        .HasForeignKey("EconomicZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FinancialPeriods_EconomicZones");

                    b.Navigation("EconomicZone");
                });

            modelBuilder.Entity("MudSharp.Models.Foragable", b =>
                {
                    b.HasOne("MudSharp.Models.EditableItem", "EditableItem")
                        .WithMany("Foragables")
                        .HasForeignKey("EditableItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Foragables_EditableItems");

                    b.Navigation("EditableItem");
                });

            modelBuilder.Entity("MudSharp.Models.ForagableProfile", b =>
                {
                    b.HasOne("MudSharp.Models.EditableItem", "EditableItem")
                        .WithMany("ForagableProfiles")
                        .HasForeignKey("EditableItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ForagableProfiles_EditableItems");

                    b.Navigation("EditableItem");
                });

            modelBuilder.Entity("MudSharp.Models.ForagableProfilesForagables", b =>
                {
                    b.HasOne("MudSharp.Models.ForagableProfile", "ForagableProfile")
                        .WithMany("ForagableProfilesForagables")
                        .HasForeignKey("ForagableProfileId", "ForagableProfileRevisionNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ForagableProfiles_Foragables_ForagableProfiles");

                    b.Navigation("ForagableProfile");
                });

            modelBuilder.Entity("MudSharp.Models.ForagableProfilesHourlyYieldGains", b =>
                {
                    b.HasOne("MudSharp.Models.ForagableProfile", "ForagableProfile")
                        .WithMany("ForagableProfilesHourlyYieldGains")
                        .HasForeignKey("ForagableProfileId", "ForagableProfileRevisionNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ForagableProfiles_HourlyYieldGains_ForagableProfiles");

                    b.Navigation("ForagableProfile");
                });

            modelBuilder.Entity("MudSharp.Models.ForagableProfilesMaximumYields", b =>
                {
                    b.HasOne("MudSharp.Models.ForagableProfile", "ForagableProfile")
                        .WithMany("ForagableProfilesMaximumYields")
                        .HasForeignKey("ForagableProfileId", "ForagableProfileRevisionNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ForagableProfiles_MaximumYields_ForagableProfiles");

                    b.Navigation("ForagableProfile");
                });

            modelBuilder.Entity("MudSharp.Models.FutureProgsParameter", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "FutureProg")
                        .WithMany("FutureProgsParameters")
                        .HasForeignKey("FutureProgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_FutureProgs_Parameters_FutureProgs");

                    b.Navigation("FutureProg");
                });

            modelBuilder.Entity("MudSharp.Models.GPTMessage", b =>
                {
                    b.HasOne("MudSharp.Models.Character", "Character")
                        .WithMany("GPTMessages")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_GPTMessages_Characters");

                    b.HasOne("MudSharp.Models.GPTThread", "GPTThread")
                        .WithMany("Messages")
                        .HasForeignKey("GPTThreadId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GPTMessages_GPTThreads");

                    b.Navigation("Character");

                    b.Navigation("GPTThread");
                });

            modelBuilder.Entity("MudSharp.Models.GameItem", b =>
                {
                    b.HasOne("MudSharp.Models.GameItem", "Container")
                        .WithMany("InverseContainer")
                        .HasForeignKey("ContainerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_GameItems_GameItems_Containers");

                    b.Navigation("Container");
                });

            modelBuilder.Entity("MudSharp.Models.GameItemComponent", b =>
                {
                    b.HasOne("MudSharp.Models.GameItem", "GameItem")
                        .WithMany("GameItemComponents")
                        .HasForeignKey("GameItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GameItemComponents_GameItems");

                    b.Navigation("GameItem");
                });

            modelBuilder.Entity("MudSharp.Models.GameItemComponentProto", b =>
                {
                    b.HasOne("MudSharp.Models.EditableItem", "EditableItem")
                        .WithMany("GameItemComponentProtos")
                        .HasForeignKey("EditableItemId")
                        .IsRequired()
                        .HasConstraintName("FK_GameItemComponentProtos_EditableItems");

                    b.Navigation("EditableItem");
                });

            modelBuilder.Entity("MudSharp.Models.GameItemMagicResource", b =>
                {
                    b.HasOne("MudSharp.Models.GameItem", "GameItem")
                        .WithMany("GameItemsMagicResources")
                        .HasForeignKey("GameItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GameItems_MagicResources_GameItems");

                    b.HasOne("MudSharp.Models.MagicResource", "MagicResource")
                        .WithMany("GameItemsMagicResources")
                        .HasForeignKey("MagicResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GameItems_MagicResources_MagicResources");

                    b.Navigation("GameItem");

                    b.Navigation("MagicResource");
                });

            modelBuilder.Entity("MudSharp.Models.GameItemProto", b =>
                {
                    b.HasOne("MudSharp.Models.EditableItem", "EditableItem")
                        .WithMany("GameItemProtos")
                        .HasForeignKey("EditableItemId")
                        .IsRequired()
                        .HasConstraintName("FK_GameItemProtos_EditableItems");

                    b.HasOne("MudSharp.Models.ItemGroup", "ItemGroup")
                        .WithMany("GameItemProtos")
                        .HasForeignKey("ItemGroupId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_GameItemProtos_ItemGroups");

                    b.Navigation("EditableItem");

                    b.Navigation("ItemGroup");
                });

            modelBuilder.Entity("MudSharp.Models.GameItemProtoExtraDescription", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "ApplicabilityProg")
                        .WithMany()
                        .HasForeignKey("ApplicabilityProgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GameItemProtoExtraDescriptions_FutureProgs");

                    b.HasOne("MudSharp.Models.GameItemProto", "GameItemProto")
                        .WithMany("ExtraDescriptions")
                        .HasForeignKey("GameItemProtoId", "GameItemProtoRevisionNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GameItemProtoExtraDescriptions_GameItemProtos");

                    b.Navigation("ApplicabilityProg");

                    b.Navigation("GameItemProto");
                });

            modelBuilder.Entity("MudSharp.Models.GameItemProtosDefaultVariable", b =>
                {
                    b.HasOne("MudSharp.Models.GameItemProto", "GameItemProto")
                        .WithMany("GameItemProtosDefaultVariables")
                        .HasForeignKey("GameItemProtoId", "GameItemProtoRevNum")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GameItemProtos_DefaultValues_GameItemProtos");

                    b.Navigation("GameItemProto");
                });

            modelBuilder.Entity("MudSharp.Models.GameItemProtosGameItemComponentProtos", b =>
                {
                    b.HasOne("MudSharp.Models.GameItemComponentProto", "GameItemComponent")
                        .WithMany("GameItemProtosGameItemComponentProtos")
                        .HasForeignKey("GameItemComponentProtoId", "GameItemComponentRevision")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GIPGICP_GameItemComponentProtos");

                    b.HasOne("MudSharp.Models.GameItemProto", "GameItemProto")
                        .WithMany("GameItemProtosGameItemComponentProtos")
                        .HasForeignKey("GameItemProtoId", "GameItemProtoRevision")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GIPGICP_GameItemProtos");

                    b.Navigation("GameItemComponent");

                    b.Navigation("GameItemProto");
                });

            modelBuilder.Entity("MudSharp.Models.GameItemProtosOnLoadProgs", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "FutureProg")
                        .WithMany("GameItemProtosOnLoadProgs")
                        .HasForeignKey("FutureProgId")
                        .IsRequired()
                        .HasConstraintName("FK_GameItemProtos_OnLoadProgs_FutureProgs");

                    b.HasOne("MudSharp.Models.GameItemProto", "GameItemProto")
                        .WithMany("GameItemProtosOnLoadProgs")
                        .HasForeignKey("GameItemProtoId", "GameItemProtoRevisionNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GameItemProtos_OnLoadProgs_GameItemProtos");

                    b.Navigation("FutureProg");

                    b.Navigation("GameItemProto");
                });

            modelBuilder.Entity("MudSharp.Models.GameItemProtosTags", b =>
                {
                    b.HasOne("MudSharp.Models.Tag", "Tag")
                        .WithMany("GameItemProtosTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GameItemProtos_Tags_Tags");

                    b.HasOne("MudSharp.Models.GameItemProto", "GameItemProto")
                        .WithMany("GameItemProtosTags")
                        .HasForeignKey("GameItemProtoId", "GameItemProtoRevisionNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GameItemProtos_Tags_GameItemProtos");

                    b.Navigation("GameItemProto");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("MudSharp.Models.GameItemSkin", b =>
                {
                    b.HasOne("MudSharp.Models.EditableItem", "EditableItem")
                        .WithMany()
                        .HasForeignKey("EditableItemId")
                        .IsRequired()
                        .HasConstraintName("FK_GameItemSkins_EditableItems");

                    b.Navigation("EditableItem");
                });

            modelBuilder.Entity("MudSharp.Models.Gas", b =>
                {
                    b.HasOne("MudSharp.Models.Gas", "CountAs")
                        .WithMany("InverseCountAs")
                        .HasForeignKey("CountAsId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Gases_Gases");

                    b.HasOne("MudSharp.Models.Drug", "Drug")
                        .WithMany()
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Gases_Drugs");

                    b.HasOne("MudSharp.Models.Liquid", "Precipitate")
                        .WithMany("Gases")
                        .HasForeignKey("PrecipitateId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Gases_Liquids");

                    b.Navigation("CountAs");

                    b.Navigation("Drug");

                    b.Navigation("Precipitate");
                });

            modelBuilder.Entity("MudSharp.Models.GasesTags", b =>
                {
                    b.HasOne("MudSharp.Models.Gas", "Gas")
                        .WithMany("GasesTags")
                        .HasForeignKey("GasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Gases_Tags_Gases");

                    b.HasOne("MudSharp.Models.Tag", "Tag")
                        .WithMany("GasesTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Gases_Tags_Tags");

                    b.Navigation("Gas");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("MudSharp.Models.GroupAi", b =>
                {
                    b.HasOne("MudSharp.Models.GroupAiTemplate", "GroupAiTemplate")
                        .WithMany("GroupAis")
                        .HasForeignKey("GroupAiTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_GroupAIs_GroupAITemplates");

                    b.Navigation("GroupAiTemplate");
                });

            modelBuilder.Entity("MudSharp.Models.Guest", b =>
                {
                    b.HasOne("MudSharp.Models.Character", "Character")
                        .WithOne("Guest")
                        .HasForeignKey("MudSharp.Models.Guest", "CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Guests_Characters");

                    b.Navigation("Character");
                });

            modelBuilder.Entity("MudSharp.Models.Helpfile", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "Rule")
                        .WithMany("Helpfiles")
                        .HasForeignKey("RuleId")
                        .HasConstraintName("FK_Helpfiles_FutureProgs");

                    b.Navigation("Rule");
                });

            modelBuilder.Entity("MudSharp.Models.HelpfilesExtraText", b =>
                {
                    b.HasOne("MudSharp.Models.Helpfile", "Helpfile")
                        .WithMany("HelpfilesExtraTexts")
                        .HasForeignKey("HelpfileId")
                        .IsRequired()
                        .HasConstraintName("FK_Helpfiles_ExtraTexts_Helpfiles");

                    b.HasOne("MudSharp.Models.FutureProg", "Rule")
                        .WithMany("HelpfilesExtraTexts")
                        .HasForeignKey("RuleId")
                        .IsRequired()
                        .HasConstraintName("FK_Helpfiles_ExtraTexts_FutureProgs");

                    b.Navigation("Helpfile");

                    b.Navigation("Rule");
                });

            modelBuilder.Entity("MudSharp.Models.HooksPerceivable", b =>
                {
                    b.HasOne("MudSharp.Models.Body", "Body")
                        .WithMany("HooksPerceivables")
                        .HasForeignKey("BodyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Hooks_Perceivables_Bodies");

                    b.HasOne("MudSharp.Models.Cell", "Cell")
                        .WithMany("HooksPerceivables")
                        .HasForeignKey("CellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Hooks_Perceivables_Cells");

                    b.HasOne("MudSharp.Models.Character", "Character")
                        .WithMany("HooksPerceivables")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Hooks_Perceivables_Characters");

                    b.HasOne("MudSharp.Models.GameItem", "GameItem")
                        .WithMany("HooksPerceivables")
                        .HasForeignKey("GameItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Hooks_Perceivables_GameItems");

                    b.HasOne("MudSharp.Models.Hooks", "Hook")
                        .WithMany("HooksPerceivables")
                        .HasForeignKey("HookId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Hooks_Perceivables_Hooks");

                    b.HasOne("MudSharp.Models.Shard", "Shard")
                        .WithMany("HooksPerceivables")
                        .HasForeignKey("ShardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Hooks_Perceivables_Shards");

                    b.HasOne("MudSharp.Models.Zone", "Zone")
                        .WithMany("HooksPerceivables")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Hooks_Perceivables_Zones");

                    b.Navigation("Body");

                    b.Navigation("Cell");

                    b.Navigation("Character");

                    b.Navigation("GameItem");

                    b.Navigation("Hook");

                    b.Navigation("Shard");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("MudSharp.Models.Infection", b =>
                {
                    b.HasOne("MudSharp.Models.BodypartProto", "Bodypart")
                        .WithMany("Infections")
                        .HasForeignKey("BodypartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Infections_Bodyparts");

                    b.HasOne("MudSharp.Models.Body", "Owner")
                        .WithMany("Infections")
                        .HasForeignKey("OwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Infections_Bodies");

                    b.HasOne("MudSharp.Models.Wound", "Wound")
                        .WithMany("Infections")
                        .HasForeignKey("WoundId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Infections_Wounds");

                    b.Navigation("Bodypart");

                    b.Navigation("Owner");

                    b.Navigation("Wound");
                });

            modelBuilder.Entity("MudSharp.Models.ItemGroupForm", b =>
                {
                    b.HasOne("MudSharp.Models.ItemGroup", "ItemGroup")
                        .WithMany("ItemGroupForms")
                        .HasForeignKey("ItemGroupId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ItemGroupForms_ItemGroups");

                    b.Navigation("ItemGroup");
                });

            modelBuilder.Entity("MudSharp.Models.JobFindingLocation", b =>
                {
                    b.HasOne("MudSharp.Models.Cell", "Cell")
                        .WithMany()
                        .HasForeignKey("CellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_JobFindingLocations_Cells");

                    b.HasOne("MudSharp.Models.EconomicZone", "EconomicZone")
                        .WithMany("JobFindingLocations")
                        .HasForeignKey("EconomicZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_JobFindingLocations_EconomicZones");

                    b.Navigation("Cell");

                    b.Navigation("EconomicZone");
                });

            modelBuilder.Entity("MudSharp.Models.JobListing", b =>
                {
                    b.HasOne("MudSharp.Models.Appointment", "Appointment")
                        .WithMany()
                        .HasForeignKey("AppointmentId")
                        .HasConstraintName("FK_JobListings_Appointments");

                    b.HasOne("MudSharp.Models.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountId")
                        .HasConstraintName("FK_JobListings_BankAccounts");

                    b.HasOne("MudSharp.Models.Clan", "Clan")
                        .WithMany()
                        .HasForeignKey("ClanId")
                        .HasConstraintName("FK_JobListings_Clans");

                    b.HasOne("MudSharp.Models.EconomicZone", "EconomicZone")
                        .WithMany("JobListings")
                        .HasForeignKey("EconomicZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_JobListings_EconomicZones");

                    b.HasOne("MudSharp.Models.FutureProg", "EligibilityProg")
                        .WithMany()
                        .HasForeignKey("EligibilityProgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_JobListings_FutureProgs");

                    b.HasOne("MudSharp.Models.Paygrade", "Paygrade")
                        .WithMany()
                        .HasForeignKey("PaygradeId")
                        .HasConstraintName("FK_JobListings_Paygrades");

                    b.HasOne("MudSharp.Models.Rank", "Rank")
                        .WithMany()
                        .HasForeignKey("RankId")
                        .HasConstraintName("FK_JobListings_Ranks");

                    b.HasOne("MudSharp.Models.ActiveProject", "RequiredProject")
                        .WithMany()
                        .HasForeignKey("RequiredProjectId")
                        .HasConstraintName("FK_JobListings_ActiveProjects");

                    b.HasOne("MudSharp.Models.Project", "PersonalProject")
                        .WithMany()
                        .HasForeignKey("PersonalProjectId", "PersonalProjectRevisionNumber")
                        .HasConstraintName("FK_JobListings_Projects");

                    b.HasOne("MudSharp.Models.ActiveProjectLabour", "RequiredProjectLabour")
                        .WithMany()
                        .HasForeignKey("RequiredProjectId", "RequiredProjectLabourId")
                        .HasConstraintName("FK_JobListings_ActiveProjectLabours");

                    b.Navigation("Appointment");

                    b.Navigation("BankAccount");

                    b.Navigation("Clan");

                    b.Navigation("EconomicZone");

                    b.Navigation("EligibilityProg");

                    b.Navigation("Paygrade");

                    b.Navigation("PersonalProject");

                    b.Navigation("Rank");

                    b.Navigation("RequiredProject");

                    b.Navigation("RequiredProjectLabour");
                });

            modelBuilder.Entity("MudSharp.Models.Knowledge", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "CanAcquireProg")
                        .WithMany("KnowledgesCanAcquireProg")
                        .HasForeignKey("CanAcquireProgId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_KNOWLEDGES_FUTUREPROGS_ACQUIRE");

                    b.HasOne("MudSharp.Models.FutureProg", "CanLearnProg")
                        .WithMany("KnowledgesCanLearnProg")
                        .HasForeignKey("CanLearnProgId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_KNOWLEDGES_FUTUREPROGS_LEARN");

                    b.Navigation("CanAcquireProg");

                    b.Navigation("CanLearnProg");
                });

            modelBuilder.Entity("MudSharp.Models.KnowledgesCosts", b =>
                {
                    b.HasOne("MudSharp.Models.ChargenResource", "ChargenResource")
                        .WithMany("KnowledgesCosts")
                        .HasForeignKey("ChargenResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_KnowledgesCosts_ChargenResources");

                    b.HasOne("MudSharp.Models.Knowledge", "Knowledge")
                        .WithMany("KnowledgesCosts")
                        .HasForeignKey("KnowledgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_KnowledgesCosts_Knowledges");

                    b.Navigation("ChargenResource");

                    b.Navigation("Knowledge");
                });

            modelBuilder.Entity("MudSharp.Models.Language", b =>
                {
                    b.HasOne("MudSharp.Models.Accent", "DefaultLearnerAccent")
                        .WithMany("Languages")
                        .HasForeignKey("DefaultLearnerAccentId")
                        .HasConstraintName("FK_Languages_Accents");

                    b.HasOne("MudSharp.Models.LanguageDifficultyModels", "DifficultyModelNavigation")
                        .WithMany("Languages")
                        .HasForeignKey("DifficultyModel")
                        .IsRequired()
                        .HasConstraintName("FK_Languages_LanguageDifficultyModels");

                    b.HasOne("MudSharp.Models.TraitDefinition", "LinkedTrait")
                        .WithMany("Languages")
                        .HasForeignKey("LinkedTraitId")
                        .IsRequired()
                        .HasConstraintName("FK_Languages_TraitDefinitions");

                    b.Navigation("DefaultLearnerAccent");

                    b.Navigation("DifficultyModelNavigation");

                    b.Navigation("LinkedTrait");
                });

            modelBuilder.Entity("MudSharp.Models.Law", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "LawAppliesProg")
                        .WithMany("Laws")
                        .HasForeignKey("LawAppliesProgId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Laws_FutureProgs");

                    b.HasOne("MudSharp.Models.LegalAuthority", "LegalAuthority")
                        .WithMany("Laws")
                        .HasForeignKey("LegalAuthorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Laws_LegalAuthority");

                    b.Navigation("LawAppliesProg");

                    b.Navigation("LegalAuthority");
                });

            modelBuilder.Entity("MudSharp.Models.LawsOffenderClasses", b =>
                {
                    b.HasOne("MudSharp.Models.Law", "Law")
                        .WithMany("LawsOffenderClasses")
                        .HasForeignKey("LawId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Laws_OffenderClasses_Laws");

                    b.HasOne("MudSharp.Models.LegalClass", "LegalClass")
                        .WithMany("LawsOffenderClasses")
                        .HasForeignKey("LegalClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Laws_OffenderClasses_LegalClasses");

                    b.Navigation("Law");

                    b.Navigation("LegalClass");
                });

            modelBuilder.Entity("MudSharp.Models.LawsVictimClasses", b =>
                {
                    b.HasOne("MudSharp.Models.Law", "Law")
                        .WithMany("LawsVictimClasses")
                        .HasForeignKey("LawId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Laws_VictimClasses_Laws");

                    b.HasOne("MudSharp.Models.LegalClass", "LegalClass")
                        .WithMany("LawsVictimClasses")
                        .HasForeignKey("LegalClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Laws_VictimClasses_LegalClasses");

                    b.Navigation("Law");

                    b.Navigation("LegalClass");
                });

            modelBuilder.Entity("MudSharp.Models.LegalAuthoritiesZones", b =>
                {
                    b.HasOne("MudSharp.Models.LegalAuthority", "LegalAuthority")
                        .WithMany("LegalAuthoritiesZones")
                        .HasForeignKey("LegalAuthorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LegalAuthorities_Zones_LegalAuthorities");

                    b.HasOne("MudSharp.Models.Zone", "Zone")
                        .WithMany("LegalAuthoritiesZones")
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LegalAuthorities_Zones_Zones");

                    b.Navigation("LegalAuthority");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("MudSharp.Models.LegalAuthority", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "BailCalculationProg")
                        .WithMany()
                        .HasForeignKey("BailCalculationProgId")
                        .HasConstraintName("FK_LegalAuthorities_FutureprogsBailCalc");

                    b.HasOne("MudSharp.Models.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountId");

                    b.HasOne("MudSharp.Models.Cell", "CourtLocation")
                        .WithMany()
                        .HasForeignKey("CourtLocationId")
                        .HasConstraintName("FK_LegalAuthorities_CourtroomCell");

                    b.HasOne("MudSharp.Models.Currency", "Currency")
                        .WithMany("LegalAuthorities")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LegalAuthorities_Currencies");

                    b.HasOne("MudSharp.Models.Cell", "EnforcerStowingLocation")
                        .WithMany()
                        .HasForeignKey("EnforcerStowingLocationId")
                        .HasConstraintName("FK_LegalAuthorities_StowingCells");

                    b.HasOne("MudSharp.Models.Cell", "JailLocation")
                        .WithMany()
                        .HasForeignKey("JailLocationId")
                        .HasConstraintName("FK_LegalAuthorities_PrisonJailCells");

                    b.HasOne("MudSharp.Models.Cell", "MarshallingLocation")
                        .WithMany()
                        .HasForeignKey("MarshallingLocationId")
                        .HasConstraintName("FK_LegalAuthorities_MarshallingCells");

                    b.HasOne("MudSharp.Models.FutureProg", "OnHoldProg")
                        .WithMany()
                        .HasForeignKey("OnHoldProgId")
                        .HasConstraintName("FK_LegalAuthorities_FutureprogsHold");

                    b.HasOne("MudSharp.Models.FutureProg", "OnImprisonProg")
                        .WithMany()
                        .HasForeignKey("OnImprisonProgId")
                        .HasConstraintName("FK_LegalAuthorities_FutureprogsImprison");

                    b.HasOne("MudSharp.Models.FutureProg", "OnReleaseProg")
                        .WithMany()
                        .HasForeignKey("OnReleaseProgId")
                        .HasConstraintName("FK_LegalAuthorities_FutureprogsRelease");

                    b.HasOne("MudSharp.Models.Cell", "PreparingLocation")
                        .WithMany()
                        .HasForeignKey("PreparingLocationId")
                        .HasConstraintName("FK_LegalAuthorities_PreparingCells");

                    b.HasOne("MudSharp.Models.Cell", "PrisonBelongingsLocation")
                        .WithMany()
                        .HasForeignKey("PrisonBelongingsLocationId")
                        .HasConstraintName("FK_LegalAuthorities_PrisonBelongingsCells");

                    b.HasOne("MudSharp.Models.Cell", "PrisonLocation")
                        .WithMany()
                        .HasForeignKey("PrisonLocationId")
                        .HasConstraintName("FK_LegalAuthorities_PrisonCells");

                    b.HasOne("MudSharp.Models.Cell", "PrisonReleaseLocation")
                        .WithMany()
                        .HasForeignKey("PrisonReleaseLocationId")
                        .HasConstraintName("FK_LegalAuthorities_PrisonReleaseCells");

                    b.Navigation("BailCalculationProg");

                    b.Navigation("BankAccount");

                    b.Navigation("CourtLocation");

                    b.Navigation("Currency");

                    b.Navigation("EnforcerStowingLocation");

                    b.Navigation("JailLocation");

                    b.Navigation("MarshallingLocation");

                    b.Navigation("OnHoldProg");

                    b.Navigation("OnImprisonProg");

                    b.Navigation("OnReleaseProg");

                    b.Navigation("PreparingLocation");

                    b.Navigation("PrisonBelongingsLocation");

                    b.Navigation("PrisonLocation");

                    b.Navigation("PrisonReleaseLocation");
                });

            modelBuilder.Entity("MudSharp.Models.LegalAuthorityCells", b =>
                {
                    b.HasOne("MudSharp.Models.Cell", "Cell")
                        .WithMany()
                        .HasForeignKey("CellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LegalAuthoritiesCells_Cells");

                    b.HasOne("MudSharp.Models.LegalAuthority", "LegalAuthority")
                        .WithMany("LegalAuthorityCells")
                        .HasForeignKey("LegalAuthorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LegalAuthoritiesCells_LegalAuthorities");

                    b.Navigation("Cell");

                    b.Navigation("LegalAuthority");
                });

            modelBuilder.Entity("MudSharp.Models.LegalAuthorityFine", b =>
                {
                    b.HasOne("MudSharp.Models.Character", "Character")
                        .WithMany("Fines")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LegalAuthorityFines_Characters");

                    b.HasOne("MudSharp.Models.LegalAuthority", "LegalAuthority")
                        .WithMany("Fines")
                        .HasForeignKey("LegalAuthorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LegalAuthorityFines_LegalAuthorities");

                    b.Navigation("Character");

                    b.Navigation("LegalAuthority");
                });

            modelBuilder.Entity("MudSharp.Models.LegalAuthorityJailCell", b =>
                {
                    b.HasOne("MudSharp.Models.Cell", "Cell")
                        .WithMany()
                        .HasForeignKey("CellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LegalAuthoritiesCells_Cells_Jail");

                    b.HasOne("MudSharp.Models.LegalAuthority", "LegalAuthority")
                        .WithMany("LegalAuthorityJailCells")
                        .HasForeignKey("LegalAuthorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LegalAuthoritiesCells_LegalAuthorities_Jail");

                    b.Navigation("Cell");

                    b.Navigation("LegalAuthority");
                });

            modelBuilder.Entity("MudSharp.Models.LegalClass", b =>
                {
                    b.HasOne("MudSharp.Models.LegalAuthority", "LegalAuthority")
                        .WithMany("LegalClasses")
                        .HasForeignKey("LegalAuthorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LegalClasses_LegalAuthorities");

                    b.HasOne("MudSharp.Models.FutureProg", "MembershipProg")
                        .WithMany("LegalClasses")
                        .HasForeignKey("MembershipProgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LegalClasses_FutureProgs");

                    b.Navigation("LegalAuthority");

                    b.Navigation("MembershipProg");
                });

            modelBuilder.Entity("MudSharp.Models.Limb", b =>
                {
                    b.HasOne("MudSharp.Models.BodyProto", "RootBody")
                        .WithMany("Limbs")
                        .HasForeignKey("RootBodyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Limbs_BodyProtos");

                    b.HasOne("MudSharp.Models.BodypartProto", "RootBodypart")
                        .WithMany("Limbs")
                        .HasForeignKey("RootBodypartId")
                        .IsRequired()
                        .HasConstraintName("FK_Limbs_BodypartProto");

                    b.Navigation("RootBody");

                    b.Navigation("RootBodypart");
                });

            modelBuilder.Entity("MudSharp.Models.LimbBodypartProto", b =>
                {
                    b.HasOne("MudSharp.Models.BodypartProto", "BodypartProto")
                        .WithMany("LimbsBodypartProto")
                        .HasForeignKey("BodypartProtoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Limbs_BodypartProto_BodypartProto");

                    b.HasOne("MudSharp.Models.Limb", "Limb")
                        .WithMany("LimbsBodypartProto")
                        .HasForeignKey("LimbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Limbs_BodypartProto_Limbs");

                    b.Navigation("BodypartProto");

                    b.Navigation("Limb");
                });

            modelBuilder.Entity("MudSharp.Models.LimbsSpinalPart", b =>
                {
                    b.HasOne("MudSharp.Models.BodypartProto", "BodypartProto")
                        .WithMany("LimbsSpinalParts")
                        .HasForeignKey("BodypartProtoId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Limbs_SpinalParts_BodypartProtos");

                    b.HasOne("MudSharp.Models.Limb", "Limb")
                        .WithMany("LimbsSpinalParts")
                        .HasForeignKey("LimbId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Limbs_SpinalParts_Limbs");

                    b.Navigation("BodypartProto");

                    b.Navigation("Limb");
                });

            modelBuilder.Entity("MudSharp.Models.LineOfCreditAccount", b =>
                {
                    b.HasOne("MudSharp.Models.Character", "AccountOwner")
                        .WithMany()
                        .HasForeignKey("AccountOwnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LineOfCreditAccounts_Characters");

                    b.HasOne("MudSharp.Models.Shop", "Shop")
                        .WithMany("LineOfCreditAccounts")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LineOfCreditAccounts_Shops");

                    b.Navigation("AccountOwner");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("MudSharp.Models.LineOfCreditAccountUser", b =>
                {
                    b.HasOne("MudSharp.Models.Character", "AccountUser")
                        .WithMany()
                        .HasForeignKey("AccountUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LineOfCreditAccountUsers_Characters");

                    b.HasOne("MudSharp.Models.LineOfCreditAccount", "LineOfCreditAccount")
                        .WithMany("AccountUsers")
                        .HasForeignKey("LineOfCreditAccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LineOfCreditAccountUsers_LineOfCreditAccounts");

                    b.Navigation("AccountUser");

                    b.Navigation("LineOfCreditAccount");
                });

            modelBuilder.Entity("MudSharp.Models.Liquid", b =>
                {
                    b.HasOne("MudSharp.Models.Liquid", "CountAs")
                        .WithMany("InverseCountAs")
                        .HasForeignKey("CountAsId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Liquids_Liquids_CountasAs");

                    b.HasOne("MudSharp.Models.Material", "DriedResidue")
                        .WithMany("Liquids")
                        .HasForeignKey("DriedResidueId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Liquids_Materials");

                    b.HasOne("MudSharp.Models.Drug", "Drug")
                        .WithMany("Liquids")
                        .HasForeignKey("DrugId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Liquids_Drugs");

                    b.HasOne("MudSharp.Models.Gas", "GasForm")
                        .WithMany()
                        .HasForeignKey("GasFormId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Liquids_Gases");

                    b.HasOne("MudSharp.Models.Liquid", "Solvent")
                        .WithMany("InverseSolvent")
                        .HasForeignKey("SolventId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Liquids_Liquids");

                    b.Navigation("CountAs");

                    b.Navigation("DriedResidue");

                    b.Navigation("Drug");

                    b.Navigation("GasForm");

                    b.Navigation("Solvent");
                });

            modelBuilder.Entity("MudSharp.Models.LiquidsTags", b =>
                {
                    b.HasOne("MudSharp.Models.Liquid", "Liquid")
                        .WithMany("LiquidsTags")
                        .HasForeignKey("LiquidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Liquids_Tags_Liquids");

                    b.HasOne("MudSharp.Models.Tag", "Tag")
                        .WithMany("LiquidsTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Liquids_Tags_Tags");

                    b.Navigation("Liquid");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("MudSharp.Models.LoginIp", b =>
                {
                    b.HasOne("MudSharp.Models.Account", "Account")
                        .WithMany("LoginIps")
                        .HasForeignKey("AccountId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_LoginIPs_Accounts");

                    b.Navigation("Account");
                });

            modelBuilder.Entity("MudSharp.Models.MagicCapability", b =>
                {
                    b.HasOne("MudSharp.Models.MagicSchool", "MagicSchool")
                        .WithMany("MagicCapabilities")
                        .HasForeignKey("MagicSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MagicCapabilities_MagicSchools");

                    b.Navigation("MagicSchool");
                });

            modelBuilder.Entity("MudSharp.Models.MagicPower", b =>
                {
                    b.HasOne("MudSharp.Models.MagicSchool", "MagicSchool")
                        .WithMany("MagicPowers")
                        .HasForeignKey("MagicSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MagicPowers_MagicSchools");

                    b.Navigation("MagicSchool");
                });

            modelBuilder.Entity("MudSharp.Models.MagicSchool", b =>
                {
                    b.HasOne("MudSharp.Models.MagicSchool", "ParentSchool")
                        .WithMany("InverseParentSchool")
                        .HasForeignKey("ParentSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_MagicSchools_MagicSchools");

                    b.Navigation("ParentSchool");
                });

            modelBuilder.Entity("MudSharp.Models.MagicSpell", b =>
                {
                    b.HasOne("MudSharp.Models.TraitDefinition", "CastingTraitDefinition")
                        .WithMany()
                        .HasForeignKey("CastingTraitDefinitionId")
                        .HasConstraintName("FK_MagicSpells_TraitDefinitions_Casting");

                    b.HasOne("MudSharp.Models.TraitExpression", "EffectDurationExpression")
                        .WithMany()
                        .HasForeignKey("EffectDurationExpressionId")
                        .HasConstraintName("FK_MagicSpells_TraitExpressions");

                    b.HasOne("MudSharp.Models.MagicSchool", "MagicSchool")
                        .WithMany("MagicSpells")
                        .HasForeignKey("MagicSchoolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MagicSpells_MagicSchools");

                    b.HasOne("MudSharp.Models.TraitDefinition", "ResistingTraitDefinition")
                        .WithMany()
                        .HasForeignKey("ResistingTraitDefinitionId")
                        .HasConstraintName("FK_MagicSpells_TraitDefinitions_Resisting");

                    b.HasOne("MudSharp.Models.FutureProg", "SpellKnownProg")
                        .WithMany()
                        .HasForeignKey("SpellKnownProgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_MagicSpells_Futureprogs");

                    b.Navigation("CastingTraitDefinition");

                    b.Navigation("EffectDurationExpression");

                    b.Navigation("MagicSchool");

                    b.Navigation("ResistingTraitDefinition");

                    b.Navigation("SpellKnownProg");
                });

            modelBuilder.Entity("MudSharp.Models.Market", b =>
                {
                    b.HasOne("MudSharp.Models.EconomicZone", "EconomicZone")
                        .WithMany()
                        .HasForeignKey("EconomicZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("EconomicZone");
                });

            modelBuilder.Entity("MudSharp.Models.MarketInfluence", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "CharacterKnowsAboutInfluenceProg")
                        .WithMany()
                        .HasForeignKey("CharacterKnowsAboutInfluenceProgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Market", "Market")
                        .WithMany("Influences")
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.MarketInfluenceTemplate", "MarketInfluenceTemplate")
                        .WithMany()
                        .HasForeignKey("MarketInfluenceTemplateId");

                    b.Navigation("CharacterKnowsAboutInfluenceProg");

                    b.Navigation("Market");

                    b.Navigation("MarketInfluenceTemplate");
                });

            modelBuilder.Entity("MudSharp.Models.MarketInfluenceTemplate", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "CharacterKnowsAboutInfluenceProg")
                        .WithMany()
                        .HasForeignKey("CharacterKnowsAboutInfluenceProgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("CharacterKnowsAboutInfluenceProg");
                });

            modelBuilder.Entity("MudSharp.Models.MarketPopulation", b =>
                {
                    b.HasOne("MudSharp.Models.Market", "Market")
                        .WithMany("MarketPopulations")
                        .HasForeignKey("MarketId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Market");
                });

            modelBuilder.Entity("MudSharp.Models.MaterialsTags", b =>
                {
                    b.HasOne("MudSharp.Models.Material", "Material")
                        .WithMany("MaterialsTags")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Materials_Tags_Materials");

                    b.HasOne("MudSharp.Models.Tag", "Tag")
                        .WithMany("MaterialsTags")
                        .HasForeignKey("TagId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("Materials_Tags_Tags");

                    b.Navigation("Material");

                    b.Navigation("Tag");
                });

            modelBuilder.Entity("MudSharp.Models.Merchandise", b =>
                {
                    b.HasOne("MudSharp.Models.GameItem", "PreferredDisplayContainer")
                        .WithMany("Merchandises")
                        .HasForeignKey("PreferredDisplayContainerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Merchandises_GameItems");

                    b.HasOne("MudSharp.Models.Shop", "Shop")
                        .WithMany("Merchandises")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Merchandises_Shops");

                    b.Navigation("PreferredDisplayContainer");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("MudSharp.Models.Merit", b =>
                {
                    b.HasOne("MudSharp.Models.Merit", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Merits_Merits");

                    b.Navigation("Parent");
                });

            modelBuilder.Entity("MudSharp.Models.MeritsChargenResources", b =>
                {
                    b.HasOne("MudSharp.Models.ChargenResource", "ChargenResource")
                        .WithMany("MeritsChargenResources")
                        .HasForeignKey("ChargenResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Merits_ChargenResources_ChargenResources");

                    b.HasOne("MudSharp.Models.Merit", "Merit")
                        .WithMany("MeritsChargenResources")
                        .HasForeignKey("MeritId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Merits_ChargenResources_Merits");

                    b.Navigation("ChargenResource");

                    b.Navigation("Merit");
                });

            modelBuilder.Entity("MudSharp.Models.MoveSpeed", b =>
                {
                    b.HasOne("MudSharp.Models.BodyProto", "BodyProto")
                        .WithMany("MoveSpeeds")
                        .HasForeignKey("BodyProtoId")
                        .IsRequired()
                        .HasConstraintName("FK_MoveSpeeds_BodyPrototype");

                    b.Navigation("BodyProto");
                });

            modelBuilder.Entity("MudSharp.Models.MutualIntelligability", b =>
                {
                    b.HasOne("MudSharp.Models.Language", "ListenerLanguage")
                        .WithMany("MutualIntelligabilitiesListenerLanguage")
                        .HasForeignKey("ListenerLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Languages_MutualIntelligabilities_Listener");

                    b.HasOne("MudSharp.Models.Language", "TargetLanguage")
                        .WithMany("MutualIntelligabilitiesTargetLanguage")
                        .HasForeignKey("TargetLanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Languages_MutualIntelligabilities_Target");

                    b.Navigation("ListenerLanguage");

                    b.Navigation("TargetLanguage");
                });

            modelBuilder.Entity("MudSharp.Models.NPCSpawner", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "CountsAsProg")
                        .WithMany()
                        .HasForeignKey("CountsAsProgId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_NPCSpawners_CountsAsProg");

                    b.HasOne("MudSharp.Models.FutureProg", "IsActiveProg")
                        .WithMany()
                        .HasForeignKey("IsActiveProgId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_NPCSpawners_IsActiveProg");

                    b.HasOne("MudSharp.Models.FutureProg", "OnSpawnProg")
                        .WithMany()
                        .HasForeignKey("OnSpawnProgId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_NPCSpawners_OnSpawnProg");

                    b.Navigation("CountsAsProg");

                    b.Navigation("IsActiveProg");

                    b.Navigation("OnSpawnProg");
                });

            modelBuilder.Entity("MudSharp.Models.NPCSpawnerCell", b =>
                {
                    b.HasOne("MudSharp.Models.Cell", "Cell")
                        .WithMany()
                        .HasForeignKey("CellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_NPCSpawnerCells_Cell");

                    b.HasOne("MudSharp.Models.NPCSpawner", "NPCSpawner")
                        .WithMany("Cells")
                        .HasForeignKey("NPCSpawnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_NPCSpawnerCells_NPCSpawner");

                    b.Navigation("Cell");

                    b.Navigation("NPCSpawner");
                });

            modelBuilder.Entity("MudSharp.Models.NPCSpawnerZone", b =>
                {
                    b.HasOne("MudSharp.Models.NPCSpawner", "NPCSpawner")
                        .WithMany("Zones")
                        .HasForeignKey("NPCSpawnerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_NPCSpawnerZones_NPCSpawner");

                    b.HasOne("MudSharp.Models.Zone", "Zone")
                        .WithMany()
                        .HasForeignKey("ZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_NPCSpawnerZones_Zone");

                    b.Navigation("NPCSpawner");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("MudSharp.Models.NewPlayerHint", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "FilterProg")
                        .WithMany()
                        .HasForeignKey("FilterProgId")
                        .HasConstraintName("FK_NewPlayerHints_FutureProgs");

                    b.Navigation("FilterProg");
                });

            modelBuilder.Entity("MudSharp.Models.Npc", b =>
                {
                    b.HasOne("MudSharp.Models.Character", "BodyguardCharacter")
                        .WithMany("NpcsBodyguardCharacter")
                        .HasForeignKey("BodyguardCharacterId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_NPCs_Characters_Bodyguard");

                    b.HasOne("MudSharp.Models.Character", "Character")
                        .WithMany("NpcsCharacter")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_NPCs_Characters");

                    b.HasOne("MudSharp.Models.NpcTemplate", "Template")
                        .WithMany("Npcs")
                        .HasForeignKey("TemplateId", "TemplateRevnum")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_NPCs_NPCTemplates");

                    b.Navigation("BodyguardCharacter");

                    b.Navigation("Character");

                    b.Navigation("Template");
                });

            modelBuilder.Entity("MudSharp.Models.NpcTemplate", b =>
                {
                    b.HasOne("MudSharp.Models.EditableItem", "EditableItem")
                        .WithMany("Npctemplates")
                        .HasForeignKey("EditableItemId")
                        .IsRequired()
                        .HasConstraintName("FK_NPCTemplates_EditableItems");

                    b.Navigation("EditableItem");
                });

            modelBuilder.Entity("MudSharp.Models.NpcTemplatesArtificalIntelligences", b =>
                {
                    b.HasOne("MudSharp.Models.ArtificialIntelligence", "Ai")
                        .WithMany("NpctemplatesArtificalIntelligences")
                        .HasForeignKey("AiId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_NTAI_ArtificalIntelligences");

                    b.HasOne("MudSharp.Models.NpcTemplate", "Npctemplate")
                        .WithMany("NpctemplatesArtificalIntelligences")
                        .HasForeignKey("NpcTemplateId", "NpcTemplateRevisionNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_NTAI_NPCTemplates");

                    b.Navigation("Ai");

                    b.Navigation("Npctemplate");
                });

            modelBuilder.Entity("MudSharp.Models.NpcsArtificialIntelligences", b =>
                {
                    b.HasOne("MudSharp.Models.ArtificialIntelligence", "ArtificialIntelligence")
                        .WithMany("NpcsArtificialIntelligences")
                        .HasForeignKey("ArtificialIntelligenceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_NPCs_ArtificialIntelligences_ArtificialIntelligences");

                    b.HasOne("MudSharp.Models.Npc", "Npc")
                        .WithMany("NpcsArtificialIntelligences")
                        .HasForeignKey("Npcid")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_NPCs_ArtificialIntelligences_NPCs");

                    b.Navigation("ArtificialIntelligence");

                    b.Navigation("Npc");
                });

            modelBuilder.Entity("MudSharp.Models.Patrol", b =>
                {
                    b.HasOne("MudSharp.Models.Character", null)
                        .WithMany("Patrols")
                        .HasForeignKey("CharacterId");

                    b.HasOne("MudSharp.Models.Cell", "LastMajorNode")
                        .WithMany()
                        .HasForeignKey("LastMajorNodeId")
                        .HasConstraintName("FK_Patrols_LastMajorNode");

                    b.HasOne("MudSharp.Models.LegalAuthority", "LegalAuthority")
                        .WithMany("Patrols")
                        .HasForeignKey("LegalAuthorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Patrols_LegalAuthorities");

                    b.HasOne("MudSharp.Models.Cell", "NextMajorNode")
                        .WithMany()
                        .HasForeignKey("NextMajorNodeId")
                        .HasConstraintName("FK_Patrols_NextMajorNode");

                    b.HasOne("MudSharp.Models.Character", "PatrolLeader")
                        .WithMany()
                        .HasForeignKey("PatrolLeaderId")
                        .HasConstraintName("FK_Patrols_Characters");

                    b.HasOne("MudSharp.Models.PatrolRoute", "PatrolRoute")
                        .WithMany("Patrols")
                        .HasForeignKey("PatrolRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Patrols_PatrolRoutes");

                    b.Navigation("LastMajorNode");

                    b.Navigation("LegalAuthority");

                    b.Navigation("NextMajorNode");

                    b.Navigation("PatrolLeader");

                    b.Navigation("PatrolRoute");
                });

            modelBuilder.Entity("MudSharp.Models.PatrolMember", b =>
                {
                    b.HasOne("MudSharp.Models.Character", "Character")
                        .WithMany()
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PatrolMembers_Characters");

                    b.HasOne("MudSharp.Models.Patrol", "Patrol")
                        .WithMany("PatrolMembers")
                        .HasForeignKey("PatrolId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PatrolsMembers_Patrols");

                    b.Navigation("Character");

                    b.Navigation("Patrol");
                });

            modelBuilder.Entity("MudSharp.Models.PatrolRoute", b =>
                {
                    b.HasOne("MudSharp.Models.LegalAuthority", "LegalAuthority")
                        .WithMany("PatrolRoutes")
                        .HasForeignKey("LegalAuthorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PatrolRoutes_LegalAuthorities");

                    b.HasOne("MudSharp.Models.FutureProg", "StartPatrolProg")
                        .WithMany("PatrolRoutes")
                        .HasForeignKey("StartPatrolProgId");

                    b.Navigation("LegalAuthority");

                    b.Navigation("StartPatrolProg");
                });

            modelBuilder.Entity("MudSharp.Models.PatrolRouteNode", b =>
                {
                    b.HasOne("MudSharp.Models.Cell", "Cell")
                        .WithMany()
                        .HasForeignKey("CellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PatrolRoutesNodes_Cells");

                    b.HasOne("MudSharp.Models.PatrolRoute", "PatrolRoute")
                        .WithMany("PatrolRouteNodes")
                        .HasForeignKey("PatrolRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PatrolRoutesNodes_PatrolRoutes");

                    b.Navigation("Cell");

                    b.Navigation("PatrolRoute");
                });

            modelBuilder.Entity("MudSharp.Models.PatrolRouteNumbers", b =>
                {
                    b.HasOne("MudSharp.Models.EnforcementAuthority", "EnforcementAuthority")
                        .WithMany()
                        .HasForeignKey("EnforcementAuthorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PatrolRoutesNumbers_EnforcementAuthorities");

                    b.HasOne("MudSharp.Models.PatrolRoute", "PatrolRoute")
                        .WithMany("PatrolRouteNumbers")
                        .HasForeignKey("PatrolRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PatrolRoutesNumbers_PatrolRoutes");

                    b.Navigation("EnforcementAuthority");

                    b.Navigation("PatrolRoute");
                });

            modelBuilder.Entity("MudSharp.Models.PatrolRouteTimeOfDay", b =>
                {
                    b.HasOne("MudSharp.Models.PatrolRoute", "PatrolRoute")
                        .WithMany("TimesOfDay")
                        .HasForeignKey("PatrolRouteId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PatrolRoutesTimesOfDay_PatrolRoutes");

                    b.Navigation("PatrolRoute");
                });

            modelBuilder.Entity("MudSharp.Models.Paygrade", b =>
                {
                    b.HasOne("MudSharp.Models.Clan", "Clan")
                        .WithMany("Paygrades")
                        .HasForeignKey("ClanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Paygrades_Clans");

                    b.HasOne("MudSharp.Models.Currency", "Currency")
                        .WithMany("Paygrades")
                        .HasForeignKey("CurrencyId")
                        .IsRequired()
                        .HasConstraintName("FK_Paygrades_Currencies");

                    b.Navigation("Clan");

                    b.Navigation("Currency");
                });

            modelBuilder.Entity("MudSharp.Models.PerceiverMerit", b =>
                {
                    b.HasOne("MudSharp.Models.Body", "Body")
                        .WithMany("PerceiverMerits")
                        .HasForeignKey("BodyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_PerceiverMerits_Bodies");

                    b.HasOne("MudSharp.Models.Character", "Character")
                        .WithMany("PerceiverMerits")
                        .HasForeignKey("CharacterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_PerceiverMerits_Characters");

                    b.HasOne("MudSharp.Models.Merit", "Merit")
                        .WithMany("PerceiverMerits")
                        .HasForeignKey("MeritId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName(" FK_PerceiverMerits_Merits");

                    b.Navigation("Body");

                    b.Navigation("Character");

                    b.Navigation("Merit");
                });

            modelBuilder.Entity("MudSharp.Models.PopulationBloodModelsBloodtype", b =>
                {
                    b.HasOne("MudSharp.Models.Bloodtype", "Bloodtype")
                        .WithMany("PopulationBloodModelsBloodtypes")
                        .HasForeignKey("BloodtypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PopulationBloodModels_Bloodtypes_Bloodtypes");

                    b.HasOne("MudSharp.Models.PopulationBloodModel", "PopulationBloodModel")
                        .WithMany("PopulationBloodModelsBloodtypes")
                        .HasForeignKey("PopulationBloodModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PopulationBloodModels_Bloodtypes_PopulationBloodModels");

                    b.Navigation("Bloodtype");

                    b.Navigation("PopulationBloodModel");
                });

            modelBuilder.Entity("MudSharp.Models.ProgSchedule", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "FutureProg")
                        .WithMany("ProgSchedules")
                        .HasForeignKey("FutureProgId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProgSchedules_FutureProgs");

                    b.Navigation("FutureProg");
                });

            modelBuilder.Entity("MudSharp.Models.Project", b =>
                {
                    b.HasOne("MudSharp.Models.EditableItem", "EditableItem")
                        .WithMany("Projects")
                        .HasForeignKey("EditableItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Projects_EditableItems");

                    b.Navigation("EditableItem");
                });

            modelBuilder.Entity("MudSharp.Models.ProjectAction", b =>
                {
                    b.HasOne("MudSharp.Models.ProjectPhase", "ProjectPhase")
                        .WithMany("ProjectActions")
                        .HasForeignKey("ProjectPhaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProjectActions_ProjectPhases");

                    b.Navigation("ProjectPhase");
                });

            modelBuilder.Entity("MudSharp.Models.ProjectLabourImpact", b =>
                {
                    b.HasOne("MudSharp.Models.ProjectLabourRequirement", "ProjectLabourRequirement")
                        .WithMany("ProjectLabourImpacts")
                        .HasForeignKey("ProjectLabourRequirementId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProjectLabourImpacts_ProjectLabourRequirements");

                    b.Navigation("ProjectLabourRequirement");
                });

            modelBuilder.Entity("MudSharp.Models.ProjectLabourRequirement", b =>
                {
                    b.HasOne("MudSharp.Models.ProjectPhase", "ProjectPhase")
                        .WithMany("ProjectLabourRequirements")
                        .HasForeignKey("ProjectPhaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProjectLabourRequirements_ProjectPhases");

                    b.Navigation("ProjectPhase");
                });

            modelBuilder.Entity("MudSharp.Models.ProjectMaterialRequirement", b =>
                {
                    b.HasOne("MudSharp.Models.ProjectPhase", "ProjectPhase")
                        .WithMany("ProjectMaterialRequirements")
                        .HasForeignKey("ProjectPhaseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProjectMaterialRequirements_ProjectPhases");

                    b.Navigation("ProjectPhase");
                });

            modelBuilder.Entity("MudSharp.Models.ProjectPhase", b =>
                {
                    b.HasOne("MudSharp.Models.Project", "Project")
                        .WithMany("ProjectPhases")
                        .HasForeignKey("ProjectId", "ProjectRevisionNumber")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ProjectPhases_Projects");

                    b.Navigation("Project");
                });

            modelBuilder.Entity("MudSharp.Models.Property", b =>
                {
                    b.HasOne("MudSharp.Models.EconomicZone", "EconomicZone")
                        .WithMany("Properties")
                        .HasForeignKey("EconomicZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Properties_EconomicZones");

                    b.HasOne("MudSharp.Models.PropertyLease", "Lease")
                        .WithMany()
                        .HasForeignKey("LeaseId")
                        .HasConstraintName("FK_Properties_Lease");

                    b.HasOne("MudSharp.Models.PropertyLeaseOrder", "LeaseOrder")
                        .WithMany()
                        .HasForeignKey("LeaseOrderId")
                        .HasConstraintName("FK_Properties_LeaseOrder");

                    b.HasOne("MudSharp.Models.PropertySaleOrder", "SaleOrder")
                        .WithMany()
                        .HasForeignKey("SaleOrderId")
                        .HasConstraintName("FK_Properties_SaleOrder");

                    b.Navigation("EconomicZone");

                    b.Navigation("Lease");

                    b.Navigation("LeaseOrder");

                    b.Navigation("SaleOrder");
                });

            modelBuilder.Entity("MudSharp.Models.PropertyKey", b =>
                {
                    b.HasOne("MudSharp.Models.GameItem", "GameItem")
                        .WithMany()
                        .HasForeignKey("GameItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PropertyKeys_GameItems");

                    b.HasOne("MudSharp.Models.Property", "Property")
                        .WithMany("PropertyKeys")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PropertyKeys_Property");

                    b.Navigation("GameItem");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("MudSharp.Models.PropertyLease", b =>
                {
                    b.HasOne("MudSharp.Models.PropertyLeaseOrder", "LeaseOrder")
                        .WithMany("PropertyLeases")
                        .HasForeignKey("LeaseOrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PropertyLeases_PropertyLeaseOrders");

                    b.HasOne("MudSharp.Models.Property", "Property")
                        .WithMany("PropertyLeases")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PropertyLeases_Property");

                    b.Navigation("LeaseOrder");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("MudSharp.Models.PropertyLeaseOrder", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "CanLeaseProgCharacter")
                        .WithMany()
                        .HasForeignKey("CanLeaseProgCharacterId")
                        .HasConstraintName("FK_PropertyLeaseOrders_FutureProgs_Character");

                    b.HasOne("MudSharp.Models.FutureProg", "CanLeaseProgClan")
                        .WithMany()
                        .HasForeignKey("CanLeaseProgClanId")
                        .HasConstraintName("FK_PropertyLeaseOrders_FutureProgs_Clan");

                    b.HasOne("MudSharp.Models.Property", "Property")
                        .WithMany("LeaseOrders")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PropertyLeaseOrders_Property");

                    b.Navigation("CanLeaseProgCharacter");

                    b.Navigation("CanLeaseProgClan");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("MudSharp.Models.PropertyLocation", b =>
                {
                    b.HasOne("MudSharp.Models.Cell", "Cell")
                        .WithMany()
                        .HasForeignKey("CellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PropertyLocations_Cell");

                    b.HasOne("MudSharp.Models.Property", "Property")
                        .WithMany("PropertyLocations")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PropertyLocations_Property");

                    b.Navigation("Cell");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("MudSharp.Models.PropertyOwner", b =>
                {
                    b.HasOne("MudSharp.Models.Property", "Property")
                        .WithMany("PropertyOwners")
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PropertyOwners_Properties");

                    b.HasOne("MudSharp.Models.BankAccount", "RevenueAccount")
                        .WithMany()
                        .HasForeignKey("RevenueAccountId")
                        .HasConstraintName("FK_PropertyOwners_BankAccounts");

                    b.Navigation("Property");

                    b.Navigation("RevenueAccount");
                });

            modelBuilder.Entity("MudSharp.Models.PropertySaleOrder", b =>
                {
                    b.HasOne("MudSharp.Models.Property", "Property")
                        .WithMany()
                        .HasForeignKey("PropertyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_PropertySaleOrders_Property");

                    b.Navigation("Property");
                });

            modelBuilder.Entity("MudSharp.Models.Race", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "AttributeBonusProg")
                        .WithMany("RacesAttributeBonusProg")
                        .HasForeignKey("AttributeBonusProgId")
                        .IsRequired()
                        .HasConstraintName("FK_Races_AttributeBonusProg");

                    b.HasOne("MudSharp.Models.FutureProg", "AvailabilityProg")
                        .WithMany("RacesAvailabilityProg")
                        .HasForeignKey("AvailabilityProgId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Races_AvailabilityProg");

                    b.HasOne("MudSharp.Models.BodyProto", "BaseBody")
                        .WithMany("Races")
                        .HasForeignKey("BaseBodyId")
                        .IsRequired()
                        .HasConstraintName("FK_Races_BodyProtos");

                    b.HasOne("MudSharp.Models.Liquid", "BloodLiquid")
                        .WithMany("RacesBloodLiquid")
                        .HasForeignKey("BloodLiquidId")
                        .HasConstraintName("FK_Races_Liquids_Blood");

                    b.HasOne("MudSharp.Models.BloodModel", "BloodModel")
                        .WithMany("Races")
                        .HasForeignKey("BloodModelId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Races_BloodModels");

                    b.HasOne("MudSharp.Models.CorpseModel", "CorpseModel")
                        .WithMany("Races")
                        .HasForeignKey("CorpseModelId")
                        .IsRequired()
                        .HasConstraintName("FK_Races_CorpseModels");

                    b.HasOne("MudSharp.Models.HealthStrategy", "DefaultHealthStrategy")
                        .WithMany("Races")
                        .HasForeignKey("DefaultHealthStrategyId")
                        .IsRequired()
                        .HasConstraintName("FK_Races_HealthStrategies");

                    b.HasOne("MudSharp.Models.HeightWeightModel", "DefaultHeightWeightModelFemale")
                        .WithMany()
                        .HasForeignKey("DefaultHeightWeightModelFemaleId")
                        .HasConstraintName("FK_Races_HeightWeightModelsFemale");

                    b.HasOne("MudSharp.Models.HeightWeightModel", "DefaultHeightWeightModelMale")
                        .WithMany()
                        .HasForeignKey("DefaultHeightWeightModelMaleId")
                        .HasConstraintName("FK_Races_HeightWeightModelsMale");

                    b.HasOne("MudSharp.Models.HeightWeightModel", "DefaultHeightWeightModelNeuter")
                        .WithMany()
                        .HasForeignKey("DefaultHeightWeightModelNeuterId")
                        .HasConstraintName("FK_Races_HeightWeightModelsNeuter");

                    b.HasOne("MudSharp.Models.HeightWeightModel", "DefaultHeightWeightModelNonBinary")
                        .WithMany()
                        .HasForeignKey("DefaultHeightWeightModelNonBinaryId")
                        .HasConstraintName("FK_Races_HeightWeightModelsNonBinary");

                    b.HasOne("MudSharp.Models.Material", "NaturalArmourMaterial")
                        .WithMany("Races")
                        .HasForeignKey("NaturalArmourMaterialId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Races_Materials");

                    b.HasOne("MudSharp.Models.ArmourType", "NaturalArmourType")
                        .WithMany("Races")
                        .HasForeignKey("NaturalArmourTypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Races_ArmourTypes");

                    b.HasOne("MudSharp.Models.Race", "ParentRace")
                        .WithMany("InverseParentRace")
                        .HasForeignKey("ParentRaceId")
                        .HasConstraintName("FK_Races_Races");

                    b.HasOne("MudSharp.Models.RaceButcheryProfile", "RaceButcheryProfile")
                        .WithMany("Races")
                        .HasForeignKey("RaceButcheryProfileId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Races_RaceButcheryProfiles");

                    b.HasOne("MudSharp.Models.Liquid", "SweatLiquid")
                        .WithMany("RacesSweatLiquid")
                        .HasForeignKey("SweatLiquidId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Races_Liqiuds_Sweat");

                    b.Navigation("AttributeBonusProg");

                    b.Navigation("AvailabilityProg");

                    b.Navigation("BaseBody");

                    b.Navigation("BloodLiquid");

                    b.Navigation("BloodModel");

                    b.Navigation("CorpseModel");

                    b.Navigation("DefaultHealthStrategy");

                    b.Navigation("DefaultHeightWeightModelFemale");

                    b.Navigation("DefaultHeightWeightModelMale");

                    b.Navigation("DefaultHeightWeightModelNeuter");

                    b.Navigation("DefaultHeightWeightModelNonBinary");

                    b.Navigation("NaturalArmourMaterial");

                    b.Navigation("NaturalArmourType");

                    b.Navigation("ParentRace");

                    b.Navigation("RaceButcheryProfile");

                    b.Navigation("SweatLiquid");
                });

            modelBuilder.Entity("MudSharp.Models.RaceButcheryProfile", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "CanButcherProg")
                        .WithMany("RaceButcheryProfilesCanButcherProg")
                        .HasForeignKey("CanButcherProgId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_RaceButcheryProfiles_FutureProgs_Can");

                    b.HasOne("MudSharp.Models.Tag", "RequiredToolTag")
                        .WithMany("RaceButcheryProfiles")
                        .HasForeignKey("RequiredToolTagId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_RaceButcheryProfiles_Tags");

                    b.HasOne("MudSharp.Models.FutureProg", "WhyCannotButcherProg")
                        .WithMany("RaceButcheryProfilesWhyCannotButcherProg")
                        .HasForeignKey("WhyCannotButcherProgId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_RaceButcheryProfiles_FutureProgs_Why");

                    b.Navigation("CanButcherProg");

                    b.Navigation("RequiredToolTag");

                    b.Navigation("WhyCannotButcherProg");
                });

            modelBuilder.Entity("MudSharp.Models.RaceButcheryProfilesBreakdownChecks", b =>
                {
                    b.HasOne("MudSharp.Models.RaceButcheryProfile", "RaceButcheryProfile")
                        .WithMany("RaceButcheryProfilesBreakdownChecks")
                        .HasForeignKey("RaceButcheryProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RaceButcheryProfiles_BreakdownChecks_RaceButcheryProfiles");

                    b.HasOne("MudSharp.Models.TraitDefinition", "TraitDefinition")
                        .WithMany("RaceButcheryProfilesBreakdownChecks")
                        .HasForeignKey("TraitDefinitionId")
                        .IsRequired()
                        .HasConstraintName("FK_RaceButcheryProfiles_BreakdownChecks_TraitDefinitions");

                    b.Navigation("RaceButcheryProfile");

                    b.Navigation("TraitDefinition");
                });

            modelBuilder.Entity("MudSharp.Models.RaceButcheryProfilesBreakdownEmotes", b =>
                {
                    b.HasOne("MudSharp.Models.RaceButcheryProfile", "RaceButcheryProfile")
                        .WithMany("RaceButcheryProfilesBreakdownEmotes")
                        .HasForeignKey("RaceButcheryProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RaceButcheryProfiles_BreakdownEmotes_RaceButcheryProfiles");

                    b.Navigation("RaceButcheryProfile");
                });

            modelBuilder.Entity("MudSharp.Models.RaceButcheryProfilesButcheryProducts", b =>
                {
                    b.HasOne("MudSharp.Models.ButcheryProducts", "ButcheryProduct")
                        .WithMany("RaceButcheryProfilesButcheryProducts")
                        .HasForeignKey("ButcheryProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RaceButcheryProfiles_ButcheryProducts_ButcheryProducts");

                    b.HasOne("MudSharp.Models.RaceButcheryProfile", "RaceButcheryProfile")
                        .WithMany("RaceButcheryProfilesButcheryProducts")
                        .HasForeignKey("RaceButcheryProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RaceButcheryProfiles_ButcheryProducts_RaceButcheryProfiles");

                    b.Navigation("ButcheryProduct");

                    b.Navigation("RaceButcheryProfile");
                });

            modelBuilder.Entity("MudSharp.Models.RaceButcheryProfilesSkinningEmotes", b =>
                {
                    b.HasOne("MudSharp.Models.RaceButcheryProfile", "RaceButcheryProfile")
                        .WithMany("RaceButcheryProfilesSkinningEmotes")
                        .HasForeignKey("RaceButcheryProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RaceButcheryProfiles_SkinningEmotes_RaceButcheryProfiles");

                    b.Navigation("RaceButcheryProfile");
                });

            modelBuilder.Entity("MudSharp.Models.RaceEdibleForagableYields", b =>
                {
                    b.HasOne("MudSharp.Models.Race", "Race")
                        .WithMany("RaceEdibleForagableYields")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RaceEdibleForagableYields_Races");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("MudSharp.Models.RacesAdditionalBodyparts", b =>
                {
                    b.HasOne("MudSharp.Models.BodypartProto", "Bodypart")
                        .WithMany("RacesAdditionalBodyparts")
                        .HasForeignKey("BodypartId")
                        .IsRequired()
                        .HasConstraintName("FK_Races_AdditionalBodyparts_BodypartProto");

                    b.HasOne("MudSharp.Models.Race", "Race")
                        .WithMany("RacesAdditionalBodyparts")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Races_AdditionalBodyparts_Races");

                    b.Navigation("Bodypart");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("MudSharp.Models.RacesAdditionalCharacteristics", b =>
                {
                    b.HasOne("MudSharp.Models.CharacteristicDefinition", "CharacteristicDefinition")
                        .WithMany("RacesAdditionalCharacteristics")
                        .HasForeignKey("CharacteristicDefinitionId")
                        .IsRequired()
                        .HasConstraintName("FK_RAC_CharacteristicDefinitions");

                    b.HasOne("MudSharp.Models.Race", "Race")
                        .WithMany("RacesAdditionalCharacteristics")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RAC_Races");

                    b.Navigation("CharacteristicDefinition");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("MudSharp.Models.RacesAttributes", b =>
                {
                    b.HasOne("MudSharp.Models.TraitDefinition", "Attribute")
                        .WithMany("RacesAttributes")
                        .HasForeignKey("AttributeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Races_Attributes_TraitDefinitions");

                    b.HasOne("MudSharp.Models.Race", "Race")
                        .WithMany("RacesAttributes")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Races_Attributes_Races");

                    b.Navigation("Attribute");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("MudSharp.Models.RacesBreathableGases", b =>
                {
                    b.HasOne("MudSharp.Models.Gas", "Gas")
                        .WithMany("RacesBreathableGases")
                        .HasForeignKey("GasId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Races_BreathableGases_Gases");

                    b.HasOne("MudSharp.Models.Race", "Race")
                        .WithMany("RacesBreathableGases")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Races_BreathableGases_Races");

                    b.Navigation("Gas");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("MudSharp.Models.RacesBreathableLiquids", b =>
                {
                    b.HasOne("MudSharp.Models.Liquid", "Liquid")
                        .WithMany("RacesBreathableLiquids")
                        .HasForeignKey("LiquidId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Races_BreathableLiquids_Liquids");

                    b.HasOne("MudSharp.Models.Race", "Race")
                        .WithMany("RacesBreathableLiquids")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Races_BreathableLiquids_Races");

                    b.Navigation("Liquid");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("MudSharp.Models.RacesChargenResources", b =>
                {
                    b.HasOne("MudSharp.Models.ChargenResource", "ChargenResource")
                        .WithMany("RacesChargenResources")
                        .HasForeignKey("ChargenResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MudSharp.Models.Race", "Race")
                        .WithMany("RacesChargenResources")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ChargenResource");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("MudSharp.Models.RacesCombatActions", b =>
                {
                    b.HasOne("MudSharp.Models.CombatAction", "CombatAction")
                        .WithMany("RacesCombatActions")
                        .HasForeignKey("CombatActionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Races_CombatActions_CombatActions");

                    b.HasOne("MudSharp.Models.Race", "Race")
                        .WithMany("RacesCombatActions")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Races_CombatActions_Races");

                    b.Navigation("CombatAction");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("MudSharp.Models.RacesEdibleMaterials", b =>
                {
                    b.HasOne("MudSharp.Models.Material", "Material")
                        .WithMany("RacesEdibleMaterials")
                        .HasForeignKey("MaterialId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Races_EdibleMaterials_Materials");

                    b.HasOne("MudSharp.Models.Race", "Race")
                        .WithMany("RacesEdibleMaterials")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Races_EdibleMaterials_Races");

                    b.Navigation("Material");

                    b.Navigation("Race");
                });

            modelBuilder.Entity("MudSharp.Models.RacesWeaponAttacks", b =>
                {
                    b.HasOne("MudSharp.Models.BodypartProto", "Bodypart")
                        .WithMany("RacesWeaponAttacks")
                        .HasForeignKey("BodypartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Races_WeaponAttacks_BodypartProto");

                    b.HasOne("MudSharp.Models.Race", "Race")
                        .WithMany("RacesWeaponAttacks")
                        .HasForeignKey("RaceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Races_WeaponAttacks_Races");

                    b.HasOne("MudSharp.Models.WeaponAttack", "WeaponAttack")
                        .WithMany("RacesWeaponAttacks")
                        .HasForeignKey("WeaponAttackId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Races_WeaponAttacks_WeaponAttacks");

                    b.Navigation("Bodypart");

                    b.Navigation("Race");

                    b.Navigation("WeaponAttack");
                });

            modelBuilder.Entity("MudSharp.Models.RandomNameProfile", b =>
                {
                    b.HasOne("MudSharp.Models.NameCulture", "NameCulture")
                        .WithMany("RandomNameProfiles")
                        .HasForeignKey("NameCultureId")
                        .IsRequired()
                        .HasConstraintName("FK_RandomNameProfiles_NameCulture");

                    b.HasOne("MudSharp.Models.FutureProg", "UseForChargenSuggestionsProg")
                        .WithMany()
                        .HasForeignKey("UseForChargenSuggestionsProgId");

                    b.Navigation("NameCulture");

                    b.Navigation("UseForChargenSuggestionsProg");
                });

            modelBuilder.Entity("MudSharp.Models.RandomNameProfilesDiceExpressions", b =>
                {
                    b.HasOne("MudSharp.Models.RandomNameProfile", "RandomNameProfile")
                        .WithMany("RandomNameProfilesDiceExpressions")
                        .HasForeignKey("RandomNameProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RandomNameProfiles_DiceExpressions_RandomNameProfiles");

                    b.Navigation("RandomNameProfile");
                });

            modelBuilder.Entity("MudSharp.Models.RandomNameProfilesElements", b =>
                {
                    b.HasOne("MudSharp.Models.RandomNameProfile", "RandomNameProfile")
                        .WithMany("RandomNameProfilesElements")
                        .HasForeignKey("RandomNameProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RandomNameProfiles_Elements_RandomNameProfiles");

                    b.Navigation("RandomNameProfile");
                });

            modelBuilder.Entity("MudSharp.Models.RangedWeaponTypes", b =>
                {
                    b.HasOne("MudSharp.Models.TraitDefinition", "FireTrait")
                        .WithMany("RangedWeaponTypesFireTrait")
                        .HasForeignKey("FireTraitId")
                        .IsRequired()
                        .HasConstraintName("FK_RangedWeaponTypes_TraitDefinitions_Fire");

                    b.HasOne("MudSharp.Models.TraitDefinition", "OperateTrait")
                        .WithMany("RangedWeaponTypesOperateTrait")
                        .HasForeignKey("OperateTraitId")
                        .IsRequired()
                        .HasConstraintName("FK_RangedWeaponTypes_TraitDefinitions_Operate");

                    b.Navigation("FireTrait");

                    b.Navigation("OperateTrait");
                });

            modelBuilder.Entity("MudSharp.Models.Rank", b =>
                {
                    b.HasOne("MudSharp.Models.Clan", "Clan")
                        .WithMany("Ranks")
                        .HasForeignKey("ClanId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Ranks_Clans");

                    b.HasOne("MudSharp.Models.GameItemProto", "InsigniaGameItem")
                        .WithMany("Ranks")
                        .HasForeignKey("InsigniaGameItemId", "InsigniaGameItemRevnum")
                        .HasConstraintName("FK_Ranks_GameItemProtos");

                    b.Navigation("Clan");

                    b.Navigation("InsigniaGameItem");
                });

            modelBuilder.Entity("MudSharp.Models.RanksAbbreviations", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "FutureProg")
                        .WithMany("RanksAbbreviations")
                        .HasForeignKey("FutureProgId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Ranks_Abbreviations_FutureProgs");

                    b.HasOne("MudSharp.Models.Rank", "Rank")
                        .WithMany("RanksAbbreviations")
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Ranks_Abbreviations_Ranks");

                    b.Navigation("FutureProg");

                    b.Navigation("Rank");
                });

            modelBuilder.Entity("MudSharp.Models.RanksPaygrade", b =>
                {
                    b.HasOne("MudSharp.Models.Paygrade", "Paygrade")
                        .WithMany("RanksPaygrades")
                        .HasForeignKey("PaygradeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Ranks_Paygrades_Paygrades");

                    b.HasOne("MudSharp.Models.Rank", "Rank")
                        .WithMany("RanksPaygrades")
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Ranks_Paygrades_Ranks");

                    b.Navigation("Paygrade");

                    b.Navigation("Rank");
                });

            modelBuilder.Entity("MudSharp.Models.RanksTitle", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "FutureProg")
                        .WithMany("RanksTitles")
                        .HasForeignKey("FutureProgId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Ranks_Titles_FutureProgs");

                    b.HasOne("MudSharp.Models.Rank", "Rank")
                        .WithMany("RanksTitles")
                        .HasForeignKey("RankId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Ranks_Titles_Ranks");

                    b.Navigation("FutureProg");

                    b.Navigation("Rank");
                });

            modelBuilder.Entity("MudSharp.Models.RegionalClimatesSeason", b =>
                {
                    b.HasOne("MudSharp.Models.RegionalClimate", "RegionalClimate")
                        .WithMany("RegionalClimatesSeasons")
                        .HasForeignKey("RegionalClimateId")
                        .IsRequired()
                        .HasConstraintName("FK_RegionalClimates_Seasons_RegionalClimates");

                    b.HasOne("MudSharp.Models.Season", "Season")
                        .WithMany("RegionalClimatesSeasons")
                        .HasForeignKey("SeasonId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_RegionalClimates_Seasons_Seasons");

                    b.Navigation("RegionalClimate");

                    b.Navigation("Season");
                });

            modelBuilder.Entity("MudSharp.Models.Room", b =>
                {
                    b.HasOne("MudSharp.Models.Zone", "Zone")
                        .WithMany("Rooms")
                        .HasForeignKey("ZoneId")
                        .IsRequired()
                        .HasConstraintName("FK_Rooms_Zones");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("MudSharp.Models.Script", b =>
                {
                    b.HasOne("MudSharp.Models.Knowledge", "Knowledge")
                        .WithMany("Scripts")
                        .HasForeignKey("KnowledgeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Scripts_Knowledges");

                    b.Navigation("Knowledge");
                });

            modelBuilder.Entity("MudSharp.Models.ScriptedEvent", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "CharacterFilterProg")
                        .WithMany()
                        .HasForeignKey("CharacterFilterProgId")
                        .HasConstraintName("FK_ScriptedEvents_FutureProgs");

                    b.HasOne("MudSharp.Models.Character", "Character")
                        .WithMany("ScriptedEvents")
                        .HasForeignKey("CharacterId")
                        .HasConstraintName("FK_ScriptedEvents_Characters");

                    b.Navigation("Character");

                    b.Navigation("CharacterFilterProg");
                });

            modelBuilder.Entity("MudSharp.Models.ScriptedEventFreeTextQuestion", b =>
                {
                    b.HasOne("MudSharp.Models.ScriptedEvent", "ScriptedEvent")
                        .WithMany("FreeTextQuestions")
                        .HasForeignKey("ScriptedEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ScriptedEventFreeTextQuestions_ScriptedEvents");

                    b.Navigation("ScriptedEvent");
                });

            modelBuilder.Entity("MudSharp.Models.ScriptedEventMultipleChoiceQuestion", b =>
                {
                    b.HasOne("MudSharp.Models.ScriptedEventMultipleChoiceQuestionAnswer", "ChosenAnswer")
                        .WithMany()
                        .HasForeignKey("ChosenAnswerId")
                        .HasConstraintName("FK_ScriptedEventMultipleChoiceQuestions_ScriptedEventMultipleChoiceQuestionAnswers");

                    b.HasOne("MudSharp.Models.ScriptedEvent", "ScriptedEvent")
                        .WithMany("MultipleChoiceQuestions")
                        .HasForeignKey("ScriptedEventId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ScriptedEventMultipleChoiceQuestions_ScriptedEvents");

                    b.Navigation("ChosenAnswer");

                    b.Navigation("ScriptedEvent");
                });

            modelBuilder.Entity("MudSharp.Models.ScriptedEventMultipleChoiceQuestionAnswer", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "AfterChoiceProg")
                        .WithMany()
                        .HasForeignKey("AfterChoiceProgId")
                        .HasConstraintName("FK_ScriptedEventMultipleChoiceQuestionAnswers_FutureProgs_After");

                    b.HasOne("MudSharp.Models.FutureProg", "AnswerFilterProg")
                        .WithMany()
                        .HasForeignKey("AnswerFilterProgId")
                        .HasConstraintName("FK_ScriptedEventMultipleChoiceQuestionAnswers_FutureProgs_Filter");

                    b.HasOne("MudSharp.Models.ScriptedEventMultipleChoiceQuestion", "ScriptedEventMultipleChoiceQuestion")
                        .WithMany("Answers")
                        .HasForeignKey("ScriptedEventMultipleChoiceQuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ScriptedEventMultipleChoiceQuestionAnswers_ScriptedEventMultipleChoiceQuestions");

                    b.Navigation("AfterChoiceProg");

                    b.Navigation("AnswerFilterProg");

                    b.Navigation("ScriptedEventMultipleChoiceQuestion");
                });

            modelBuilder.Entity("MudSharp.Models.ScriptsDesignedLanguage", b =>
                {
                    b.HasOne("MudSharp.Models.Language", "Language")
                        .WithMany("ScriptsDesignedLanguages")
                        .HasForeignKey("LanguageId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Scripts_DesignedLanguages_Languages");

                    b.HasOne("MudSharp.Models.Script", "Script")
                        .WithMany("ScriptsDesignedLanguages")
                        .HasForeignKey("ScriptId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Scripts_DesignedLanguages_Scripts");

                    b.Navigation("Language");

                    b.Navigation("Script");
                });

            modelBuilder.Entity("MudSharp.Models.Season", b =>
                {
                    b.HasOne("MudSharp.Models.Celestial", "Celestial")
                        .WithMany("Seasons")
                        .HasForeignKey("CelestialId")
                        .IsRequired()
                        .HasConstraintName("FK_Seasons_Celestials");

                    b.Navigation("Celestial");
                });

            modelBuilder.Entity("MudSharp.Models.Shard", b =>
                {
                    b.HasOne("MudSharp.Models.SkyDescriptionTemplate", "SkyDescriptionTemplate")
                        .WithMany("Shards")
                        .HasForeignKey("SkyDescriptionTemplateId")
                        .IsRequired()
                        .HasConstraintName("FK_Shards_SkyDescriptionTemplates");

                    b.Navigation("SkyDescriptionTemplate");
                });

            modelBuilder.Entity("MudSharp.Models.ShardsCalendars", b =>
                {
                    b.HasOne("MudSharp.Models.Shard", "Shard")
                        .WithMany("ShardsCalendars")
                        .HasForeignKey("ShardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Shards_Calendars_Shards");

                    b.Navigation("Shard");
                });

            modelBuilder.Entity("MudSharp.Models.ShardsCelestials", b =>
                {
                    b.HasOne("MudSharp.Models.Shard", "Shard")
                        .WithMany("ShardsCelestials")
                        .HasForeignKey("ShardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Shards_Celestials_Shards");

                    b.Navigation("Shard");
                });

            modelBuilder.Entity("MudSharp.Models.ShardsClocks", b =>
                {
                    b.HasOne("MudSharp.Models.Shard", "Shard")
                        .WithMany("ShardsClocks")
                        .HasForeignKey("ShardId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Shards_Clocks_Shards");

                    b.Navigation("Shard");
                });

            modelBuilder.Entity("MudSharp.Models.ShieldType", b =>
                {
                    b.HasOne("MudSharp.Models.TraitDefinition", "BlockTrait")
                        .WithMany("ShieldTypes")
                        .HasForeignKey("BlockTraitId")
                        .IsRequired()
                        .HasConstraintName("FK_ShieldTypes_TraitDefinitions");

                    b.HasOne("MudSharp.Models.ArmourType", "EffectiveArmourType")
                        .WithMany("ShieldTypes")
                        .HasForeignKey("EffectiveArmourTypeId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_ShieldTypes_ArmourTypes");

                    b.Navigation("BlockTrait");

                    b.Navigation("EffectiveArmourType");
                });

            modelBuilder.Entity("MudSharp.Models.Shop", b =>
                {
                    b.HasOne("MudSharp.Models.BankAccount", "BankAccount")
                        .WithMany()
                        .HasForeignKey("BankAccountId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Shops_BankAccounts");

                    b.HasOne("MudSharp.Models.FutureProg", "CanShopProg")
                        .WithMany("ShopsCanShopProg")
                        .HasForeignKey("CanShopProgId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Shops_FutureProgs_Can");

                    b.HasOne("MudSharp.Models.Currency", "Currency")
                        .WithMany("Shops")
                        .HasForeignKey("CurrencyId")
                        .IsRequired()
                        .HasConstraintName("FK_Shops_Currencies");

                    b.HasOne("MudSharp.Models.EconomicZone", "EconomicZone")
                        .WithMany("Shops")
                        .HasForeignKey("EconomicZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Shops_EconomicZones");

                    b.HasOne("MudSharp.Models.Market", "Market")
                        .WithMany("Shops")
                        .HasForeignKey("MarketId");

                    b.HasOne("MudSharp.Models.Cell", "StockroomCell")
                        .WithMany("ShopsStockroomCell")
                        .HasForeignKey("StockroomCellId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Shops_Cells_Stockroom");

                    b.HasOne("MudSharp.Models.FutureProg", "WhyCannotShopProg")
                        .WithMany("ShopsWhyCannotShopProg")
                        .HasForeignKey("WhyCannotShopProgId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Shops_FutureProgs_WhyCant");

                    b.HasOne("MudSharp.Models.Cell", "WorkshopCell")
                        .WithMany("ShopsWorkshopCell")
                        .HasForeignKey("WorkshopCellId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Shops_Cells_Workshop");

                    b.Navigation("BankAccount");

                    b.Navigation("CanShopProg");

                    b.Navigation("Currency");

                    b.Navigation("EconomicZone");

                    b.Navigation("Market");

                    b.Navigation("StockroomCell");

                    b.Navigation("WhyCannotShopProg");

                    b.Navigation("WorkshopCell");
                });

            modelBuilder.Entity("MudSharp.Models.ShopFinancialPeriodResult", b =>
                {
                    b.HasOne("MudSharp.Models.EconomicZone", "EconomicZone")
                        .WithMany("ShopFinancialPeriodResults")
                        .HasForeignKey("EconomicZoneId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ShopFinancialPeriodResults_EconomicZones");

                    b.HasOne("MudSharp.Models.FinancialPeriod", "FinancialPeriod")
                        .WithMany("ShopFinancialPeriodResults")
                        .HasForeignKey("FinancialPeriodId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ShopFinancialPeriodResults_FinancialPeriods");

                    b.HasOne("MudSharp.Models.Shop", "Shop")
                        .WithMany("ShopFinancialPeriodResults")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ShopFinancialPeriodResults_Shops");

                    b.Navigation("EconomicZone");

                    b.Navigation("FinancialPeriod");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("MudSharp.Models.ShopTransactionRecord", b =>
                {
                    b.HasOne("MudSharp.Models.Currency", "Currency")
                        .WithMany("ShopTransactionRecords")
                        .HasForeignKey("CurrencyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ShopTransactionRecords_Currencies");

                    b.HasOne("MudSharp.Models.Shop", "Shop")
                        .WithMany("ShopTransactionRecords")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ShopTransactionRecords_Shops");

                    b.Navigation("Currency");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("MudSharp.Models.ShopsStoreroomCell", b =>
                {
                    b.HasOne("MudSharp.Models.Cell", "Cell")
                        .WithMany("ShopsStoreroomCells")
                        .HasForeignKey("CellId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Shops_StoreroomCells_Cells");

                    b.HasOne("MudSharp.Models.Shop", "Shop")
                        .WithMany("ShopsStoreroomCells")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Shops_StoreroomCells_Shops");

                    b.Navigation("Cell");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("MudSharp.Models.ShopsTill", b =>
                {
                    b.HasOne("MudSharp.Models.GameItem", "GameItem")
                        .WithMany("ShopsTills")
                        .HasForeignKey("GameItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ShopTills_GameItems");

                    b.HasOne("MudSharp.Models.Shop", "Shop")
                        .WithMany("ShopsTills")
                        .HasForeignKey("ShopId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_ShopTills_Shops");

                    b.Navigation("GameItem");

                    b.Navigation("Shop");
                });

            modelBuilder.Entity("MudSharp.Models.SkyDescriptionTemplatesValue", b =>
                {
                    b.HasOne("MudSharp.Models.SkyDescriptionTemplate", "SkyDescriptionTemplate")
                        .WithMany("SkyDescriptionTemplatesValues")
                        .HasForeignKey("SkyDescriptionTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SkyDescriptionTemplates_Values_SkyDescriptionTemplates");

                    b.Navigation("SkyDescriptionTemplate");
                });

            modelBuilder.Entity("MudSharp.Models.Social", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "FutureProg")
                        .WithMany("Socials")
                        .HasForeignKey("FutureProgId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Socials_FutureProgs");

                    b.Navigation("FutureProg");
                });

            modelBuilder.Entity("MudSharp.Models.SurgicalProcedure", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "AbortProg")
                        .WithMany("SurgicalProceduresAbortProg")
                        .HasForeignKey("AbortProgId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_SurgicalProcedures_FutureProgs_AbortProg");

                    b.HasOne("MudSharp.Models.TraitDefinition", "CheckTraitDefinition")
                        .WithMany()
                        .HasForeignKey("CheckTraitDefinitionId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_SurgicalProcedures_TraitDefinitions");

                    b.HasOne("MudSharp.Models.FutureProg", "CompletionProg")
                        .WithMany("SurgicalProceduresCompletionProg")
                        .HasForeignKey("CompletionProgId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_SurgicalProcedures_FutureProgs_CompletionProg");

                    b.HasOne("MudSharp.Models.Knowledge", "KnowledgeRequired")
                        .WithMany("SurgicalProcedures")
                        .HasForeignKey("KnowledgeRequiredId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_SurgicalProcedures_Knowledges");

                    b.HasOne("MudSharp.Models.BodyProto", "TargetBodyType")
                        .WithMany()
                        .HasForeignKey("TargetBodyTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SurgicalProcedures_BodyProtos");

                    b.HasOne("MudSharp.Models.FutureProg", "UsabilityProg")
                        .WithMany("SurgicalProceduresUsabilityProg")
                        .HasForeignKey("UsabilityProgId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_SurgicalProcedures_FutureProgs_Usability");

                    b.HasOne("MudSharp.Models.FutureProg", "WhyCannotUseProg")
                        .WithMany("SurgicalProceduresWhyCannotUseProg")
                        .HasForeignKey("WhyCannotUseProgId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_SurgicalProcedures_FutureProgs_WhyCannotUseProg");

                    b.Navigation("AbortProg");

                    b.Navigation("CheckTraitDefinition");

                    b.Navigation("CompletionProg");

                    b.Navigation("KnowledgeRequired");

                    b.Navigation("TargetBodyType");

                    b.Navigation("UsabilityProg");

                    b.Navigation("WhyCannotUseProg");
                });

            modelBuilder.Entity("MudSharp.Models.SurgicalProcedurePhase", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "OnPhaseProg")
                        .WithMany("SurgicalProcedurePhases")
                        .HasForeignKey("OnPhaseProgId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_SurgicalProcedurePhases_FutureProgs_OnPhaseProg");

                    b.HasOne("MudSharp.Models.SurgicalProcedure", "SurgicalProcedure")
                        .WithMany("SurgicalProcedurePhases")
                        .HasForeignKey("SurgicalProcedureId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_SurgicalProcedurePhases_SurgicalProcudres");

                    b.Navigation("OnPhaseProg");

                    b.Navigation("SurgicalProcedure");
                });

            modelBuilder.Entity("MudSharp.Models.Tag", b =>
                {
                    b.HasOne("MudSharp.Models.Tag", "Parent")
                        .WithMany("InverseParent")
                        .HasForeignKey("ParentId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Tags_Parent");

                    b.HasOne("MudSharp.Models.FutureProg", "ShouldSeeProg")
                        .WithMany("Tags")
                        .HasForeignKey("ShouldSeeProgId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Tags_Futureprogs");

                    b.Navigation("Parent");

                    b.Navigation("ShouldSeeProg");
                });

            modelBuilder.Entity("MudSharp.Models.Terrain", b =>
                {
                    b.HasOne("MudSharp.Models.WeatherController", "WeatherController")
                        .WithMany("Terrains")
                        .HasForeignKey("WeatherControllerId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Terrains_WeatherControllers");

                    b.Navigation("WeatherController");
                });

            modelBuilder.Entity("MudSharp.Models.TerrainsRangedCovers", b =>
                {
                    b.HasOne("MudSharp.Models.RangedCover", "RangedCover")
                        .WithMany("TerrainsRangedCovers")
                        .HasForeignKey("RangedCoverId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Terrains_RangedCovers_RangedCovers");

                    b.HasOne("MudSharp.Models.Terrain", "Terrain")
                        .WithMany("TerrainsRangedCovers")
                        .HasForeignKey("TerrainId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Terrains_RangedCovers_Terrains");

                    b.Navigation("RangedCover");

                    b.Navigation("Terrain");
                });

            modelBuilder.Entity("MudSharp.Models.Timezone", b =>
                {
                    b.HasOne("MudSharp.Models.Clock", "Clock")
                        .WithMany("Timezones")
                        .HasForeignKey("ClockId")
                        .IsRequired()
                        .HasConstraintName("FK_Timezones_Clocks");

                    b.Navigation("Clock");
                });

            modelBuilder.Entity("MudSharp.Models.Trait", b =>
                {
                    b.HasOne("MudSharp.Models.Body", "Body")
                        .WithMany("Traits")
                        .HasForeignKey("BodyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Traits_Bodies");

                    b.HasOne("MudSharp.Models.TraitDefinition", "TraitDefinition")
                        .WithMany("Traits")
                        .HasForeignKey("TraitDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_Traits_TraitDefinitions");

                    b.Navigation("Body");

                    b.Navigation("TraitDefinition");
                });

            modelBuilder.Entity("MudSharp.Models.TraitDefinition", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "AvailabilityProg")
                        .WithMany("TraitDefinitionsAvailabilityProg")
                        .HasForeignKey("AvailabilityProgId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_TraitDefinitions_AvailabilityProg");

                    b.HasOne("MudSharp.Models.TraitExpression", "Expression")
                        .WithMany("TraitDefinitions")
                        .HasForeignKey("ExpressionId")
                        .HasConstraintName("FK_TraitDefinitions_TraitExpression");

                    b.HasOne("MudSharp.Models.FutureProg", "LearnableProg")
                        .WithMany("TraitDefinitionsLearnableProg")
                        .HasForeignKey("LearnableProgId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_TraitDefinitions_LearnableProg");

                    b.HasOne("MudSharp.Models.FutureProg", "TeachableProg")
                        .WithMany("TraitDefinitionsTeachableProg")
                        .HasForeignKey("TeachableProgId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_TraitDefinitions_TeachableProg");

                    b.Navigation("AvailabilityProg");

                    b.Navigation("Expression");

                    b.Navigation("LearnableProg");

                    b.Navigation("TeachableProg");
                });

            modelBuilder.Entity("MudSharp.Models.TraitDefinitionsChargenResources", b =>
                {
                    b.HasOne("MudSharp.Models.ChargenResource", "ChargenResource")
                        .WithMany("TraitDefinitionsChargenResources")
                        .HasForeignKey("ChargenResourceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TraitDefinitions_ChargenResources_ChargenResources");

                    b.HasOne("MudSharp.Models.TraitDefinition", "TraitDefinition")
                        .WithMany("TraitDefinitionsChargenResources")
                        .HasForeignKey("TraitDefinitionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_TraitDefinitions_ChargenResources_Races");

                    b.Navigation("ChargenResource");

                    b.Navigation("TraitDefinition");
                });

            modelBuilder.Entity("MudSharp.Models.TraitExpressionParameters", b =>
                {
                    b.HasOne("MudSharp.Models.TraitDefinition", "TraitDefinition")
                        .WithMany("TraitExpressionParameters")
                        .HasForeignKey("TraitDefinitionId")
                        .IsRequired()
                        .HasConstraintName("FK_TraitExpressionParameters_TraitDefinitions");

                    b.HasOne("MudSharp.Models.TraitExpression", "TraitExpression")
                        .WithMany("TraitExpressionParameters")
                        .HasForeignKey("TraitExpressionId")
                        .IsRequired()
                        .HasConstraintName("FK_TraitExpressionParameters_TraitExpression");

                    b.Navigation("TraitDefinition");

                    b.Navigation("TraitExpression");
                });

            modelBuilder.Entity("MudSharp.Models.WeaponAttack", b =>
                {
                    b.HasOne("MudSharp.Models.TraitExpression", "DamageExpression")
                        .WithMany("WeaponAttacksDamageExpression")
                        .HasForeignKey("DamageExpressionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_WeaponAttacks_TraitExpression_Damage");

                    b.HasOne("MudSharp.Models.FutureProg", "FutureProg")
                        .WithMany("WeaponAttacks")
                        .HasForeignKey("FutureProgId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_WeaponAttacks_FutureProgs");

                    b.HasOne("MudSharp.Models.TraitExpression", "PainExpression")
                        .WithMany("WeaponAttacksPainExpression")
                        .HasForeignKey("PainExpressionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_WeaponAttacks_TraitExpression_Pain");

                    b.HasOne("MudSharp.Models.TraitExpression", "StunExpression")
                        .WithMany("WeaponAttacksStunExpression")
                        .HasForeignKey("StunExpressionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_WeaponAttacks_TraitExpression_Stun");

                    b.HasOne("MudSharp.Models.WeaponType", "WeaponType")
                        .WithMany("WeaponAttacks")
                        .HasForeignKey("WeaponTypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_WeaponAttacks_WeaponTypes");

                    b.Navigation("DamageExpression");

                    b.Navigation("FutureProg");

                    b.Navigation("PainExpression");

                    b.Navigation("StunExpression");

                    b.Navigation("WeaponType");
                });

            modelBuilder.Entity("MudSharp.Models.WeaponType", b =>
                {
                    b.HasOne("MudSharp.Models.TraitDefinition", "AttackTrait")
                        .WithMany("WeaponTypesAttackTrait")
                        .HasForeignKey("AttackTraitId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_WeaponTypes_TraitDefinitions_Attack");

                    b.HasOne("MudSharp.Models.TraitDefinition", "ParryTrait")
                        .WithMany("WeaponTypesParryTrait")
                        .HasForeignKey("ParryTraitId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_WeaponTypes_TraitDefinitions_Parry");

                    b.Navigation("AttackTrait");

                    b.Navigation("ParryTrait");
                });

            modelBuilder.Entity("MudSharp.Models.WearableSizeParameterRule", b =>
                {
                    b.HasOne("MudSharp.Models.TraitDefinition", "Trait")
                        .WithMany("WearableSizeParameterRule")
                        .HasForeignKey("TraitId")
                        .HasConstraintName("FK_WearableSizeParameterRule_TraitDefinitions");

                    b.Navigation("Trait");
                });

            modelBuilder.Entity("MudSharp.Models.WeatherController", b =>
                {
                    b.HasOne("MudSharp.Models.Celestial", "Celestial")
                        .WithMany("WeatherControllers")
                        .HasForeignKey("CelestialId")
                        .HasConstraintName("FK_WeatherControllers_Celestials");

                    b.HasOne("MudSharp.Models.Season", "CurrentSeason")
                        .WithMany("WeatherControllers")
                        .HasForeignKey("CurrentSeasonId")
                        .IsRequired()
                        .HasConstraintName("FK_WeatherControllers_Seasons");

                    b.HasOne("MudSharp.Models.WeatherEvent", "CurrentWeatherEvent")
                        .WithMany("WeatherControllers")
                        .HasForeignKey("CurrentWeatherEventId")
                        .IsRequired()
                        .HasConstraintName("FK_WeatherControllers_WeatherEvents");

                    b.HasOne("MudSharp.Models.Clock", "FeedClock")
                        .WithMany("WeatherControllers")
                        .HasForeignKey("FeedClockId")
                        .IsRequired()
                        .HasConstraintName("FK_WeatherControllers_Clocks");

                    b.HasOne("MudSharp.Models.Timezone", "FeedClockTimeZone")
                        .WithMany("WeatherControllers")
                        .HasForeignKey("FeedClockTimeZoneId")
                        .IsRequired()
                        .HasConstraintName("FK_WeatherControllers_TimeZones");

                    b.HasOne("MudSharp.Models.RegionalClimate", "RegionalClimate")
                        .WithMany("WeatherControllers")
                        .HasForeignKey("RegionalClimateId")
                        .IsRequired()
                        .HasConstraintName("FK_WeatherControllers_RegionalClimates");

                    b.Navigation("Celestial");

                    b.Navigation("CurrentSeason");

                    b.Navigation("CurrentWeatherEvent");

                    b.Navigation("FeedClock");

                    b.Navigation("FeedClockTimeZone");

                    b.Navigation("RegionalClimate");
                });

            modelBuilder.Entity("MudSharp.Models.WeatherEvent", b =>
                {
                    b.HasOne("MudSharp.Models.WeatherEvent", "CountsAs")
                        .WithMany("InverseCountsAs")
                        .HasForeignKey("CountsAsId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_WeatherEvents_WeatherEvents");

                    b.Navigation("CountsAs");
                });

            modelBuilder.Entity("MudSharp.Models.WitnessProfile", b =>
                {
                    b.HasOne("MudSharp.Models.FutureProg", "IdentityKnownProg")
                        .WithMany("WitnessProfilesIdentityKnownProg")
                        .HasForeignKey("IdentityKnownProgId")
                        .IsRequired()
                        .HasConstraintName("FK_WitnessProfiles_IdentityProg");

                    b.HasOne("MudSharp.Models.FutureProg", "ReportingMultiplierProg")
                        .WithMany("WitnessProfilesReportingMultiplierProg")
                        .HasForeignKey("ReportingMultiplierProgId")
                        .IsRequired()
                        .HasConstraintName("FK_WitnessProfiles_MultiplierProg");

                    b.Navigation("IdentityKnownProg");

                    b.Navigation("ReportingMultiplierProg");
                });

            modelBuilder.Entity("MudSharp.Models.WitnessProfilesCooperatingAuthorities", b =>
                {
                    b.HasOne("MudSharp.Models.LegalAuthority", "LegalAuthority")
                        .WithMany("WitnessProfilesCooperatingAuthorities")
                        .HasForeignKey("LegalAuthorityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_WitnessProfiles_CooperatingAuthorities_LegalAuthorities");

                    b.HasOne("MudSharp.Models.WitnessProfile", "WitnessProfile")
                        .WithMany("WitnessProfilesCooperatingAuthorities")
                        .HasForeignKey("WitnessProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_WitnessProfiles_CooperatingAuthorities_WitnessProfiles");

                    b.Navigation("LegalAuthority");

                    b.Navigation("WitnessProfile");
                });

            modelBuilder.Entity("MudSharp.Models.WitnessProfilesIgnoredCriminalClasses", b =>
                {
                    b.HasOne("MudSharp.Models.LegalClass", "LegalClass")
                        .WithMany("WitnessProfilesIgnoredCriminalClasses")
                        .HasForeignKey("LegalClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_WitnessProfiles_IgnoredCriminalClasses_LegalClasses");

                    b.HasOne("MudSharp.Models.WitnessProfile", "WitnessProfile")
                        .WithMany("WitnessProfilesIgnoredCriminalClasses")
                        .HasForeignKey("WitnessProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_WitnessProfiles_IgnoredCriminalClasses_WitnessProfiles");

                    b.Navigation("LegalClass");

                    b.Navigation("WitnessProfile");
                });

            modelBuilder.Entity("MudSharp.Models.WitnessProfilesIgnoredVictimClasses", b =>
                {
                    b.HasOne("MudSharp.Models.LegalClass", "LegalClass")
                        .WithMany("WitnessProfilesIgnoredVictimClasses")
                        .HasForeignKey("LegalClassId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_WitnessProfiles_IgnoredVictimClasses_LegalClasses");

                    b.HasOne("MudSharp.Models.WitnessProfile", "WitnessProfile")
                        .WithMany("WitnessProfilesIgnoredVictimClasses")
                        .HasForeignKey("WitnessProfileId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("FK_WitnessProfiles_IgnoredVictimClasses_WitnessProfiles");

                    b.Navigation("LegalClass");

                    b.Navigation("WitnessProfile");
                });

            modelBuilder.Entity("MudSharp.Models.Wound", b =>
                {
                    b.HasOne("MudSharp.Models.Character", "ActorOrigin")
                        .WithMany("Wounds")
                        .HasForeignKey("ActorOriginId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Wounds_Characters");

                    b.HasOne("MudSharp.Models.Body", "Body")
                        .WithMany("Wounds")
                        .HasForeignKey("BodyId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Wounds_Bodies");

                    b.HasOne("MudSharp.Models.GameItem", "GameItem")
                        .WithMany("WoundsGameItem")
                        .HasForeignKey("GameItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("FK_Wounds_GameItemOwner");

                    b.HasOne("MudSharp.Models.GameItem", "LodgedItem")
                        .WithMany("WoundsLodgedItem")
                        .HasForeignKey("LodgedItemId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Wounds_GameItems");

                    b.HasOne("MudSharp.Models.GameItem", "ToolOrigin")
                        .WithMany("WoundsToolOrigin")
                        .HasForeignKey("ToolOriginId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Wounds_GameItems_Tool");

                    b.Navigation("ActorOrigin");

                    b.Navigation("Body");

                    b.Navigation("GameItem");

                    b.Navigation("LodgedItem");

                    b.Navigation("ToolOrigin");
                });

            modelBuilder.Entity("MudSharp.Models.Writing", b =>
                {
                    b.HasOne("MudSharp.Models.Character", "Author")
                        .WithMany("WritingsAuthor")
                        .HasForeignKey("AuthorId")
                        .IsRequired()
                        .HasConstraintName("FK_Writings_Characters_Author");

                    b.HasOne("MudSharp.Models.Language", "Language")
                        .WithMany("Writings")
                        .HasForeignKey("LanguageId")
                        .IsRequired()
                        .HasConstraintName("FK_Writings_Languages");

                    b.HasOne("MudSharp.Models.Script", "Script")
                        .WithMany("Writings")
                        .HasForeignKey("ScriptId")
                        .IsRequired()
                        .HasConstraintName("FK_Writings_Scripts");

                    b.HasOne("MudSharp.Models.Character", "TrueAuthor")
                        .WithMany("WritingsTrueAuthor")
                        .HasForeignKey("TrueAuthorId")
                        .OnDelete(DeleteBehavior.SetNull)
                        .HasConstraintName("FK_Writings_Characters_TrueAuthor");

                    b.Navigation("Author");

                    b.Navigation("Language");

                    b.Navigation("Script");

                    b.Navigation("TrueAuthor");
                });

            modelBuilder.Entity("MudSharp.Models.Zone", b =>
                {
                    b.HasOne("MudSharp.Models.Cell", "DefaultCell")
                        .WithMany("Zones")
                        .HasForeignKey("DefaultCellId")
                        .HasConstraintName("FK_Zones_Cells");

                    b.HasOne("MudSharp.Models.Shard", "Shard")
                        .WithMany("Zones")
                        .HasForeignKey("ShardId")
                        .IsRequired()
                        .HasConstraintName("FK_Zones_Shards");

                    b.HasOne("MudSharp.Models.WeatherController", "WeatherController")
                        .WithMany("Zones")
                        .HasForeignKey("WeatherControllerId")
                        .HasConstraintName("FK_Zones_WeatherControllers");

                    b.Navigation("DefaultCell");

                    b.Navigation("Shard");

                    b.Navigation("WeatherController");
                });

            modelBuilder.Entity("MudSharp.Models.ZonesTimezones", b =>
                {
                    b.HasOne("MudSharp.Models.Zone", "Zone")
                        .WithMany("ZonesTimezones")
                        .HasForeignKey("ZoneId")
                        .IsRequired()
                        .HasConstraintName("FK_Zones_Timezones_Zones");

                    b.Navigation("Zone");
                });

            modelBuilder.Entity("MudSharp.Models.Accent", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("CharactersAccents");

                    b.Navigation("Languages");
                });

            modelBuilder.Entity("MudSharp.Models.Account", b =>
                {
                    b.Navigation("AccountNotesAccount");

                    b.Navigation("AccountNotesAuthor");

                    b.Navigation("AccountsChargenResources");

                    b.Navigation("Bans");

                    b.Navigation("ChannelIgnorers");

                    b.Navigation("CharacterLog");

                    b.Navigation("Characters");

                    b.Navigation("ChargenRoles");

                    b.Navigation("ChargenRolesApprovers");

                    b.Navigation("Chargens");

                    b.Navigation("LoginIps");
                });

            modelBuilder.Entity("MudSharp.Models.ActiveProject", b =>
                {
                    b.Navigation("ActiveProjectLabours");

                    b.Navigation("ActiveProjectMaterials");

                    b.Navigation("Characters");
                });

            modelBuilder.Entity("MudSharp.Models.Appointment", b =>
                {
                    b.Navigation("AppointmentsAbbreviations");

                    b.Navigation("AppointmentsTitles");

                    b.Navigation("ClanMembershipsAppointments");

                    b.Navigation("Elections");

                    b.Navigation("ExternalClanControlsControlledAppointment");

                    b.Navigation("ExternalClanControlsControllingAppointment");

                    b.Navigation("InverseParentAppointment");
                });

            modelBuilder.Entity("MudSharp.Models.Areas", b =>
                {
                    b.Navigation("AreasRooms");
                });

            modelBuilder.Entity("MudSharp.Models.ArmourType", b =>
                {
                    b.Navigation("BodypartProto");

                    b.Navigation("Races");

                    b.Navigation("ShieldTypes");
                });

            modelBuilder.Entity("MudSharp.Models.ArtificialIntelligence", b =>
                {
                    b.Navigation("NpcsArtificialIntelligences");

                    b.Navigation("NpctemplatesArtificalIntelligences");
                });

            modelBuilder.Entity("MudSharp.Models.AuthorityGroup", b =>
                {
                    b.Navigation("Accounts");
                });

            modelBuilder.Entity("MudSharp.Models.Bank", b =>
                {
                    b.Navigation("BankAccountTypes");

                    b.Navigation("BankAccounts");

                    b.Navigation("BankBranches");

                    b.Navigation("BankCurrencyReserves");

                    b.Navigation("BankExchangeRates");

                    b.Navigation("BankManagerAuditLogs");

                    b.Navigation("BankManagers");
                });

            modelBuilder.Entity("MudSharp.Models.BankAccount", b =>
                {
                    b.Navigation("BankAccountTransactions");
                });

            modelBuilder.Entity("MudSharp.Models.BloodModel", b =>
                {
                    b.Navigation("BloodModelsBloodtypes");

                    b.Navigation("Races");
                });

            modelBuilder.Entity("MudSharp.Models.Bloodtype", b =>
                {
                    b.Navigation("BloodModelsBloodtypes");

                    b.Navigation("BloodtypesBloodtypeAntigens");

                    b.Navigation("Bodies");

                    b.Navigation("PopulationBloodModelsBloodtypes");
                });

            modelBuilder.Entity("MudSharp.Models.BloodtypeAntigen", b =>
                {
                    b.Navigation("BloodtypesBloodtypeAntigens");
                });

            modelBuilder.Entity("MudSharp.Models.Board", b =>
                {
                    b.Navigation("BoardPosts");
                });

            modelBuilder.Entity("MudSharp.Models.Body", b =>
                {
                    b.Navigation("BodiesDrugDoses");

                    b.Navigation("BodiesGameItems");

                    b.Navigation("BodiesImplants");

                    b.Navigation("BodiesProsthetics");

                    b.Navigation("BodiesSeveredParts");

                    b.Navigation("Characteristics");

                    b.Navigation("Characters");

                    b.Navigation("HooksPerceivables");

                    b.Navigation("Infections");

                    b.Navigation("PerceiverMerits");

                    b.Navigation("Traits");

                    b.Navigation("Wounds");
                });

            modelBuilder.Entity("MudSharp.Models.BodyProto", b =>
                {
                    b.Navigation("BodyProtosAdditionalBodyparts");

                    b.Navigation("BodyProtosPositions");

                    b.Navigation("BodypartGroupDescribersBodyProtos");

                    b.Navigation("BodypartProtos");

                    b.Navigation("ButcheryProducts");

                    b.Navigation("InverseCountsAs");

                    b.Navigation("Limbs");

                    b.Navigation("MoveSpeeds");

                    b.Navigation("Races");
                });

            modelBuilder.Entity("MudSharp.Models.BodypartGroupDescriber", b =>
                {
                    b.Navigation("BodypartGroupDescribersBodyProtos");

                    b.Navigation("BodypartGroupDescribersBodypartProtos");

                    b.Navigation("BodypartGroupDescribersShapeCount");
                });

            modelBuilder.Entity("MudSharp.Models.BodypartProto", b =>
                {
                    b.Navigation("BodiesSeveredParts");

                    b.Navigation("BodyProtos");

                    b.Navigation("BodyProtosAdditionalBodyparts");

                    b.Navigation("BodypartGroupDescribersBodypartProtos");

                    b.Navigation("BodypartInternalInfosBodypartProto");

                    b.Navigation("BodypartInternalInfosInternalPart");

                    b.Navigation("BodypartProtoAlignmentHits");

                    b.Navigation("BodypartProtoBodypartProtoUpstreamChildNavigation");

                    b.Navigation("BodypartProtoBodypartProtoUpstreamParentNavigation");

                    b.Navigation("BodypartProtoOrientationHits");

                    b.Navigation("BoneOrganCoveragesBone");

                    b.Navigation("BoneOrganCoveragesOrgan");

                    b.Navigation("ButcheryProductsBodypartProtos");

                    b.Navigation("Infections");

                    b.Navigation("InverseCountAs");

                    b.Navigation("Limbs");

                    b.Navigation("LimbsBodypartProto");

                    b.Navigation("LimbsSpinalParts");

                    b.Navigation("RacesAdditionalBodyparts");

                    b.Navigation("RacesWeaponAttacks");
                });

            modelBuilder.Entity("MudSharp.Models.BodypartShape", b =>
                {
                    b.Navigation("BodypartGroupDescribersShapeCount");

                    b.Navigation("BodypartProto");
                });

            modelBuilder.Entity("MudSharp.Models.ButcheryProducts", b =>
                {
                    b.Navigation("ButcheryProductItems");

                    b.Navigation("ButcheryProductsBodypartProtos");

                    b.Navigation("RaceButcheryProfilesButcheryProducts");
                });

            modelBuilder.Entity("MudSharp.Models.Calendar", b =>
                {
                    b.Navigation("Clans");

                    b.Navigation("EconomicZones");
                });

            modelBuilder.Entity("MudSharp.Models.Celestial", b =>
                {
                    b.Navigation("Seasons");

                    b.Navigation("WeatherControllers");
                });

            modelBuilder.Entity("MudSharp.Models.Cell", b =>
                {
                    b.Navigation("ActiveProjects");

                    b.Navigation("CellOverlays");

                    b.Navigation("CellsForagableYields");

                    b.Navigation("CellsGameItems");

                    b.Navigation("CellsMagicResources");

                    b.Navigation("CellsRangedCovers");

                    b.Navigation("CellsTags");

                    b.Navigation("CharacterLog");

                    b.Navigation("Characters");

                    b.Navigation("ClansAdministrationCells");

                    b.Navigation("ClansTreasuryCells");

                    b.Navigation("Crimes");

                    b.Navigation("HooksPerceivables");

                    b.Navigation("ShopsStockroomCell");

                    b.Navigation("ShopsStoreroomCells");

                    b.Navigation("ShopsWorkshopCell");

                    b.Navigation("Zones");
                });

            modelBuilder.Entity("MudSharp.Models.CellOverlay", b =>
                {
                    b.Navigation("CellOverlaysExits");

                    b.Navigation("Cells");
                });

            modelBuilder.Entity("MudSharp.Models.CellOverlayPackage", b =>
                {
                    b.Navigation("CellOverlays");
                });

            modelBuilder.Entity("MudSharp.Models.Channel", b =>
                {
                    b.Navigation("ChannelCommandWords");

                    b.Navigation("ChannelIgnorers");
                });

            modelBuilder.Entity("MudSharp.Models.Character", b =>
                {
                    b.Navigation("ActiveJobs");

                    b.Navigation("ActiveProjects");

                    b.Navigation("AlliesAlly");

                    b.Navigation("AlliesCharacter");

                    b.Navigation("CharacterCombatSettings");

                    b.Navigation("CharacterKnowledges");

                    b.Navigation("CharacterLog");

                    b.Navigation("CharactersAccents");

                    b.Navigation("CharactersChargenRoles");

                    b.Navigation("CharactersLanguages");

                    b.Navigation("CharactersMagicResources");

                    b.Navigation("CharactersScripts");

                    b.Navigation("ClanMembershipsCharacter");

                    b.Navigation("ClanMembershipsManager");

                    b.Navigation("Clans");

                    b.Navigation("CrimesAccuser");

                    b.Navigation("CrimesCriminal");

                    b.Navigation("CrimesVictim");

                    b.Navigation("Drawings");

                    b.Navigation("DreamsAlreadyDreamt");

                    b.Navigation("DreamsCharacters");

                    b.Navigation("Dubs");

                    b.Navigation("Fines");

                    b.Navigation("GPTMessages");

                    b.Navigation("Guest");

                    b.Navigation("HooksPerceivables");

                    b.Navigation("NpcsBodyguardCharacter");

                    b.Navigation("NpcsCharacter");

                    b.Navigation("Patrols");

                    b.Navigation("PerceiverMerits");

                    b.Navigation("ScriptedEvents");

                    b.Navigation("Wounds");

                    b.Navigation("WritingsAuthor");

                    b.Navigation("WritingsTrueAuthor");
                });

            modelBuilder.Entity("MudSharp.Models.CharacteristicDefinition", b =>
                {
                    b.Navigation("CharacteristicProfiles");

                    b.Navigation("CharacteristicValues");

                    b.Navigation("EthnicitiesCharacteristics");

                    b.Navigation("InverseParent");

                    b.Navigation("RacesAdditionalCharacteristics");
                });

            modelBuilder.Entity("MudSharp.Models.CharacteristicProfile", b =>
                {
                    b.Navigation("EthnicitiesCharacteristics");
                });

            modelBuilder.Entity("MudSharp.Models.CharacteristicValue", b =>
                {
                    b.Navigation("Characteristics");
                });

            modelBuilder.Entity("MudSharp.Models.Chargen", b =>
                {
                    b.Navigation("Characters");
                });

            modelBuilder.Entity("MudSharp.Models.ChargenAdvice", b =>
                {
                    b.Navigation("ChargenAdvicesChargenRoles");

                    b.Navigation("ChargenAdvicesCultures");

                    b.Navigation("ChargenAdvicesEthnicities");

                    b.Navigation("ChargenAdvicesRaces");
                });

            modelBuilder.Entity("MudSharp.Models.ChargenResource", b =>
                {
                    b.Navigation("AccountsChargenResources");

                    b.Navigation("ChargenRolesCosts");

                    b.Navigation("CulturesChargenResources");

                    b.Navigation("EthnicitiesChargenResources");

                    b.Navigation("KnowledgesCosts");

                    b.Navigation("MeritsChargenResources");

                    b.Navigation("RacesChargenResources");

                    b.Navigation("TraitDefinitionsChargenResources");
                });

            modelBuilder.Entity("MudSharp.Models.ChargenRole", b =>
                {
                    b.Navigation("CharactersChargenRoles");

                    b.Navigation("ChargenAdvicesChargenRoles");

                    b.Navigation("ChargenRolesApprovers");

                    b.Navigation("ChargenRolesClanMemberships");

                    b.Navigation("ChargenRolesCosts");

                    b.Navigation("ChargenRolesCurrencies");

                    b.Navigation("ChargenRolesMerits");

                    b.Navigation("ChargenRolesTraits");
                });

            modelBuilder.Entity("MudSharp.Models.ChargenRolesClanMemberships", b =>
                {
                    b.Navigation("ChargenRolesClanMembershipsAppointments");
                });

            modelBuilder.Entity("MudSharp.Models.ChargenScreenStoryboard", b =>
                {
                    b.Navigation("DependentStages");
                });

            modelBuilder.Entity("MudSharp.Models.CheckTemplate", b =>
                {
                    b.Navigation("CheckTemplateDifficulties");

                    b.Navigation("Checks");
                });

            modelBuilder.Entity("MudSharp.Models.Clan", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("ChargenRolesClanMemberships");

                    b.Navigation("ClanMemberships");

                    b.Navigation("ClansAdministrationCells");

                    b.Navigation("ClansTreasuryCells");

                    b.Navigation("EconomicZones");

                    b.Navigation("ExternalClanControlsLiegeClan");

                    b.Navigation("ExternalClanControlsVassalClan");

                    b.Navigation("InverseParentClan");

                    b.Navigation("Paygrades");

                    b.Navigation("Ranks");
                });

            modelBuilder.Entity("MudSharp.Models.ClanMembership", b =>
                {
                    b.Navigation("ClanMembershipsAppointments");

                    b.Navigation("ClanMembershipsBackpay");

                    b.Navigation("ExternalClanControlsAppointments");
                });

            modelBuilder.Entity("MudSharp.Models.ClimateModel", b =>
                {
                    b.Navigation("ClimateModelSeasons");
                });

            modelBuilder.Entity("MudSharp.Models.ClimateModelSeason", b =>
                {
                    b.Navigation("SeasonEvents");
                });

            modelBuilder.Entity("MudSharp.Models.Clock", b =>
                {
                    b.Navigation("EconomicZones");

                    b.Navigation("Timezones");

                    b.Navigation("WeatherControllers");
                });

            modelBuilder.Entity("MudSharp.Models.CombatAction", b =>
                {
                    b.Navigation("CombatMessagesCombatActions");

                    b.Navigation("RacesCombatActions");
                });

            modelBuilder.Entity("MudSharp.Models.CombatMessage", b =>
                {
                    b.Navigation("CombatMessagesCombatActions");

                    b.Navigation("CombatMessagesWeaponAttacks");
                });

            modelBuilder.Entity("MudSharp.Models.CorpseModel", b =>
                {
                    b.Navigation("Races");
                });

            modelBuilder.Entity("MudSharp.Models.Craft", b =>
                {
                    b.Navigation("CraftInputs");

                    b.Navigation("CraftPhases");

                    b.Navigation("CraftProducts");

                    b.Navigation("CraftTools");
                });

            modelBuilder.Entity("MudSharp.Models.Culture", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("ChargenAdvicesCultures");

                    b.Navigation("CulturesChargenResources");

                    b.Navigation("CulturesNameCultures");
                });

            modelBuilder.Entity("MudSharp.Models.Currency", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("ChargenRolesCurrencies");

                    b.Navigation("ClanMembershipsBackpay");

                    b.Navigation("Coins");

                    b.Navigation("CurrencyDescriptionPatterns");

                    b.Navigation("CurrencyDivisions");

                    b.Navigation("EconomicZones");

                    b.Navigation("LegalAuthorities");

                    b.Navigation("Paygrades");

                    b.Navigation("ShopTransactionRecords");

                    b.Navigation("Shops");
                });

            modelBuilder.Entity("MudSharp.Models.CurrencyDescriptionPattern", b =>
                {
                    b.Navigation("CurrencyDescriptionPatternElements");
                });

            modelBuilder.Entity("MudSharp.Models.CurrencyDescriptionPatternElement", b =>
                {
                    b.Navigation("CurrencyDescriptionPatternElementSpecialValues");
                });

            modelBuilder.Entity("MudSharp.Models.CurrencyDivision", b =>
                {
                    b.Navigation("CurrencyDescriptionPatternElements");

                    b.Navigation("CurrencyDivisionAbbreviations");
                });

            modelBuilder.Entity("MudSharp.Models.Dream", b =>
                {
                    b.Navigation("DreamPhases");

                    b.Navigation("DreamsAlreadyDreamt");

                    b.Navigation("DreamsCharacters");
                });

            modelBuilder.Entity("MudSharp.Models.Drug", b =>
                {
                    b.Navigation("BodiesDrugDoses");

                    b.Navigation("DrugsIntensities");

                    b.Navigation("Liquids");
                });

            modelBuilder.Entity("MudSharp.Models.EconomicZone", b =>
                {
                    b.Navigation("ConveyancingLocations");

                    b.Navigation("EconomicZoneRevenues");

                    b.Navigation("EconomicZoneShopTaxes");

                    b.Navigation("EconomicZoneTaxes");

                    b.Navigation("FinancialPeriods");

                    b.Navigation("JobFindingLocations");

                    b.Navigation("JobListings");

                    b.Navigation("Properties");

                    b.Navigation("ShopFinancialPeriodResults");

                    b.Navigation("Shops");
                });

            modelBuilder.Entity("MudSharp.Models.EditableItem", b =>
                {
                    b.Navigation("CellOverlayPackages");

                    b.Navigation("Crafts");

                    b.Navigation("DisfigurementTemplates");

                    b.Navigation("ForagableProfiles");

                    b.Navigation("Foragables");

                    b.Navigation("GameItemComponentProtos");

                    b.Navigation("GameItemProtos");

                    b.Navigation("Npctemplates");

                    b.Navigation("Projects");
                });

            modelBuilder.Entity("MudSharp.Models.Election", b =>
                {
                    b.Navigation("ElectionNominees");

                    b.Navigation("ElectionVotes");
                });

            modelBuilder.Entity("MudSharp.Models.EnforcementAuthority", b =>
                {
                    b.Navigation("EnforcementAuthoritiesAccusableClasses");

                    b.Navigation("EnforcementAuthoritiesArrestableLegalClasses");

                    b.Navigation("EnforcementAuthoritiesParentAuthoritiesChild");

                    b.Navigation("EnforcementAuthoritiesParentAuthoritiesParent");
                });

            modelBuilder.Entity("MudSharp.Models.EntityDescriptionPattern", b =>
                {
                    b.Navigation("BodiesFullDescriptionPattern");

                    b.Navigation("BodiesShortDescriptionPattern");

                    b.Navigation("EntityDescriptionPatternsEntityDescriptions");
                });

            modelBuilder.Entity("MudSharp.Models.EntityDescriptions", b =>
                {
                    b.Navigation("EntityDescriptionPatternsEntityDescriptions");
                });

            modelBuilder.Entity("MudSharp.Models.Ethnicity", b =>
                {
                    b.Navigation("Bodies");

                    b.Navigation("ChargenAdvicesEthnicities");

                    b.Navigation("EthnicitiesCharacteristics");

                    b.Navigation("EthnicitiesChargenResources");
                });

            modelBuilder.Entity("MudSharp.Models.Exit", b =>
                {
                    b.Navigation("CellOverlaysExits");
                });

            modelBuilder.Entity("MudSharp.Models.ExternalClanControl", b =>
                {
                    b.Navigation("ExternalClanControlsAppointments");
                });

            modelBuilder.Entity("MudSharp.Models.FinancialPeriod", b =>
                {
                    b.Navigation("EconomicZoneRevenues");

                    b.Navigation("EconomicZones");

                    b.Navigation("ShopFinancialPeriodResults");
                });

            modelBuilder.Entity("MudSharp.Models.ForagableProfile", b =>
                {
                    b.Navigation("ForagableProfilesForagables");

                    b.Navigation("ForagableProfilesHourlyYieldGains");

                    b.Navigation("ForagableProfilesMaximumYields");
                });

            modelBuilder.Entity("MudSharp.Models.FutureProg", b =>
                {
                    b.Navigation("AppointmentsAbbreviations");

                    b.Navigation("AppointmentsTitles");

                    b.Navigation("ButcheryProducts");

                    b.Navigation("ChannelsChannelListenerProg");

                    b.Navigation("ChannelsChannelSpeakerProg");

                    b.Navigation("CharacterCombatSettings");

                    b.Navigation("CharacterIntroTemplates");

                    b.Navigation("CharacteristicValues");

                    b.Navigation("ChargenAdvices");

                    b.Navigation("ChargenRoles");

                    b.Navigation("Clans");

                    b.Navigation("CombatMessages");

                    b.Navigation("CraftsAppearInCraftsListProg");

                    b.Navigation("CraftsCanUseProg");

                    b.Navigation("CraftsOnUseProgCancel");

                    b.Navigation("CraftsOnUseProgComplete");

                    b.Navigation("CraftsOnUseProgStart");

                    b.Navigation("CraftsWhyCannotUseProg");

                    b.Navigation("CulturesAvailabilityProg");

                    b.Navigation("CulturesSkillStartingValueProg");

                    b.Navigation("CurrencyDescriptionPatterns");

                    b.Navigation("DefaultHooks");

                    b.Navigation("DreamsCanDreamProg");

                    b.Navigation("DreamsOnDreamProg");

                    b.Navigation("DreamsOnWakeDuringDreamingProg");

                    b.Navigation("EnforcementAuthorities");

                    b.Navigation("EntityDescriptionPatterns");

                    b.Navigation("Ethnicities");

                    b.Navigation("FutureProgsParameters");

                    b.Navigation("GameItemProtosOnLoadProgs");

                    b.Navigation("Helpfiles");

                    b.Navigation("HelpfilesExtraTexts");

                    b.Navigation("KnowledgesCanAcquireProg");

                    b.Navigation("KnowledgesCanLearnProg");

                    b.Navigation("Laws");

                    b.Navigation("LegalClasses");

                    b.Navigation("PatrolRoutes");

                    b.Navigation("ProgSchedules");

                    b.Navigation("RaceButcheryProfilesCanButcherProg");

                    b.Navigation("RaceButcheryProfilesWhyCannotButcherProg");

                    b.Navigation("RacesAttributeBonusProg");

                    b.Navigation("RacesAvailabilityProg");

                    b.Navigation("RanksAbbreviations");

                    b.Navigation("RanksTitles");

                    b.Navigation("ShopsCanShopProg");

                    b.Navigation("ShopsWhyCannotShopProg");

                    b.Navigation("Socials");

                    b.Navigation("SurgicalProcedurePhases");

                    b.Navigation("SurgicalProceduresAbortProg");

                    b.Navigation("SurgicalProceduresCompletionProg");

                    b.Navigation("SurgicalProceduresUsabilityProg");

                    b.Navigation("SurgicalProceduresWhyCannotUseProg");

                    b.Navigation("Tags");

                    b.Navigation("TraitDefinitionsAvailabilityProg");

                    b.Navigation("TraitDefinitionsLearnableProg");

                    b.Navigation("TraitDefinitionsTeachableProg");

                    b.Navigation("WeaponAttacks");

                    b.Navigation("WitnessProfilesIdentityKnownProg");

                    b.Navigation("WitnessProfilesReportingMultiplierProg");
                });

            modelBuilder.Entity("MudSharp.Models.GPTThread", b =>
                {
                    b.Navigation("Messages");
                });

            modelBuilder.Entity("MudSharp.Models.GameItem", b =>
                {
                    b.Navigation("BodiesGameItems");

                    b.Navigation("BodiesImplants");

                    b.Navigation("BodiesProsthetics");

                    b.Navigation("CellsGameItems");

                    b.Navigation("GameItemComponents");

                    b.Navigation("GameItemsMagicResources");

                    b.Navigation("HooksPerceivables");

                    b.Navigation("InverseContainer");

                    b.Navigation("Merchandises");

                    b.Navigation("ShopsTills");

                    b.Navigation("WoundsGameItem");

                    b.Navigation("WoundsLodgedItem");

                    b.Navigation("WoundsToolOrigin");
                });

            modelBuilder.Entity("MudSharp.Models.GameItemComponentProto", b =>
                {
                    b.Navigation("GameItemProtosGameItemComponentProtos");
                });

            modelBuilder.Entity("MudSharp.Models.GameItemProto", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("ExtraDescriptions");

                    b.Navigation("GameItemProtosDefaultVariables");

                    b.Navigation("GameItemProtosGameItemComponentProtos");

                    b.Navigation("GameItemProtosOnLoadProgs");

                    b.Navigation("GameItemProtosTags");

                    b.Navigation("Ranks");
                });

            modelBuilder.Entity("MudSharp.Models.Gas", b =>
                {
                    b.Navigation("GasesTags");

                    b.Navigation("InverseCountAs");

                    b.Navigation("RacesBreathableGases");
                });

            modelBuilder.Entity("MudSharp.Models.GroupAiTemplate", b =>
                {
                    b.Navigation("GroupAis");
                });

            modelBuilder.Entity("MudSharp.Models.HealthStrategy", b =>
                {
                    b.Navigation("Races");
                });

            modelBuilder.Entity("MudSharp.Models.HearingProfile", b =>
                {
                    b.Navigation("CellOverlays");
                });

            modelBuilder.Entity("MudSharp.Models.Helpfile", b =>
                {
                    b.Navigation("HelpfilesExtraTexts");
                });

            modelBuilder.Entity("MudSharp.Models.Hooks", b =>
                {
                    b.Navigation("DefaultHooks");

                    b.Navigation("HooksPerceivables");
                });

            modelBuilder.Entity("MudSharp.Models.ItemGroup", b =>
                {
                    b.Navigation("GameItemProtos");

                    b.Navigation("ItemGroupForms");
                });

            modelBuilder.Entity("MudSharp.Models.JobListing", b =>
                {
                    b.Navigation("ActiveJobs");
                });

            modelBuilder.Entity("MudSharp.Models.Knowledge", b =>
                {
                    b.Navigation("CharacterKnowledges");

                    b.Navigation("KnowledgesCosts");

                    b.Navigation("Scripts");

                    b.Navigation("SurgicalProcedures");
                });

            modelBuilder.Entity("MudSharp.Models.Language", b =>
                {
                    b.Navigation("Accents");

                    b.Navigation("CharactersCurrentLanguage");

                    b.Navigation("CharactersCurrentWritingLanguage");

                    b.Navigation("CharactersLanguages");

                    b.Navigation("MutualIntelligabilitiesListenerLanguage");

                    b.Navigation("MutualIntelligabilitiesTargetLanguage");

                    b.Navigation("ScriptsDesignedLanguages");

                    b.Navigation("Writings");
                });

            modelBuilder.Entity("MudSharp.Models.LanguageDifficultyModels", b =>
                {
                    b.Navigation("Languages");
                });

            modelBuilder.Entity("MudSharp.Models.Law", b =>
                {
                    b.Navigation("Crimes");

                    b.Navigation("LawsOffenderClasses");

                    b.Navigation("LawsVictimClasses");
                });

            modelBuilder.Entity("MudSharp.Models.LegalAuthority", b =>
                {
                    b.Navigation("EnforcementAuthorities");

                    b.Navigation("Fines");

                    b.Navigation("Laws");

                    b.Navigation("LegalAuthoritiesZones");

                    b.Navigation("LegalAuthorityCells");

                    b.Navigation("LegalAuthorityJailCells");

                    b.Navigation("LegalClasses");

                    b.Navigation("PatrolRoutes");

                    b.Navigation("Patrols");

                    b.Navigation("WitnessProfilesCooperatingAuthorities");
                });

            modelBuilder.Entity("MudSharp.Models.LegalClass", b =>
                {
                    b.Navigation("EnforcementAuthoritiesAccusableClasses");

                    b.Navigation("EnforcementAuthoritiesArrestableClasses");

                    b.Navigation("LawsOffenderClasses");

                    b.Navigation("LawsVictimClasses");

                    b.Navigation("WitnessProfilesIgnoredCriminalClasses");

                    b.Navigation("WitnessProfilesIgnoredVictimClasses");
                });

            modelBuilder.Entity("MudSharp.Models.Limb", b =>
                {
                    b.Navigation("LimbsBodypartProto");

                    b.Navigation("LimbsSpinalParts");
                });

            modelBuilder.Entity("MudSharp.Models.LineOfCreditAccount", b =>
                {
                    b.Navigation("AccountUsers");
                });

            modelBuilder.Entity("MudSharp.Models.Liquid", b =>
                {
                    b.Navigation("Gases");

                    b.Navigation("InverseCountAs");

                    b.Navigation("InverseSolvent");

                    b.Navigation("LiquidsTags");

                    b.Navigation("RacesBloodLiquid");

                    b.Navigation("RacesBreathableLiquids");

                    b.Navigation("RacesSweatLiquid");
                });

            modelBuilder.Entity("MudSharp.Models.Lock", b =>
                {
                    b.Navigation("Doors");
                });

            modelBuilder.Entity("MudSharp.Models.MagicResource", b =>
                {
                    b.Navigation("CellsMagicResources");

                    b.Navigation("CharactersMagicResources");

                    b.Navigation("GameItemsMagicResources");
                });

            modelBuilder.Entity("MudSharp.Models.MagicSchool", b =>
                {
                    b.Navigation("InverseParentSchool");

                    b.Navigation("MagicCapabilities");

                    b.Navigation("MagicPowers");

                    b.Navigation("MagicSpells");
                });

            modelBuilder.Entity("MudSharp.Models.Market", b =>
                {
                    b.Navigation("Influences");

                    b.Navigation("MarketPopulations");

                    b.Navigation("Shops");
                });

            modelBuilder.Entity("MudSharp.Models.Material", b =>
                {
                    b.Navigation("BodypartProto");

                    b.Navigation("Liquids");

                    b.Navigation("MaterialsTags");

                    b.Navigation("Races");

                    b.Navigation("RacesEdibleMaterials");
                });

            modelBuilder.Entity("MudSharp.Models.Merit", b =>
                {
                    b.Navigation("ChargenRolesMerits");

                    b.Navigation("InverseParent");

                    b.Navigation("MeritsChargenResources");

                    b.Navigation("PerceiverMerits");
                });

            modelBuilder.Entity("MudSharp.Models.NPCSpawner", b =>
                {
                    b.Navigation("Cells");

                    b.Navigation("Zones");
                });

            modelBuilder.Entity("MudSharp.Models.NameCulture", b =>
                {
                    b.Navigation("CulturesNameCultures");

                    b.Navigation("RandomNameProfiles");
                });

            modelBuilder.Entity("MudSharp.Models.Npc", b =>
                {
                    b.Navigation("NpcsArtificialIntelligences");
                });

            modelBuilder.Entity("MudSharp.Models.NpcTemplate", b =>
                {
                    b.Navigation("Npcs");

                    b.Navigation("NpctemplatesArtificalIntelligences");
                });

            modelBuilder.Entity("MudSharp.Models.Patrol", b =>
                {
                    b.Navigation("PatrolMembers");
                });

            modelBuilder.Entity("MudSharp.Models.PatrolRoute", b =>
                {
                    b.Navigation("PatrolRouteNodes");

                    b.Navigation("PatrolRouteNumbers");

                    b.Navigation("Patrols");

                    b.Navigation("TimesOfDay");
                });

            modelBuilder.Entity("MudSharp.Models.Paygrade", b =>
                {
                    b.Navigation("Appointments");

                    b.Navigation("RanksPaygrades");
                });

            modelBuilder.Entity("MudSharp.Models.PopulationBloodModel", b =>
                {
                    b.Navigation("Ethnicities");

                    b.Navigation("PopulationBloodModelsBloodtypes");
                });

            modelBuilder.Entity("MudSharp.Models.Project", b =>
                {
                    b.Navigation("ActiveProjects");

                    b.Navigation("ProjectPhases");
                });

            modelBuilder.Entity("MudSharp.Models.ProjectLabourRequirement", b =>
                {
                    b.Navigation("ActiveProjectLabours");

                    b.Navigation("Characters");

                    b.Navigation("ProjectLabourImpacts");
                });

            modelBuilder.Entity("MudSharp.Models.ProjectMaterialRequirement", b =>
                {
                    b.Navigation("ActiveProjectMaterials");
                });

            modelBuilder.Entity("MudSharp.Models.ProjectPhase", b =>
                {
                    b.Navigation("ActiveProjects");

                    b.Navigation("ProjectActions");

                    b.Navigation("ProjectLabourRequirements");

                    b.Navigation("ProjectMaterialRequirements");
                });

            modelBuilder.Entity("MudSharp.Models.Property", b =>
                {
                    b.Navigation("LeaseOrders");

                    b.Navigation("PropertyKeys");

                    b.Navigation("PropertyLeases");

                    b.Navigation("PropertyLocations");

                    b.Navigation("PropertyOwners");
                });

            modelBuilder.Entity("MudSharp.Models.PropertyLeaseOrder", b =>
                {
                    b.Navigation("PropertyLeases");
                });

            modelBuilder.Entity("MudSharp.Models.Race", b =>
                {
                    b.Navigation("Bodies");

                    b.Navigation("ChargenAdvicesRaces");

                    b.Navigation("Ethnicities");

                    b.Navigation("InverseParentRace");

                    b.Navigation("RaceEdibleForagableYields");

                    b.Navigation("RacesAdditionalBodyparts");

                    b.Navigation("RacesAdditionalCharacteristics");

                    b.Navigation("RacesAttributes");

                    b.Navigation("RacesBreathableGases");

                    b.Navigation("RacesBreathableLiquids");

                    b.Navigation("RacesChargenResources");

                    b.Navigation("RacesCombatActions");

                    b.Navigation("RacesEdibleMaterials");

                    b.Navigation("RacesWeaponAttacks");
                });

            modelBuilder.Entity("MudSharp.Models.RaceButcheryProfile", b =>
                {
                    b.Navigation("RaceButcheryProfilesBreakdownChecks");

                    b.Navigation("RaceButcheryProfilesBreakdownEmotes");

                    b.Navigation("RaceButcheryProfilesButcheryProducts");

                    b.Navigation("RaceButcheryProfilesSkinningEmotes");

                    b.Navigation("Races");
                });

            modelBuilder.Entity("MudSharp.Models.RandomNameProfile", b =>
                {
                    b.Navigation("RandomNameProfilesDiceExpressions");

                    b.Navigation("RandomNameProfilesElements");
                });

            modelBuilder.Entity("MudSharp.Models.RangedCover", b =>
                {
                    b.Navigation("CellsRangedCovers");

                    b.Navigation("TerrainsRangedCovers");
                });

            modelBuilder.Entity("MudSharp.Models.Rank", b =>
                {
                    b.Navigation("AppointmentsMinimumRank");

                    b.Navigation("AppointmentsMinimumRankToAppoint");

                    b.Navigation("RanksAbbreviations");

                    b.Navigation("RanksPaygrades");

                    b.Navigation("RanksTitles");
                });

            modelBuilder.Entity("MudSharp.Models.RegionalClimate", b =>
                {
                    b.Navigation("RegionalClimatesSeasons");

                    b.Navigation("WeatherControllers");
                });

            modelBuilder.Entity("MudSharp.Models.Room", b =>
                {
                    b.Navigation("AreasRooms");

                    b.Navigation("Cells");
                });

            modelBuilder.Entity("MudSharp.Models.Script", b =>
                {
                    b.Navigation("Characters");

                    b.Navigation("CharactersScripts");

                    b.Navigation("ScriptsDesignedLanguages");

                    b.Navigation("Writings");
                });

            modelBuilder.Entity("MudSharp.Models.ScriptedEvent", b =>
                {
                    b.Navigation("FreeTextQuestions");

                    b.Navigation("MultipleChoiceQuestions");
                });

            modelBuilder.Entity("MudSharp.Models.ScriptedEventMultipleChoiceQuestion", b =>
                {
                    b.Navigation("Answers");
                });

            modelBuilder.Entity("MudSharp.Models.Season", b =>
                {
                    b.Navigation("ClimateModelSeasons");

                    b.Navigation("RegionalClimatesSeasons");

                    b.Navigation("WeatherControllers");
                });

            modelBuilder.Entity("MudSharp.Models.Shard", b =>
                {
                    b.Navigation("HooksPerceivables");

                    b.Navigation("ShardsCalendars");

                    b.Navigation("ShardsCelestials");

                    b.Navigation("ShardsClocks");

                    b.Navigation("Zones");
                });

            modelBuilder.Entity("MudSharp.Models.Shop", b =>
                {
                    b.Navigation("EconomicZoneShopTaxes");

                    b.Navigation("LineOfCreditAccounts");

                    b.Navigation("Merchandises");

                    b.Navigation("ShopFinancialPeriodResults");

                    b.Navigation("ShopTransactionRecords");

                    b.Navigation("ShopsStoreroomCells");

                    b.Navigation("ShopsTills");
                });

            modelBuilder.Entity("MudSharp.Models.SkyDescriptionTemplate", b =>
                {
                    b.Navigation("Shards");

                    b.Navigation("SkyDescriptionTemplatesValues");
                });

            modelBuilder.Entity("MudSharp.Models.SurgicalProcedure", b =>
                {
                    b.Navigation("SurgicalProcedurePhases");
                });

            modelBuilder.Entity("MudSharp.Models.Tag", b =>
                {
                    b.Navigation("CellsTags");

                    b.Navigation("GameItemProtosTags");

                    b.Navigation("GasesTags");

                    b.Navigation("InverseParent");

                    b.Navigation("LiquidsTags");

                    b.Navigation("MaterialsTags");

                    b.Navigation("RaceButcheryProfiles");
                });

            modelBuilder.Entity("MudSharp.Models.Terrain", b =>
                {
                    b.Navigation("CellOverlays");

                    b.Navigation("TerrainsRangedCovers");
                });

            modelBuilder.Entity("MudSharp.Models.Timezone", b =>
                {
                    b.Navigation("EconomicZones");

                    b.Navigation("WeatherControllers");
                });

            modelBuilder.Entity("MudSharp.Models.TraitDefinition", b =>
                {
                    b.Navigation("ChargenRolesTraits");

                    b.Navigation("Crafts");

                    b.Navigation("Languages");

                    b.Navigation("RaceButcheryProfilesBreakdownChecks");

                    b.Navigation("RacesAttributes");

                    b.Navigation("RangedWeaponTypesFireTrait");

                    b.Navigation("RangedWeaponTypesOperateTrait");

                    b.Navigation("ShieldTypes");

                    b.Navigation("TraitDefinitionsChargenResources");

                    b.Navigation("TraitExpressionParameters");

                    b.Navigation("Traits");

                    b.Navigation("WeaponTypesAttackTrait");

                    b.Navigation("WeaponTypesParryTrait");

                    b.Navigation("WearableSizeParameterRule");
                });

            modelBuilder.Entity("MudSharp.Models.TraitExpression", b =>
                {
                    b.Navigation("Checks");

                    b.Navigation("TraitDefinitions");

                    b.Navigation("TraitExpressionParameters");

                    b.Navigation("WeaponAttacksDamageExpression");

                    b.Navigation("WeaponAttacksPainExpression");

                    b.Navigation("WeaponAttacksStunExpression");
                });

            modelBuilder.Entity("MudSharp.Models.WeaponAttack", b =>
                {
                    b.Navigation("CombatMessagesWeaponAttacks");

                    b.Navigation("RacesWeaponAttacks");
                });

            modelBuilder.Entity("MudSharp.Models.WeaponType", b =>
                {
                    b.Navigation("WeaponAttacks");
                });

            modelBuilder.Entity("MudSharp.Models.WearableSizeParameterRule", b =>
                {
                    b.Navigation("BodyProtos");
                });

            modelBuilder.Entity("MudSharp.Models.WeatherController", b =>
                {
                    b.Navigation("Areas");

                    b.Navigation("Terrains");

                    b.Navigation("Zones");
                });

            modelBuilder.Entity("MudSharp.Models.WeatherEvent", b =>
                {
                    b.Navigation("InverseCountsAs");

                    b.Navigation("WeatherControllers");
                });

            modelBuilder.Entity("MudSharp.Models.WitnessProfile", b =>
                {
                    b.Navigation("WitnessProfilesCooperatingAuthorities");

                    b.Navigation("WitnessProfilesIgnoredCriminalClasses");

                    b.Navigation("WitnessProfilesIgnoredVictimClasses");
                });

            modelBuilder.Entity("MudSharp.Models.Wound", b =>
                {
                    b.Navigation("Infections");
                });

            modelBuilder.Entity("MudSharp.Models.Zone", b =>
                {
                    b.Navigation("HooksPerceivables");

                    b.Navigation("LegalAuthoritiesZones");

                    b.Navigation("Rooms");

                    b.Navigation("ZonesTimezones");
                });
#pragma warning restore 612, 618
        }
    }
}
